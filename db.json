{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1541480413770},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1541480413770},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1541480413770},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1541480413770},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1541480413770},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1541480413770},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1541480413770},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1541480413770},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1541480413771},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1541480413771},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1541480413771},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1541480413771},{"_id":"themes/next/_config.yml","hash":"10f7cf8b73781adf1213af02b05705ea93cdc9a4","modified":1558343286506},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1541480413771},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1541480413771},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1541480413775},{"_id":"source/_discarded/Spring-Cloud-Eureka-使用Nginx做路由网关-1.md","hash":"ff0a54fd95ae4d6df527344aa0b46704e31c3509","modified":1541479610056},{"_id":"source/_posts/Jenkins安装及自动部署Maven项目.md","hash":"c12420e67fca7a5e349755c2a65664c18a2e0ebe","modified":1541482385312},{"_id":"source/_posts/Linux平台Nginx的安装及使用.md","hash":"9d0876330f9d67d91109cd9c6ea81227c55660a0","modified":1541479801842},{"_id":"source/_posts/Spring-Cloud-Config-入门.md","hash":"15f86d5e53552874e2dc23c3b2ae67a114096f04","modified":1541481646375},{"_id":"source/_posts/Spring-Cloud-Eureka-使用Nginx做路由网关.md","hash":"a65ea9fd1b77c08c8ecd4959044ddd3d18e77b44","modified":1541479590867},{"_id":"source/_posts/Spring-Cloud-Gateway深入探究.md","hash":"36fb301cdee98eb7bc3dc1c7fd284a219d03b9c2","modified":1541481537666},{"_id":"source/_posts/hello-world.md","hash":"b4a99093815eb852fb5683c6928ed84395399b5f","modified":1541481788759},{"_id":"source/_posts/如何使用Defender优雅的管理权限？.md","hash":"a30f54d67504bb824ea166bb7a1939be728706fa","modified":1544530194754},{"_id":"source/_posts/测试，hexo.md","hash":"8a7f6e460c1f1022c9716d74e9511b6852efcd35","modified":1541485692097},{"_id":"source/_posts/深入浅说服务如何以Jar包的方式发布.md","hash":"64997dcbebaf809840d4f7756684e53053513fb2","modified":1541482433129},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1541480413766},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1541480413766},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1541480380028},{"_id":"themes/next/.git/index","hash":"890d7a4c39c0015a4e52901faf060f6b6848d4db","modified":1541480413804},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1541480413763},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1541480413770},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1541480413770},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1541480413770},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1541480413770},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1541480413771},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1541480413771},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1541480413771},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1541480413771},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1541480413771},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1541480413771},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1541480413771},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1541480413772},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1541480413772},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1541480413772},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1541480413772},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1541480413772},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1541480413772},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1541480413772},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1541480413772},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1541480413772},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1541480413772},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1541480413775},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1541480413775},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1541480413775},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1541480413775},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1541480413775},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1541480413775},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1541480413775},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1541480413775},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1541480413775},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1541480413804},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1541480413804},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1541480413804},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413779},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1541480380027},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1541480380026},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1541480380027},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1541480380026},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1541480380027},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1541480380026},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1541480380026},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1541480380027},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1541480380026},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1541480380027},{"_id":"themes/next/.git/logs/HEAD","hash":"0b1f9989335bee327596412c1a4d8a6f9cd06e88","modified":1541480413766},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541480413772},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541480413772},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1541480413772},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1541480413772},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1541480413772},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1541480413772},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1541480413772},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1541480413772},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1541480413772},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1932961f38f75aae4f2e539d0ca7d665bb5bb309","modified":1541490522490},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1541669524126},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1541480413773},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1541480413773},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1541480413773},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1541480413773},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1541480413773},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1541480413773},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1541480413773},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1541480413774},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1541480413774},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1541480413774},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1541480413774},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1541480413774},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1541480413774},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1541480413774},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1541480413775},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1541480413775},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1541480413775},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1541480413775},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1541480413775},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1541480413775},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1541480413775},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1541480413775},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1541480413776},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1541480413779},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541480413779},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541480413779},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541480413780},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541480413780},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541480413780},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541480413780},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541480413780},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541480413780},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541480413780},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541480413780},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541480413780},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541480413780},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541480413780},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541480413780},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541480413780},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541480413780},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541480413780},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541480413780},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413773},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413773},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413778},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413778},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413778},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413779},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541480413779},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1541480413766},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1541480413773},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1541480413773},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1541480413773},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1541480413773},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1541480413773},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1541480413773},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1541480413773},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1541480413773},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1541480413773},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1541480413773},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1541480413773},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1541480413773},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1541480413774},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1541480413774},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1541480413774},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1541480413774},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1541480413774},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1541480413774},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1541480413775},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1541480413778},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1541480413778},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1541480413778},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1541480413778},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1541480413779},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1541480413779},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1541480413779},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1541480413779},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541480413780},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541480413780},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1541480413780},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541480413780},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541480413781},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541480413781},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1541480413781},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1541480413781},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541480413781},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541480413781},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1541480413781},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541480413783},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541480413785},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1541480413785},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1541480413785},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1541480413785},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1541480413787},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1541480413787},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1541480413787},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1541480413787},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1541480413796},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1541480413797},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1541480413797},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1541480413797},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1541480413797},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541480413797},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541480413797},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1541480413797},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1541480413798},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541480413798},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541480413798},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541480413798},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541480413799},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541480413799},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1541480413802},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1541480413802},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541480413804},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541480413804},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541480413804},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541480413797},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0b1f9989335bee327596412c1a4d8a6f9cd06e88","modified":1541480413766},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1541480413765},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1541480413774},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1541480413774},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1541480413777},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1541480413778},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1541480413779},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1541480413781},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1541480413782},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1541480413782},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541480413783},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541480413785},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541480413785},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541480413786},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541480413787},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541480413787},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541480413788},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541480413802},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541480413802},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541480413782},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541480413796},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541480413796},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541480413803},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0b1f9989335bee327596412c1a4d8a6f9cd06e88","modified":1541480413765},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"9e92b76803774ee8097222dddad6300506a6de01","modified":1541669708164},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1541480413776},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1541480413777},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1541480413778},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1541480413778},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541480413779},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541480413779},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541480413781},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541480413781},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541480413781},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541480413782},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1541480413782},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541480413786},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541480413786},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541480413789},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541480413791},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541480413796},{"_id":"themes/next/.git/objects/pack/pack-a5ad968d9d5c81ccefac492dcb3fd1806591e448.idx","hash":"d6a2110b875aef3964200f9538ac55c1469c1b6a","modified":1541480413585},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541480413785},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541480413802},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1541480413794},{"_id":"themes/next/.git/objects/pack/pack-a5ad968d9d5c81ccefac492dcb3fd1806591e448.pack","hash":"d877849bbc76bd630bb415bf93c93b6759f13878","modified":1541480413579},{"_id":"source/_posts/设计模式一：单例模式.md","hash":"9f3809c04a74ffb1290b0594e112ab9944101889","modified":1545615283490},{"_id":"public/content.json","hash":"20fc71138353aeb796c242967cded5c2eae477e0","modified":1558849720770},{"_id":"public/archives/2018/11/index.html","hash":"0d2c07cfafafdf7387b7757a43aabc907d1547a7","modified":1558849723090},{"_id":"public/archives/2018/12/index.html","hash":"91a5203162d7049c59406145771333b5ddfb6adb","modified":1558849723085},{"_id":"public/categories/DevOps/index.html","hash":"339f4c089619292c8dd77a387ca488b345c353b2","modified":1558849723085},{"_id":"public/categories/设计模式/index.html","hash":"e7c0c886861b12a2d21f29002430434b35ee5530","modified":1558849723085},{"_id":"public/tags/Jenkins/index.html","hash":"40c0a9e5c8cbf0b019991998233b1a140e1e9cf9","modified":1558849723085},{"_id":"public/tags/Maven/index.html","hash":"d40970fe50ea48fb5b31bd1d188749937a0f57c4","modified":1558849723085},{"_id":"public/tags/Java/index.html","hash":"5cb756c0cdf52251291f6fa0d70dc701840c99f3","modified":1558849723085},{"_id":"public/tags/设计模式/index.html","hash":"0822c09c9f1904a9f32c0ba3348a0f4153984ab9","modified":1558849723085},{"_id":"public/2018/12/24/设计模式一：单例模式/index.html","hash":"c2a301bb48da3bb762397ccf1be3821bae7ae99b","modified":1558849722827},{"_id":"public/2018/12/11/如何使用Defender优雅的管理权限？/index.html","hash":"250e38bf3ae062e27b8fdcae417e5e3fdae4cfe4","modified":1558849722827},{"_id":"public/2018/11/06/Linux平台Nginx的安装及使用/index.html","hash":"e15d9019e8613efa699b11d4c30d2a30a4e3c023","modified":1558849722881},{"_id":"public/2018/11/06/深入浅说服务如何以Jar包的方式发布/index.html","hash":"d77519881c1d18327a99a3b99773b1ef252640d9","modified":1558849722886},{"_id":"public/2018/11/06/Jenkins安装及自动部署Maven项目/index.html","hash":"98c2281ff4b6dbad414b3b36f382ea994432094f","modified":1558849723086},{"_id":"public/2018/11/06/Spring-Cloud-Config-入门/index.html","hash":"2a80c181c782b987e3461273b4ebdcd99fcc5ca0","modified":1558849723090},{"_id":"public/2018/11/06/Spring-Cloud-Eureka-使用Nginx做路由网关/index.html","hash":"3b87317d9dda5995ebd4b491a6b7d3d4e651e583","modified":1558849723086},{"_id":"public/2018/11/06/Spring-Cloud-Gateway深入探究/index.html","hash":"93eb772a3cedd253a47673caba06678bbf3c2ee2","modified":1558849723086},{"_id":"public/2018/11/06/hello-world/index.html","hash":"a6ada640ffcf9290206842623f569ed2440d40a1","modified":1558849723090},{"_id":"public/2018/11/06/测试，hexo/index.html","hash":"897428c045a9e7abc0e63e72ad02c1400042fd00","modified":1558849723086},{"_id":"public/archives/index.html","hash":"c4a80329da232b02f85e8080fac250aee5ed9afa","modified":1558849723090},{"_id":"public/archives/2018/index.html","hash":"a197894cf80ef1864f0c7828c1175b20c68a6b9d","modified":1558849723090},{"_id":"public/index.html","hash":"8f3b29aafb53b8794ff8517d38da84ca439d162d","modified":1558849723090},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545709713534},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545709713534},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545709713534},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545709713534},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545709713534},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545709713534},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545709713534},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545709713534},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545709713534},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545709713534},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545709713534},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545709713534},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545709713534},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1545709713534},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545709713534},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545709713534},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545709713534},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545709713535},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545709713535},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545709713535},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545709713535},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545709713535},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545709713535},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545709713535},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545709713535},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545709713535},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545709713535},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545709713535},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545709713535},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545709713535},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545709713535},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545709713535},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545709713535},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545709714860},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545709714924},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545709714998},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545709714999},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545709715007},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545709715008},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545709715008},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545709715008},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1545709715009},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545709715009},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545709715009},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545709715009},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545709715009},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545709715009},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545709715009},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545709715009},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1545709715009},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1545709715009},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1545709715009},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545709715009},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545709715009},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545709715009},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545709715009},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545709715009},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545709715010},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545709715011},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545709715011},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545709715011},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545709715011},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545709715011},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545709715011},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1545709715011},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545709715011},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545709715011},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545709715011},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545709715011},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545709715011},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545709715011},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545709715011},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545709715011},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545709715011},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545709715011},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545709715011},{"_id":"public/lib/fastclick/README.html","hash":"4fb571cb850702cf0da0d90e2607956f79651383","modified":1545709715011},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"6baf06336ddc845bc8cf0e0a41e6cd5af452bb64","modified":1545709715011},{"_id":"public/lib/jquery_lazyload/README.html","hash":"fbf9ec2f6614d72d86ba59bbc41a24f5b7b110dc","modified":1545709715011},{"_id":"public/css/main.css","hash":"9984b75603b4e01421cce4194aecdecdcb809e80","modified":1545709715011},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545709715012},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545709715012},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545709715012},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545709715012},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545709715012},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545709715012},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545709715012},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545709715012},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545709715012},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545709715012},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545709715012},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545709715012},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545709715012},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545709715012},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545709715013},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545709715018},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545709715019},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545709715019},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545709715019},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545709715019},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545709715019},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545709715020},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545709715020},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545709715082},{"_id":"source/_posts/深入JAVA8的HashMap实现原理.md","hash":"11df54e0c75c88dfb5905aa34f811a56d7dce122","modified":1545738167746},{"_id":"public/2018/12/25/深入JAVA8的HashMap实现原理/index.html","hash":"7680c301c373a7ee80f2534597b2f56941a3e1d7","modified":1558849723090},{"_id":"public/archives/page/2/index.html","hash":"5436b19d0111f4d0408acd4c175272451b4de71c","modified":1558849723083},{"_id":"public/archives/2018/page/2/index.html","hash":"66845c5d4be2d13aa82b5c32c421e94119242b79","modified":1558849723083},{"_id":"public/categories/数据结构/index.html","hash":"dec0992de79ad1e2304026714bc079c7970bc8bd","modified":1558849723085},{"_id":"public/page/2/index.html","hash":"5555eec40731beb17d926465ebe9c7340af99a6d","modified":1558849723090},{"_id":"source/_drafts/如何设计并实现一个db连接池？.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558849541165},{"_id":"source/_posts/如何设计并实现一个db连接池？.md","hash":"77b73dafc933efd5019c3606d70af8262e00fcad","modified":1558849435249},{"_id":"public/2019/05/26/如何设计并实现一个db连接池？/index.html","hash":"32a3a044bdbcd173c489cf220024eaab0ac6c0fe","modified":1558849723086},{"_id":"public/archives/2019/index.html","hash":"c60375ce1621ae7f89d38a91e198caeadab44c48","modified":1558849723092},{"_id":"public/archives/2019/05/index.html","hash":"fcd5610e1147dd604fcf3c11fd499478e248ff8c","modified":1558849723092},{"_id":"public/tags/连接池/index.html","hash":"f9d70bef4256da2ad091bccf8ed9c91700b1b561","modified":1558849723093}],"Category":[{"name":"DevOps","_id":"cjq1n0kzm00099ctpu54r2sh5"},{"name":"设计模式","_id":"cjq37ngvb00010gtphyjfvl1q"},{"name":"数据结构","_id":"cjt3yd1py0001e3tpcosgdt51"}],"Data":[],"Page":[],"Post":[{"title":"Jenkins安装及自动部署Maven项目","author":"Nico","date":"2018-11-06T04:47:00.000Z","_content":"## 一、环境配置\n#### OS版本\n\n```\n[root@VM_0_11_centos /]# rpm -qa | grep centos-release\ncentos-release-7-4.1708.el7.centos.x86_64\n```\n#### Java版本\n```\n[root@VM_0_11_centos /]# java -version\nopenjdk version \"1.8.0_181\"\nOpenJDK Runtime Environment (build 1.8.0_181-b13)\nOpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)\n```\n#### Maven版本\n```\n[root@VM_0_11_centos /]# mvn -v\nApache Maven 3.0.5 (Red Hat 3.0.5-17)\nMaven home: /usr/share/maven\nJava version: 1.8.0_181, vendor: Oracle Corporation\nJava home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-693.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n#### Git版本\n```\n[root@VM_0_11_centos /]# git --version\ngit version 1.8.3.1\n```\n## 二、安装\n\n#### Java安装\n```\nyum install java-1.8.0-openjdk.x86_64\n```\n#### Maven安装\n```\nyum install maven\n```\n#### Git安装\n```\nyum install git\n```\n#### Jenkins安装\n\nrpm包地址：[https://pkg.jenkins.io/redhat-stable/](https://pkg.jenkins.io/redhat-stable/)\n```\nrpm -ivh xxx.npm\n```\n执行以上指令后即安装完毕，查看一下jenkins所在目录\n```\nwhereis jenkins\n```\n控制台输出\n```\n[root@VM_0_11_centos /]# whereis jenkins\njenkins: /usr/lib/jenkins\n```\n默认jenkins的配置文件在``/etc/sysconfig/jenkins``\n\n启动jenkins\n```\nservice jenkins start\n```\n关闭jenkins\n```\nservice jenkins stop\n```\n## 三、Jenkins部署Maven项目\nJenkins启动只有的默认端口为8080，在保证服务器安全组开放8080端口（或者自己在``/etc/sysconfig/jenkins``配置文件中修改端口）的前提下，我们可以直接通过浏览器访问Jenkins\n```\nhttp://xxxxxx:8080\n```\n第一次进入Jenkins会让你走几个步骤\n - 输入管理员密码，密码可以从页面提示的文件中看到\n - 下载默认插件，点击官方推荐的按钮继续往下走\n - 设置账号密码和邮箱地址\n - 登入\n\n一顿操作，我们就来到了Jenkins的Dashboard页面\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6974344c0?w=1897&h=598&f=png&s=72196)\n\n看到这里是不是很激动？别急，Jenkins的新建任务默认是没有Maven选项的,需要自行安装Jenkins的Maven插件！\n\n#### 1、安装Jenkins-Maven插件Maven Integration\n在首页中点击右侧的系统管理\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6976b76bd?w=1885&h=613&f=png&s=75878)\n选择管理插件\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b697a978f8?w=1892&h=862&f=png&s=133614)\n下载Maven Integration\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6979cd7a5?w=1892&h=651&f=png&s=67831)\n点击立即获取之后，等待一分钟左右就下载好了\n\n#### 2、配置全局工具\n接着我们要做一些工具的配置\n\n再次进入系统管理，点击列表中的**全局工具配置**\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b69783f279?w=1889&h=827&f=png&s=128413)\n配置JDK\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b697743f0a?w=1529&h=362&f=png&s=20752)\n配置Git\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c277f7c6?w=1523&h=320&f=png&s=17690)\n配置Maven\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c740707d?w=1507&h=331&f=png&s=19931)\n完毕之后点击``SAVE``按钮保存\n#### 3、配置任务信息\n经过前面两个步骤，我们的Jenkins可以正式开始工作了，不过在真正为我们提供服务之前，我们需要告诉任务该做什么事情，该怎么做。\n\n例如？我们要构建的项目从何而来？通过什么样的方式或者指令就构建？不废话，开始创建一个新的任务，并且是一个Maven项目\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c7c0c77f?w=1901&h=614&f=png&s=60467)\n点击创建一个新任务进入下一步\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6ca5adfa0?w=1852&h=933&f=png&s=132108)\n选择创建一个Maven项目，确定之后，进入任务配置界面\n\n任务信息配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d06d8e2b?w=1882&h=462&f=png&s=42624)\n源码库配置，Jenkins要知道如何获取到项目的源码\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d2fca2f2?w=1887&h=657&f=png&s=63920)\nMaven打包指令配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6e4036b64?w=1886&h=425&f=png&s=37257)\n构建策略配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6eb145739?w=1879&h=374&f=png&s=43226)\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f1a7a410?w=1889&h=327&f=png&s=33364)\n构建生命周期配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f5b10abc?w=1884&h=726&f=png&s=76468)\n这一步很关键，在Jenkins帮我们自动拉取代码并且打成jar包之后，我们需要执行shell指令去启动它们，``Pre Steps``和``Post Steps``使我们可以在整个周期内灵活的去控制流程~例如写个脚本启动它们！\n\n简单配置之后，点击保存，完成任务配置编辑！\n\n之后的事情就简单了，在首页可以看到一个任务列表，选中自己的任务点击进入\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fa1e7b0f?w=1890&h=567&f=png&s=67414)\n点击左侧工具栏的立即构建~ \n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fc49a77e?w=1891&h=879&f=png&s=108676)\nJenkins简单部署完成，看下我的任务构建控制台输出日志\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b7806857f7?w=1883&h=907&f=png&s=90364)\n\n看到最下方的成功就代表项目已经成功部署！","source":"_posts/Jenkins安装及自动部署Maven项目.md","raw":"title: Jenkins安装及自动部署Maven项目\nauthor: Nico\ntags:\n  - Jenkins\n  - Maven\ncategories: []\ndate: 2018-11-06 12:47:00\n---\n## 一、环境配置\n#### OS版本\n\n```\n[root@VM_0_11_centos /]# rpm -qa | grep centos-release\ncentos-release-7-4.1708.el7.centos.x86_64\n```\n#### Java版本\n```\n[root@VM_0_11_centos /]# java -version\nopenjdk version \"1.8.0_181\"\nOpenJDK Runtime Environment (build 1.8.0_181-b13)\nOpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)\n```\n#### Maven版本\n```\n[root@VM_0_11_centos /]# mvn -v\nApache Maven 3.0.5 (Red Hat 3.0.5-17)\nMaven home: /usr/share/maven\nJava version: 1.8.0_181, vendor: Oracle Corporation\nJava home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-693.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n#### Git版本\n```\n[root@VM_0_11_centos /]# git --version\ngit version 1.8.3.1\n```\n## 二、安装\n\n#### Java安装\n```\nyum install java-1.8.0-openjdk.x86_64\n```\n#### Maven安装\n```\nyum install maven\n```\n#### Git安装\n```\nyum install git\n```\n#### Jenkins安装\n\nrpm包地址：[https://pkg.jenkins.io/redhat-stable/](https://pkg.jenkins.io/redhat-stable/)\n```\nrpm -ivh xxx.npm\n```\n执行以上指令后即安装完毕，查看一下jenkins所在目录\n```\nwhereis jenkins\n```\n控制台输出\n```\n[root@VM_0_11_centos /]# whereis jenkins\njenkins: /usr/lib/jenkins\n```\n默认jenkins的配置文件在``/etc/sysconfig/jenkins``\n\n启动jenkins\n```\nservice jenkins start\n```\n关闭jenkins\n```\nservice jenkins stop\n```\n## 三、Jenkins部署Maven项目\nJenkins启动只有的默认端口为8080，在保证服务器安全组开放8080端口（或者自己在``/etc/sysconfig/jenkins``配置文件中修改端口）的前提下，我们可以直接通过浏览器访问Jenkins\n```\nhttp://xxxxxx:8080\n```\n第一次进入Jenkins会让你走几个步骤\n - 输入管理员密码，密码可以从页面提示的文件中看到\n - 下载默认插件，点击官方推荐的按钮继续往下走\n - 设置账号密码和邮箱地址\n - 登入\n\n一顿操作，我们就来到了Jenkins的Dashboard页面\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6974344c0?w=1897&h=598&f=png&s=72196)\n\n看到这里是不是很激动？别急，Jenkins的新建任务默认是没有Maven选项的,需要自行安装Jenkins的Maven插件！\n\n#### 1、安装Jenkins-Maven插件Maven Integration\n在首页中点击右侧的系统管理\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6976b76bd?w=1885&h=613&f=png&s=75878)\n选择管理插件\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b697a978f8?w=1892&h=862&f=png&s=133614)\n下载Maven Integration\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6979cd7a5?w=1892&h=651&f=png&s=67831)\n点击立即获取之后，等待一分钟左右就下载好了\n\n#### 2、配置全局工具\n接着我们要做一些工具的配置\n\n再次进入系统管理，点击列表中的**全局工具配置**\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b69783f279?w=1889&h=827&f=png&s=128413)\n配置JDK\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b697743f0a?w=1529&h=362&f=png&s=20752)\n配置Git\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c277f7c6?w=1523&h=320&f=png&s=17690)\n配置Maven\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c740707d?w=1507&h=331&f=png&s=19931)\n完毕之后点击``SAVE``按钮保存\n#### 3、配置任务信息\n经过前面两个步骤，我们的Jenkins可以正式开始工作了，不过在真正为我们提供服务之前，我们需要告诉任务该做什么事情，该怎么做。\n\n例如？我们要构建的项目从何而来？通过什么样的方式或者指令就构建？不废话，开始创建一个新的任务，并且是一个Maven项目\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c7c0c77f?w=1901&h=614&f=png&s=60467)\n点击创建一个新任务进入下一步\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6ca5adfa0?w=1852&h=933&f=png&s=132108)\n选择创建一个Maven项目，确定之后，进入任务配置界面\n\n任务信息配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d06d8e2b?w=1882&h=462&f=png&s=42624)\n源码库配置，Jenkins要知道如何获取到项目的源码\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d2fca2f2?w=1887&h=657&f=png&s=63920)\nMaven打包指令配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6e4036b64?w=1886&h=425&f=png&s=37257)\n构建策略配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6eb145739?w=1879&h=374&f=png&s=43226)\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f1a7a410?w=1889&h=327&f=png&s=33364)\n构建生命周期配置\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f5b10abc?w=1884&h=726&f=png&s=76468)\n这一步很关键，在Jenkins帮我们自动拉取代码并且打成jar包之后，我们需要执行shell指令去启动它们，``Pre Steps``和``Post Steps``使我们可以在整个周期内灵活的去控制流程~例如写个脚本启动它们！\n\n简单配置之后，点击保存，完成任务配置编辑！\n\n之后的事情就简单了，在首页可以看到一个任务列表，选中自己的任务点击进入\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fa1e7b0f?w=1890&h=567&f=png&s=67414)\n点击左侧工具栏的立即构建~ \n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fc49a77e?w=1891&h=879&f=png&s=108676)\nJenkins简单部署完成，看下我的任务构建控制台输出日志\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e77b7806857f7?w=1883&h=907&f=png&s=90364)\n\n看到最下方的成功就代表项目已经成功部署！","slug":"Jenkins安装及自动部署Maven项目","published":1,"updated":"2018-11-06T05:33:05.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kyi00009ctpllsam1k0","content":"<h2 id=\"一-环境配置\"><a class=\"header-anchor\" href=\"#一-环境配置\">¶</a>一、环境配置</h2>\n<h4 id=\"os版本\"><a class=\"header-anchor\" href=\"#os版本\">¶</a>OS版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# rpm -qa | grep centos-release</span><br><span class=\"line\">centos-release-7-4.1708.el7.centos.x86_64</span><br></pre></td></tr></table></figure>\n<h4 id=\"java版本\"><a class=\"header-anchor\" href=\"#java版本\">¶</a>Java版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_181&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_181-b13)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<h4 id=\"maven版本\"><a class=\"header-anchor\" href=\"#maven版本\">¶</a>Maven版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# mvn -v</span><br><span class=\"line\">Apache Maven 3.0.5 (Red Hat 3.0.5-17)</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 1.8.0_181, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-693.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"git版本\"><a class=\"header-anchor\" href=\"#git版本\">¶</a>Git版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# git --version</span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-安装\"><a class=\"header-anchor\" href=\"#二-安装\">¶</a>二、安装</h2>\n<h4 id=\"java安装\"><a class=\"header-anchor\" href=\"#java安装\">¶</a>Java安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>\n<h4 id=\"maven安装\"><a class=\"header-anchor\" href=\"#maven安装\">¶</a>Maven安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install maven</span><br></pre></td></tr></table></figure>\n<h4 id=\"git安装\"><a class=\"header-anchor\" href=\"#git安装\">¶</a>Git安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins安装\"><a class=\"header-anchor\" href=\"#jenkins安装\">¶</a>Jenkins安装</h4>\n<p>rpm包地址：<a href=\"https://pkg.jenkins.io/redhat-stable/\" target=\"_blank\" rel=\"noopener\">https://pkg.jenkins.io/redhat-stable/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh xxx.npm</span><br></pre></td></tr></table></figure>\n<p>执行以上指令后即安装完毕，查看一下jenkins所在目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis jenkins</span><br></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# whereis jenkins</span><br><span class=\"line\">jenkins: /usr/lib/jenkins</span><br></pre></td></tr></table></figure>\n<p>默认jenkins的配置文件在<code>/etc/sysconfig/jenkins</code></p>\n<p>启动jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>关闭jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-jenkins部署maven项目\"><a class=\"header-anchor\" href=\"#三-jenkins部署maven项目\">¶</a>三、Jenkins部署Maven项目</h2>\n<p>Jenkins启动只有的默认端口为8080，在保证服务器安全组开放8080端口（或者自己在<code>/etc/sysconfig/jenkins</code>配置文件中修改端口）的前提下，我们可以直接通过浏览器访问Jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://xxxxxx:8080</span><br></pre></td></tr></table></figure>\n<p>第一次进入Jenkins会让你走几个步骤</p>\n<ul>\n<li>输入管理员密码，密码可以从页面提示的文件中看到</li>\n<li>下载默认插件，点击官方推荐的按钮继续往下走</li>\n<li>设置账号密码和邮箱地址</li>\n<li>登入</li>\n</ul>\n<p>一顿操作，我们就来到了Jenkins的Dashboard页面<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6974344c0?w=1897&amp;h=598&amp;f=png&amp;s=72196\" alt=\"这里写图片描述\"></p>\n<p>看到这里是不是很激动？别急，Jenkins的新建任务默认是没有Maven选项的,需要自行安装Jenkins的Maven插件！</p>\n<h4 id=\"1-安装jenkins-maven插件maven-integration\"><a class=\"header-anchor\" href=\"#1-安装jenkins-maven插件maven-integration\">¶</a>1、安装Jenkins-Maven插件Maven Integration</h4>\n<p>在首页中点击右侧的系统管理<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6976b76bd?w=1885&amp;h=613&amp;f=png&amp;s=75878\" alt=\"这里写图片描述\"><br>\n选择管理插件<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b697a978f8?w=1892&amp;h=862&amp;f=png&amp;s=133614\" alt=\"这里写图片描述\"><br>\n下载Maven Integration<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6979cd7a5?w=1892&amp;h=651&amp;f=png&amp;s=67831\" alt=\"这里写图片描述\"><br>\n点击立即获取之后，等待一分钟左右就下载好了</p>\n<h4 id=\"2-配置全局工具\"><a class=\"header-anchor\" href=\"#2-配置全局工具\">¶</a>2、配置全局工具</h4>\n<p>接着我们要做一些工具的配置</p>\n<p>再次进入系统管理，点击列表中的<strong>全局工具配置</strong><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b69783f279?w=1889&amp;h=827&amp;f=png&amp;s=128413\" alt=\"这里写图片描述\"><br>\n配置JDK<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b697743f0a?w=1529&amp;h=362&amp;f=png&amp;s=20752\" alt=\"这里写图片描述\"><br>\n配置Git<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c277f7c6?w=1523&amp;h=320&amp;f=png&amp;s=17690\" alt=\"这里写图片描述\"><br>\n配置Maven<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c740707d?w=1507&amp;h=331&amp;f=png&amp;s=19931\" alt=\"这里写图片描述\"><br>\n完毕之后点击<code>SAVE</code>按钮保存</p>\n<h4 id=\"3-配置任务信息\"><a class=\"header-anchor\" href=\"#3-配置任务信息\">¶</a>3、配置任务信息</h4>\n<p>经过前面两个步骤，我们的Jenkins可以正式开始工作了，不过在真正为我们提供服务之前，我们需要告诉任务该做什么事情，该怎么做。</p>\n<p>例如？我们要构建的项目从何而来？通过什么样的方式或者指令就构建？不废话，开始创建一个新的任务，并且是一个Maven项目<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c7c0c77f?w=1901&amp;h=614&amp;f=png&amp;s=60467\" alt=\"这里写图片描述\"><br>\n点击创建一个新任务进入下一步<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6ca5adfa0?w=1852&amp;h=933&amp;f=png&amp;s=132108\" alt=\"这里写图片描述\"><br>\n选择创建一个Maven项目，确定之后，进入任务配置界面</p>\n<p>任务信息配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d06d8e2b?w=1882&amp;h=462&amp;f=png&amp;s=42624\" alt=\"这里写图片描述\"><br>\n源码库配置，Jenkins要知道如何获取到项目的源码<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d2fca2f2?w=1887&amp;h=657&amp;f=png&amp;s=63920\" alt=\"这里写图片描述\"><br>\nMaven打包指令配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6e4036b64?w=1886&amp;h=425&amp;f=png&amp;s=37257\" alt=\"这里写图片描述\"><br>\n构建策略配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6eb145739?w=1879&amp;h=374&amp;f=png&amp;s=43226\" alt=\"这里写图片描述\"><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f1a7a410?w=1889&amp;h=327&amp;f=png&amp;s=33364\" alt=\"这里写图片描述\"><br>\n构建生命周期配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f5b10abc?w=1884&amp;h=726&amp;f=png&amp;s=76468\" alt=\"这里写图片描述\"><br>\n这一步很关键，在Jenkins帮我们自动拉取代码并且打成jar包之后，我们需要执行shell指令去启动它们，<code>Pre Steps</code>和<code>Post Steps</code>使我们可以在整个周期内灵活的去控制流程~例如写个脚本启动它们！</p>\n<p>简单配置之后，点击保存，完成任务配置编辑！</p>\n<p>之后的事情就简单了，在首页可以看到一个任务列表，选中自己的任务点击进入<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fa1e7b0f?w=1890&amp;h=567&amp;f=png&amp;s=67414\" alt=\"这里写图片描述\"><br>\n点击左侧工具栏的立即构建~<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fc49a77e?w=1891&amp;h=879&amp;f=png&amp;s=108676\" alt=\"这里写图片描述\"><br>\nJenkins简单部署完成，看下我的任务构建控制台输出日志<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b7806857f7?w=1883&amp;h=907&amp;f=png&amp;s=90364\" alt=\"这里写图片描述\"></p>\n<p>看到最下方的成功就代表项目已经成功部署！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-环境配置\"><a class=\"header-anchor\" href=\"#一-环境配置\">¶</a>一、环境配置</h2>\n<h4 id=\"os版本\"><a class=\"header-anchor\" href=\"#os版本\">¶</a>OS版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# rpm -qa | grep centos-release</span><br><span class=\"line\">centos-release-7-4.1708.el7.centos.x86_64</span><br></pre></td></tr></table></figure>\n<h4 id=\"java版本\"><a class=\"header-anchor\" href=\"#java版本\">¶</a>Java版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_181&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_181-b13)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<h4 id=\"maven版本\"><a class=\"header-anchor\" href=\"#maven版本\">¶</a>Maven版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# mvn -v</span><br><span class=\"line\">Apache Maven 3.0.5 (Red Hat 3.0.5-17)</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 1.8.0_181, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-693.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"git版本\"><a class=\"header-anchor\" href=\"#git版本\">¶</a>Git版本</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# git --version</span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-安装\"><a class=\"header-anchor\" href=\"#二-安装\">¶</a>二、安装</h2>\n<h4 id=\"java安装\"><a class=\"header-anchor\" href=\"#java安装\">¶</a>Java安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>\n<h4 id=\"maven安装\"><a class=\"header-anchor\" href=\"#maven安装\">¶</a>Maven安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install maven</span><br></pre></td></tr></table></figure>\n<h4 id=\"git安装\"><a class=\"header-anchor\" href=\"#git安装\">¶</a>Git安装</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins安装\"><a class=\"header-anchor\" href=\"#jenkins安装\">¶</a>Jenkins安装</h4>\n<p>rpm包地址：<a href=\"https://pkg.jenkins.io/redhat-stable/\" target=\"_blank\" rel=\"noopener\">https://pkg.jenkins.io/redhat-stable/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh xxx.npm</span><br></pre></td></tr></table></figure>\n<p>执行以上指令后即安装完毕，查看一下jenkins所在目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis jenkins</span><br></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_11_centos /]# whereis jenkins</span><br><span class=\"line\">jenkins: /usr/lib/jenkins</span><br></pre></td></tr></table></figure>\n<p>默认jenkins的配置文件在<code>/etc/sysconfig/jenkins</code></p>\n<p>启动jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>关闭jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-jenkins部署maven项目\"><a class=\"header-anchor\" href=\"#三-jenkins部署maven项目\">¶</a>三、Jenkins部署Maven项目</h2>\n<p>Jenkins启动只有的默认端口为8080，在保证服务器安全组开放8080端口（或者自己在<code>/etc/sysconfig/jenkins</code>配置文件中修改端口）的前提下，我们可以直接通过浏览器访问Jenkins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://xxxxxx:8080</span><br></pre></td></tr></table></figure>\n<p>第一次进入Jenkins会让你走几个步骤</p>\n<ul>\n<li>输入管理员密码，密码可以从页面提示的文件中看到</li>\n<li>下载默认插件，点击官方推荐的按钮继续往下走</li>\n<li>设置账号密码和邮箱地址</li>\n<li>登入</li>\n</ul>\n<p>一顿操作，我们就来到了Jenkins的Dashboard页面<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6974344c0?w=1897&amp;h=598&amp;f=png&amp;s=72196\" alt=\"这里写图片描述\"></p>\n<p>看到这里是不是很激动？别急，Jenkins的新建任务默认是没有Maven选项的,需要自行安装Jenkins的Maven插件！</p>\n<h4 id=\"1-安装jenkins-maven插件maven-integration\"><a class=\"header-anchor\" href=\"#1-安装jenkins-maven插件maven-integration\">¶</a>1、安装Jenkins-Maven插件Maven Integration</h4>\n<p>在首页中点击右侧的系统管理<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6976b76bd?w=1885&amp;h=613&amp;f=png&amp;s=75878\" alt=\"这里写图片描述\"><br>\n选择管理插件<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b697a978f8?w=1892&amp;h=862&amp;f=png&amp;s=133614\" alt=\"这里写图片描述\"><br>\n下载Maven Integration<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6979cd7a5?w=1892&amp;h=651&amp;f=png&amp;s=67831\" alt=\"这里写图片描述\"><br>\n点击立即获取之后，等待一分钟左右就下载好了</p>\n<h4 id=\"2-配置全局工具\"><a class=\"header-anchor\" href=\"#2-配置全局工具\">¶</a>2、配置全局工具</h4>\n<p>接着我们要做一些工具的配置</p>\n<p>再次进入系统管理，点击列表中的<strong>全局工具配置</strong><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b69783f279?w=1889&amp;h=827&amp;f=png&amp;s=128413\" alt=\"这里写图片描述\"><br>\n配置JDK<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b697743f0a?w=1529&amp;h=362&amp;f=png&amp;s=20752\" alt=\"这里写图片描述\"><br>\n配置Git<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c277f7c6?w=1523&amp;h=320&amp;f=png&amp;s=17690\" alt=\"这里写图片描述\"><br>\n配置Maven<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c740707d?w=1507&amp;h=331&amp;f=png&amp;s=19931\" alt=\"这里写图片描述\"><br>\n完毕之后点击<code>SAVE</code>按钮保存</p>\n<h4 id=\"3-配置任务信息\"><a class=\"header-anchor\" href=\"#3-配置任务信息\">¶</a>3、配置任务信息</h4>\n<p>经过前面两个步骤，我们的Jenkins可以正式开始工作了，不过在真正为我们提供服务之前，我们需要告诉任务该做什么事情，该怎么做。</p>\n<p>例如？我们要构建的项目从何而来？通过什么样的方式或者指令就构建？不废话，开始创建一个新的任务，并且是一个Maven项目<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6c7c0c77f?w=1901&amp;h=614&amp;f=png&amp;s=60467\" alt=\"这里写图片描述\"><br>\n点击创建一个新任务进入下一步<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6ca5adfa0?w=1852&amp;h=933&amp;f=png&amp;s=132108\" alt=\"这里写图片描述\"><br>\n选择创建一个Maven项目，确定之后，进入任务配置界面</p>\n<p>任务信息配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d06d8e2b?w=1882&amp;h=462&amp;f=png&amp;s=42624\" alt=\"这里写图片描述\"><br>\n源码库配置，Jenkins要知道如何获取到项目的源码<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6d2fca2f2?w=1887&amp;h=657&amp;f=png&amp;s=63920\" alt=\"这里写图片描述\"><br>\nMaven打包指令配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6e4036b64?w=1886&amp;h=425&amp;f=png&amp;s=37257\" alt=\"这里写图片描述\"><br>\n构建策略配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6eb145739?w=1879&amp;h=374&amp;f=png&amp;s=43226\" alt=\"这里写图片描述\"><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f1a7a410?w=1889&amp;h=327&amp;f=png&amp;s=33364\" alt=\"这里写图片描述\"><br>\n构建生命周期配置<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6f5b10abc?w=1884&amp;h=726&amp;f=png&amp;s=76468\" alt=\"这里写图片描述\"><br>\n这一步很关键，在Jenkins帮我们自动拉取代码并且打成jar包之后，我们需要执行shell指令去启动它们，<code>Pre Steps</code>和<code>Post Steps</code>使我们可以在整个周期内灵活的去控制流程~例如写个脚本启动它们！</p>\n<p>简单配置之后，点击保存，完成任务配置编辑！</p>\n<p>之后的事情就简单了，在首页可以看到一个任务列表，选中自己的任务点击进入<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fa1e7b0f?w=1890&amp;h=567&amp;f=png&amp;s=67414\" alt=\"这里写图片描述\"><br>\n点击左侧工具栏的立即构建~<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b6fc49a77e?w=1891&amp;h=879&amp;f=png&amp;s=108676\" alt=\"这里写图片描述\"><br>\nJenkins简单部署完成，看下我的任务构建控制台输出日志<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e77b7806857f7?w=1883&amp;h=907&amp;f=png&amp;s=90364\" alt=\"这里写图片描述\"></p>\n<p>看到最下方的成功就代表项目已经成功部署！</p>\n"},{"title":"Linux平台Nginx的安装及使用","author":"Nico","date":"2018-11-06T04:49:00.000Z","_content":"这几天因为需要部署静态资源服务器，所以就找了个vps部署一下Nginx，顺带将vsftpd配置好了，下面就给大家讲一下如何在CentOS上部署Nginx及vsftpd！\n\n如果大家不知道Nginx和vsftpd的用处，请自行百度，这里就不过多介绍，废话少说，进入正题。\n\n## 一、在CentOS上下载Nginx和vsftpd\n\n常用的Nginx下载方式有两种，一种是使用CentOS上自带的yum下载，第二种是从网上下载后在通过make进行编译安装，下面我将会向大家介绍一下这两种安装方式\n\n### 1、yum安装方式\n\n首先我们更新一下yum软件库\n\n```\nyum update\n\n```\n\n然后我们搜索一下yum库关于nginx的rpm包\n\n```\nyum list | grep nginx\n\n```\n\n可以看到下面的列表\n\n```\n[root@VM_239_130_centos html]# yum list | grep nginx\nnginx-filesystem.noarch                     1.10.2-1.el6                 @epel  \ncollectd-nginx.x86_64                       4.10.9-4.el6                 epel   \nmunin-nginx.noarch                          2.0.33-1.el6                 epel   \nnginx.x86_64                                1.10.2-1.el6                 epel   \nnginx-all-modules.noarch                    1.10.2-1.el6                 epel   \nnginx-mod-http-geoip.x86_64                 1.10.2-1.el6                 epel   \nnginx-mod-http-image-filter.x86_64          1.10.2-1.el6                 epel   \nnginx-mod-http-perl.x86_64                  1.10.2-1.el6                 epel   \nnginx-mod-http-xslt-filter.x86_64           1.10.2-1.el6                 epel   \nnginx-mod-mail.x86_64                       1.10.2-1.el6                 epel   \nnginx-mod-stream.x86_64                     1.10.2-1.el6                 epel   \npcp-pmda-nginx.x86_64                       3.10.9-9.el6                 os\n\n```\n\n接下来我们选择使用yum安装`nginx.x86_64 1.10.2-1.el6 epel`\n\n```\nyum install nginx\n\n```\n\n中间会提示我们一次是否确认安装\n\n```\n=======================================================================================================================\n Package                                   Arch                 Version                       Repository          Size\n=======================================================================================================================\nInstalling:\n nginx                                     x86_64               1.10.2-1.el6                  epel               462 k\nInstalling for dependencies:\n nginx-all-modules                         noarch               1.10.2-1.el6                  epel               7.7 k\n nginx-mod-http-geoip                      x86_64               1.10.2-1.el6                  epel                14 k\n nginx-mod-http-image-filter               x86_64               1.10.2-1.el6                  epel                16 k\n nginx-mod-http-perl                       x86_64               1.10.2-1.el6                  epel                26 k\n nginx-mod-http-xslt-filter                x86_64               1.10.2-1.el6                  epel                16 k\n nginx-mod-mail                            x86_64               1.10.2-1.el6                  epel                43 k\n nginx-mod-stream                          x86_64               1.10.2-1.el6                  epel                36 k\n\nTransaction Summary\n=======================================================================================================================\nInstall       8 Package(s)\n\nTotal download size: 620 k\nInstalled size: 1.6 M\nIs this ok [y/N]:\n\n```\n\n输入`y`继续\n\n```\nInstalled:\n  nginx.x86_64 0:1.10.2-1.el6                                                                                          \n\nDependency Installed:\n  nginx-all-modules.noarch 0:1.10.2-1.el6                       nginx-mod-http-geoip.x86_64 0:1.10.2-1.el6            \n  nginx-mod-http-image-filter.x86_64 0:1.10.2-1.el6             nginx-mod-http-perl.x86_64 0:1.10.2-1.el6             \n  nginx-mod-http-xslt-filter.x86_64 0:1.10.2-1.el6              nginx-mod-mail.x86_64 0:1.10.2-1.el6                  \n  nginx-mod-stream.x86_64 0:1.10.2-1.el6                       \n\nComplete!\n\n```\n\n安装完毕！！接下来我们来看一下nginx的文件分布\n\n```\nwhereis nginx\n\n```\n\n```\n[root@VM_239_130_centos html]# whereis nginx\nnginx: /usr/sbin/nginx /etc/nginx /usr/lib64/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz\n\n```\n\n其中三个文件（夹）比较重要：\n\n| 路径 | 作用 |\n| --- | --- |\n| /usr/sbin/nginx | nginx启动路径 |\n| /etc/nginx | 存放nginx的配置文件 |\n| /usr/share/nginx | 默认的nginx资源库 |\n\n我们首先进入`/etc/nginx/`中看一下nginx到底有哪些配置文件\n\n```\n[root@VM_239_130_centos html]# cd /etc/nginx\n[root@VM_239_130_centos nginx]# ls\nconf.d        fastcgi.conf.default    koi-utf     mime.types.default  scgi_params          uwsgi_params.default\ndefault.d     fastcgi_params          koi-win     nginx.conf          scgi_params.default  win-utf\nfastcgi.conf  fastcgi_params.default  mime.types  nginx.conf.default  uwsgi_params\n\n```\n\n哇，看到这么多配置文件是不是吓了一跳，其实我们只需要在意nginx.conf就行了，其他的涉及到了再百度，接下来我们进入nginx.conf(这里我们使用vim，系统没有vim的小伙伴可以使用`yum install vim`进行下载安装)\n\n```\nvim nginx.conf\n\n```\n\n```\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '  #日志格式\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;                                                  #操作成功记录日志\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n}\n\n```\n\n上面的配置不要动，我们跟踪到这一行`include /etc/nginx/conf.d/*.conf`主要作用就是加载更多的配置文件，我们退出vim编辑`ESC+:q`进入到conf.d文件夹来看一下\n\n```\n[root@VM_239_130_centos nginx]# cd /etc/nginx/conf.d\n[root@VM_239_130_centos conf.d]# ls\ndefault.conf  default.conf.rpmsave  ssl.conf  virtual.conf\n\n```\n\n然后进入default.conf\n\n```\nvim default.conf\n\n```\n\n```\n#\n# The default server\n#\n\nserver {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n}\n\n```\n\n我们发现这个文件配置的是server{}，server的配置就是我们nginx的核心配置，这里先不过多的讲，下面会详细介绍server的配置，但是此时如果我们运行nginx的话将会报错\n\n```\n Address family not supported by protocol\n\n```\n\n我们需要将上面的\n\n```\n listen       [::]:80 default_server;\n\n```\n\n注释掉\n\n```\n   # listen       [::]:80 default_server;\n\n```\n\n退出vim编辑，使用`/usr/sbin/nginx`启动nginx\n\n```\n[root@VM_239_130_centos conf.d]# /usr/sbin/nginx\n\n```\n\n关闭nginx\n\n```\npkill -9 nginx\n\n```\n\n### 2、编译安装\n\n这里借鉴了腾讯云论坛上的一个帖子： [CentOS 7中Nginx1.9.5编译安装教程systemctl启动](http://bbs.qcloud.com/thread-10429-1-1.html)\n\n<font color=\"#555555\">先安装gcc 等</font>\n\n```\nyum -y install gcc gcc-c++ wget\n\n```\n\n<font>.然后装一些库</font>\n\n```\nyum -y install gcc wget automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\n\n```\n\n<font color=\"#555555\">进入默认的软件目录</font>\n\n```\ncd /usr/local/src/\n\n```\n\n<font color=\"#555555\">下载 nginx软件</font>\n\n```\nwget http://nginx.org/download/nginx-1.9.5.tar.gz\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">如果这个下载太慢可以在这里下载</span><font>[http://nginx.org/download/nginx-1.9.5.tar.gz](http://nginx.org/download/nginx-1.9.5.tar.gz) 下载完后yum -y intall lrzsz 装好上传工具</font>\n\n<font>然后用rz上传到服务器</font> <font color=\"#555555\">然后解压文件.</font>\n\n```\ntar zxvf nginx-1.9.5.tar.gz\n\n```\n\n<font color=\"#555555\">进入 nginx1.9.5的源码 如果想改版本号 可以进入源码目录</font><font color=\"#555555\">src/core/nginx.h</font><font color=\"#555555\">更改</font>\n\n```\ncd nginx-1.9.5/\n\n```\n\n<font color=\"#555555\">创建一个nginx目录用来存放运行的临时文件夹</font>\n\n```\nmkdir -p /var/cache/nginx\n\n```\n\n<font color=\"#555555\">开始configure</font>\n\n```\n./configure \\\n--prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nobody \\\n--group=nobody \\\n--with-pcre \\\n--with-http_v2_module \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-ipv6 \\\n--with-http_v2_module \\\n--with-threads \\\n--with-stream \\\n--with-stream_ssl_module\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">接着 编译</span>\n\n```\nmake\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">安装</span>\n\n```\nmake install\n\n```\n\n<font color=\"#555555\">启动nginx</font>\n\n```\n/usr/sbin/nginx\n\n```\n\n<font color=\"#555555\">用ps aux来查看nginx是否启动</font>\n\n```\nps aux|grep nginx\n\n```\n\n<span style=\"font-size: 12px;\">复制代码</span>\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">然后配置服务</span>\n\n```\nvim /usr/lib/systemd/system/nginx.service\n\n```\n\n<font color=\"#555555\">按i输入以下内容</font>\n\n```\n[Unit]\nDescription=nginx - high performance web server \nDocumentation=http://nginx.org/en/docs/\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf\nExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n<font color=\"#555555\">编辑好后保存</font><font color=\"#555555\">然后开启开机启动</font>\n\n```\nsystemctl enable nginx.service\n\n```\n\n<font color=\"#555555\">用命令关掉nginx</font>\n\n```\npkill -9 nginx\n\n```\n\n<font color=\"#555555\">后面可以用systemctl来操作nginx.service</font>\n\n```\nsystemctl start nginx.service\n\n```\n\n这里值得一提的是nginx编译安装后的文件夹和yum安装的文件夹类似，nginx.conf文件都在/etc/nginx下，不过编译安装后的nginx.conf文件内部配置与yum安装略有差异\n\n编译安装后的nginx.conf内部直接配置server，所以编译安装的小伙伴配置server就不用去改/etc/nginx/conf.d下的default.conf文件配置了，直接到nginx.conf文件中改server配置就行了\n\n## 二、Nginx配置详解\n\n1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。\n\n2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。\n\n3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\n\n4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。\n\n5、location块：配置请求的路由，以及各种页面的处理情况。\n\n我们来到yum安装后的`/etc/nginx/conf.d/default.conf`文件中\n\n```\nserver {\n    listen       80 default_server;\n   # listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n```\n\n在server块中\n\n| 名称 | 作用 |\n| --- | --- |\n| listen | nginx监听端口 |\n| root | nginx资源路径根目录 |\n| location | url访问的本地资源路径配置(支持通配符) |\n|  |\n| error_page | 跳转报错页面 |\n\n其中nginx会在资源目录中去找默认的index.html页面，我们进入/usr/share/nginx/html中看一下\n\n```\n[root@VM_239_130_centos conf.d]# cd /usr/share/nginx/html\n\n[root@VM_239_130_centos html]# ls\n\n404.html  50x.html  index.html  nginx-logo.png  poweredby.png\n\n```\n\n我们在这个文件夹中创建一个test.html\n\n```\n[root@VM_239_130_centos html]# touch test.html\n\n[root@VM_239_130_centos html]# ls\n\n404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png test.html  world\n\n```\n\nhtml页面内容\n\n```\n<html>\n        <head>\n                <title>test</title>\n        </head>\n        <body>  \n                <h1>hello world</h1>\n        </body>\n</html>\n\n```\n\n然后我们在浏览器上去访问test.html\n\n成功~\n\n然后我们修改一下default.conf的配置，增加一个location\n\n```\n[root@VM_239_130_centos html]# vim /etc/nginx/conf.d/default.conf\n\n```\n\n```\n#\n# The default server\n#\n\nserver {\n    listen       80 default_server;\n   # listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n\n    }\n\n    location /test{\n        #root /;\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n}\n\n```\n\n保存退出然后关闭nginx后重新运行\n\n```\n[root@VM_239_130_centos html]# pkill -9 nginx\n[root@VM_239_130_centos html]# /usr/sbin/nginx\n\n```\n\n然后我们访问test/test.html\n\n![Clipboard Image.png](http://nginx.ikuvn.com/images/261498318719617.jpg)\n\n不料却报错了，找不到网页，这是因为我们新添加了一个location资源路径的配置，他会自动找到root，然后在去找root下面是否有test这个文件夹，有的话就去test文件夹中去找我们访问的test.html，可想而知，我们并没有建立test文件夹\n\n回到 /usr/share/nginx/html，然后建立test文件夹，将test.html移动到test文件夹中\n\n```\n[root@VM_239_130_centos html]# mkdir test\n[root@VM_239_130_centos html]# mv test.html test/test.html\n[root@VM_239_130_centos html]# ls\n404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png  test  world\n[root@VM_239_130_centos html]# cd test\n[root@VM_239_130_centos test]# ls\ntest.html\n\n```\n\n\n这里要注意一下，我增加的location配置是这样的\n\n```\nlocation /test{\n        #root /;\n    }\n```\n\n如果这个root配置不注释的话将会覆盖server块下的root路径哦，到这里nginx基本配置应该就写完了，大家可以去亲自试一试~","source":"_posts/Linux平台Nginx的安装及使用.md","raw":"title: Linux平台Nginx的安装及使用\nauthor: Nico\ntags: []\ncategories: []\ndate: 2018-11-06 12:49:00\n---\n这几天因为需要部署静态资源服务器，所以就找了个vps部署一下Nginx，顺带将vsftpd配置好了，下面就给大家讲一下如何在CentOS上部署Nginx及vsftpd！\n\n如果大家不知道Nginx和vsftpd的用处，请自行百度，这里就不过多介绍，废话少说，进入正题。\n\n## 一、在CentOS上下载Nginx和vsftpd\n\n常用的Nginx下载方式有两种，一种是使用CentOS上自带的yum下载，第二种是从网上下载后在通过make进行编译安装，下面我将会向大家介绍一下这两种安装方式\n\n### 1、yum安装方式\n\n首先我们更新一下yum软件库\n\n```\nyum update\n\n```\n\n然后我们搜索一下yum库关于nginx的rpm包\n\n```\nyum list | grep nginx\n\n```\n\n可以看到下面的列表\n\n```\n[root@VM_239_130_centos html]# yum list | grep nginx\nnginx-filesystem.noarch                     1.10.2-1.el6                 @epel  \ncollectd-nginx.x86_64                       4.10.9-4.el6                 epel   \nmunin-nginx.noarch                          2.0.33-1.el6                 epel   \nnginx.x86_64                                1.10.2-1.el6                 epel   \nnginx-all-modules.noarch                    1.10.2-1.el6                 epel   \nnginx-mod-http-geoip.x86_64                 1.10.2-1.el6                 epel   \nnginx-mod-http-image-filter.x86_64          1.10.2-1.el6                 epel   \nnginx-mod-http-perl.x86_64                  1.10.2-1.el6                 epel   \nnginx-mod-http-xslt-filter.x86_64           1.10.2-1.el6                 epel   \nnginx-mod-mail.x86_64                       1.10.2-1.el6                 epel   \nnginx-mod-stream.x86_64                     1.10.2-1.el6                 epel   \npcp-pmda-nginx.x86_64                       3.10.9-9.el6                 os\n\n```\n\n接下来我们选择使用yum安装`nginx.x86_64 1.10.2-1.el6 epel`\n\n```\nyum install nginx\n\n```\n\n中间会提示我们一次是否确认安装\n\n```\n=======================================================================================================================\n Package                                   Arch                 Version                       Repository          Size\n=======================================================================================================================\nInstalling:\n nginx                                     x86_64               1.10.2-1.el6                  epel               462 k\nInstalling for dependencies:\n nginx-all-modules                         noarch               1.10.2-1.el6                  epel               7.7 k\n nginx-mod-http-geoip                      x86_64               1.10.2-1.el6                  epel                14 k\n nginx-mod-http-image-filter               x86_64               1.10.2-1.el6                  epel                16 k\n nginx-mod-http-perl                       x86_64               1.10.2-1.el6                  epel                26 k\n nginx-mod-http-xslt-filter                x86_64               1.10.2-1.el6                  epel                16 k\n nginx-mod-mail                            x86_64               1.10.2-1.el6                  epel                43 k\n nginx-mod-stream                          x86_64               1.10.2-1.el6                  epel                36 k\n\nTransaction Summary\n=======================================================================================================================\nInstall       8 Package(s)\n\nTotal download size: 620 k\nInstalled size: 1.6 M\nIs this ok [y/N]:\n\n```\n\n输入`y`继续\n\n```\nInstalled:\n  nginx.x86_64 0:1.10.2-1.el6                                                                                          \n\nDependency Installed:\n  nginx-all-modules.noarch 0:1.10.2-1.el6                       nginx-mod-http-geoip.x86_64 0:1.10.2-1.el6            \n  nginx-mod-http-image-filter.x86_64 0:1.10.2-1.el6             nginx-mod-http-perl.x86_64 0:1.10.2-1.el6             \n  nginx-mod-http-xslt-filter.x86_64 0:1.10.2-1.el6              nginx-mod-mail.x86_64 0:1.10.2-1.el6                  \n  nginx-mod-stream.x86_64 0:1.10.2-1.el6                       \n\nComplete!\n\n```\n\n安装完毕！！接下来我们来看一下nginx的文件分布\n\n```\nwhereis nginx\n\n```\n\n```\n[root@VM_239_130_centos html]# whereis nginx\nnginx: /usr/sbin/nginx /etc/nginx /usr/lib64/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz\n\n```\n\n其中三个文件（夹）比较重要：\n\n| 路径 | 作用 |\n| --- | --- |\n| /usr/sbin/nginx | nginx启动路径 |\n| /etc/nginx | 存放nginx的配置文件 |\n| /usr/share/nginx | 默认的nginx资源库 |\n\n我们首先进入`/etc/nginx/`中看一下nginx到底有哪些配置文件\n\n```\n[root@VM_239_130_centos html]# cd /etc/nginx\n[root@VM_239_130_centos nginx]# ls\nconf.d        fastcgi.conf.default    koi-utf     mime.types.default  scgi_params          uwsgi_params.default\ndefault.d     fastcgi_params          koi-win     nginx.conf          scgi_params.default  win-utf\nfastcgi.conf  fastcgi_params.default  mime.types  nginx.conf.default  uwsgi_params\n\n```\n\n哇，看到这么多配置文件是不是吓了一跳，其实我们只需要在意nginx.conf就行了，其他的涉及到了再百度，接下来我们进入nginx.conf(这里我们使用vim，系统没有vim的小伙伴可以使用`yum install vim`进行下载安装)\n\n```\nvim nginx.conf\n\n```\n\n```\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '  #日志格式\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;                                                  #操作成功记录日志\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n}\n\n```\n\n上面的配置不要动，我们跟踪到这一行`include /etc/nginx/conf.d/*.conf`主要作用就是加载更多的配置文件，我们退出vim编辑`ESC+:q`进入到conf.d文件夹来看一下\n\n```\n[root@VM_239_130_centos nginx]# cd /etc/nginx/conf.d\n[root@VM_239_130_centos conf.d]# ls\ndefault.conf  default.conf.rpmsave  ssl.conf  virtual.conf\n\n```\n\n然后进入default.conf\n\n```\nvim default.conf\n\n```\n\n```\n#\n# The default server\n#\n\nserver {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n}\n\n```\n\n我们发现这个文件配置的是server{}，server的配置就是我们nginx的核心配置，这里先不过多的讲，下面会详细介绍server的配置，但是此时如果我们运行nginx的话将会报错\n\n```\n Address family not supported by protocol\n\n```\n\n我们需要将上面的\n\n```\n listen       [::]:80 default_server;\n\n```\n\n注释掉\n\n```\n   # listen       [::]:80 default_server;\n\n```\n\n退出vim编辑，使用`/usr/sbin/nginx`启动nginx\n\n```\n[root@VM_239_130_centos conf.d]# /usr/sbin/nginx\n\n```\n\n关闭nginx\n\n```\npkill -9 nginx\n\n```\n\n### 2、编译安装\n\n这里借鉴了腾讯云论坛上的一个帖子： [CentOS 7中Nginx1.9.5编译安装教程systemctl启动](http://bbs.qcloud.com/thread-10429-1-1.html)\n\n<font color=\"#555555\">先安装gcc 等</font>\n\n```\nyum -y install gcc gcc-c++ wget\n\n```\n\n<font>.然后装一些库</font>\n\n```\nyum -y install gcc wget automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\n\n```\n\n<font color=\"#555555\">进入默认的软件目录</font>\n\n```\ncd /usr/local/src/\n\n```\n\n<font color=\"#555555\">下载 nginx软件</font>\n\n```\nwget http://nginx.org/download/nginx-1.9.5.tar.gz\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">如果这个下载太慢可以在这里下载</span><font>[http://nginx.org/download/nginx-1.9.5.tar.gz](http://nginx.org/download/nginx-1.9.5.tar.gz) 下载完后yum -y intall lrzsz 装好上传工具</font>\n\n<font>然后用rz上传到服务器</font> <font color=\"#555555\">然后解压文件.</font>\n\n```\ntar zxvf nginx-1.9.5.tar.gz\n\n```\n\n<font color=\"#555555\">进入 nginx1.9.5的源码 如果想改版本号 可以进入源码目录</font><font color=\"#555555\">src/core/nginx.h</font><font color=\"#555555\">更改</font>\n\n```\ncd nginx-1.9.5/\n\n```\n\n<font color=\"#555555\">创建一个nginx目录用来存放运行的临时文件夹</font>\n\n```\nmkdir -p /var/cache/nginx\n\n```\n\n<font color=\"#555555\">开始configure</font>\n\n```\n./configure \\\n--prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nobody \\\n--group=nobody \\\n--with-pcre \\\n--with-http_v2_module \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-ipv6 \\\n--with-http_v2_module \\\n--with-threads \\\n--with-stream \\\n--with-stream_ssl_module\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">接着 编译</span>\n\n```\nmake\n\n```\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">安装</span>\n\n```\nmake install\n\n```\n\n<font color=\"#555555\">启动nginx</font>\n\n```\n/usr/sbin/nginx\n\n```\n\n<font color=\"#555555\">用ps aux来查看nginx是否启动</font>\n\n```\nps aux|grep nginx\n\n```\n\n<span style=\"font-size: 12px;\">复制代码</span>\n\n<span style=\"color: rgb(68, 68, 68); font-size: 14px;\">然后配置服务</span>\n\n```\nvim /usr/lib/systemd/system/nginx.service\n\n```\n\n<font color=\"#555555\">按i输入以下内容</font>\n\n```\n[Unit]\nDescription=nginx - high performance web server \nDocumentation=http://nginx.org/en/docs/\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf\nExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n<font color=\"#555555\">编辑好后保存</font><font color=\"#555555\">然后开启开机启动</font>\n\n```\nsystemctl enable nginx.service\n\n```\n\n<font color=\"#555555\">用命令关掉nginx</font>\n\n```\npkill -9 nginx\n\n```\n\n<font color=\"#555555\">后面可以用systemctl来操作nginx.service</font>\n\n```\nsystemctl start nginx.service\n\n```\n\n这里值得一提的是nginx编译安装后的文件夹和yum安装的文件夹类似，nginx.conf文件都在/etc/nginx下，不过编译安装后的nginx.conf文件内部配置与yum安装略有差异\n\n编译安装后的nginx.conf内部直接配置server，所以编译安装的小伙伴配置server就不用去改/etc/nginx/conf.d下的default.conf文件配置了，直接到nginx.conf文件中改server配置就行了\n\n## 二、Nginx配置详解\n\n1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。\n\n2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。\n\n3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\n\n4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。\n\n5、location块：配置请求的路由，以及各种页面的处理情况。\n\n我们来到yum安装后的`/etc/nginx/conf.d/default.conf`文件中\n\n```\nserver {\n    listen       80 default_server;\n   # listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n```\n\n在server块中\n\n| 名称 | 作用 |\n| --- | --- |\n| listen | nginx监听端口 |\n| root | nginx资源路径根目录 |\n| location | url访问的本地资源路径配置(支持通配符) |\n|  |\n| error_page | 跳转报错页面 |\n\n其中nginx会在资源目录中去找默认的index.html页面，我们进入/usr/share/nginx/html中看一下\n\n```\n[root@VM_239_130_centos conf.d]# cd /usr/share/nginx/html\n\n[root@VM_239_130_centos html]# ls\n\n404.html  50x.html  index.html  nginx-logo.png  poweredby.png\n\n```\n\n我们在这个文件夹中创建一个test.html\n\n```\n[root@VM_239_130_centos html]# touch test.html\n\n[root@VM_239_130_centos html]# ls\n\n404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png test.html  world\n\n```\n\nhtml页面内容\n\n```\n<html>\n        <head>\n                <title>test</title>\n        </head>\n        <body>  \n                <h1>hello world</h1>\n        </body>\n</html>\n\n```\n\n然后我们在浏览器上去访问test.html\n\n成功~\n\n然后我们修改一下default.conf的配置，增加一个location\n\n```\n[root@VM_239_130_centos html]# vim /etc/nginx/conf.d/default.conf\n\n```\n\n```\n#\n# The default server\n#\n\nserver {\n    listen       80 default_server;\n   # listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n\n    }\n\n    location /test{\n        #root /;\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n}\n\n```\n\n保存退出然后关闭nginx后重新运行\n\n```\n[root@VM_239_130_centos html]# pkill -9 nginx\n[root@VM_239_130_centos html]# /usr/sbin/nginx\n\n```\n\n然后我们访问test/test.html\n\n![Clipboard Image.png](http://nginx.ikuvn.com/images/261498318719617.jpg)\n\n不料却报错了，找不到网页，这是因为我们新添加了一个location资源路径的配置，他会自动找到root，然后在去找root下面是否有test这个文件夹，有的话就去test文件夹中去找我们访问的test.html，可想而知，我们并没有建立test文件夹\n\n回到 /usr/share/nginx/html，然后建立test文件夹，将test.html移动到test文件夹中\n\n```\n[root@VM_239_130_centos html]# mkdir test\n[root@VM_239_130_centos html]# mv test.html test/test.html\n[root@VM_239_130_centos html]# ls\n404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png  test  world\n[root@VM_239_130_centos html]# cd test\n[root@VM_239_130_centos test]# ls\ntest.html\n\n```\n\n\n这里要注意一下，我增加的location配置是这样的\n\n```\nlocation /test{\n        #root /;\n    }\n```\n\n如果这个root配置不注释的话将会覆盖server块下的root路径哦，到这里nginx基本配置应该就写完了，大家可以去亲自试一试~","slug":"Linux平台Nginx的安装及使用","published":1,"updated":"2018-11-06T04:50:01.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kys00019ctpw5te7po2","content":"<p>这几天因为需要部署静态资源服务器，所以就找了个vps部署一下Nginx，顺带将vsftpd配置好了，下面就给大家讲一下如何在CentOS上部署Nginx及vsftpd！</p>\n<p>如果大家不知道Nginx和vsftpd的用处，请自行百度，这里就不过多介绍，废话少说，进入正题。</p>\n<h2 id=\"一-在centos上下载nginx和vsftpd\"><a class=\"header-anchor\" href=\"#一-在centos上下载nginx和vsftpd\">¶</a>一、在CentOS上下载Nginx和vsftpd</h2>\n<p>常用的Nginx下载方式有两种，一种是使用CentOS上自带的yum下载，第二种是从网上下载后在通过make进行编译安装，下面我将会向大家介绍一下这两种安装方式</p>\n<h3 id=\"1-yum安装方式\"><a class=\"header-anchor\" href=\"#1-yum安装方式\">¶</a>1、yum安装方式</h3>\n<p>首先我们更新一下yum软件库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<p>然后我们搜索一下yum库关于nginx的rpm包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n<p>可以看到下面的列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# yum list | grep nginx</span><br><span class=\"line\">nginx-filesystem.noarch                     1.10.2-1.el6                 @epel  </span><br><span class=\"line\">collectd-nginx.x86_64                       4.10.9-4.el6                 epel   </span><br><span class=\"line\">munin-nginx.noarch                          2.0.33-1.el6                 epel   </span><br><span class=\"line\">nginx.x86_64                                1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-all-modules.noarch                    1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-geoip.x86_64                 1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-image-filter.x86_64          1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-perl.x86_64                  1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-xslt-filter.x86_64           1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-mail.x86_64                       1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-stream.x86_64                     1.10.2-1.el6                 epel   </span><br><span class=\"line\">pcp-pmda-nginx.x86_64                       3.10.9-9.el6                 os</span><br></pre></td></tr></table></figure>\n<p>接下来我们选择使用yum安装<code>nginx.x86_64 1.10.2-1.el6 epel</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>中间会提示我们一次是否确认安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\"> Package                                   Arch                 Version                       Repository          Size</span><br><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\">Installing:</span><br><span class=\"line\"> nginx                                     x86_64               1.10.2-1.el6                  epel               462 k</span><br><span class=\"line\">Installing for dependencies:</span><br><span class=\"line\"> nginx-all-modules                         noarch               1.10.2-1.el6                  epel               7.7 k</span><br><span class=\"line\"> nginx-mod-http-geoip                      x86_64               1.10.2-1.el6                  epel                14 k</span><br><span class=\"line\"> nginx-mod-http-image-filter               x86_64               1.10.2-1.el6                  epel                16 k</span><br><span class=\"line\"> nginx-mod-http-perl                       x86_64               1.10.2-1.el6                  epel                26 k</span><br><span class=\"line\"> nginx-mod-http-xslt-filter                x86_64               1.10.2-1.el6                  epel                16 k</span><br><span class=\"line\"> nginx-mod-mail                            x86_64               1.10.2-1.el6                  epel                43 k</span><br><span class=\"line\"> nginx-mod-stream                          x86_64               1.10.2-1.el6                  epel                36 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\">Install       8 Package(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Total download size: 620 k</span><br><span class=\"line\">Installed size: 1.6 M</span><br><span class=\"line\">Is this ok [y/N]:</span><br></pre></td></tr></table></figure>\n<p>输入<code>y</code>继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installed:</span><br><span class=\"line\">  nginx.x86_64 0:1.10.2-1.el6                                                                                          </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  nginx-all-modules.noarch 0:1.10.2-1.el6                       nginx-mod-http-geoip.x86_64 0:1.10.2-1.el6            </span><br><span class=\"line\">  nginx-mod-http-image-filter.x86_64 0:1.10.2-1.el6             nginx-mod-http-perl.x86_64 0:1.10.2-1.el6             </span><br><span class=\"line\">  nginx-mod-http-xslt-filter.x86_64 0:1.10.2-1.el6              nginx-mod-mail.x86_64 0:1.10.2-1.el6                  </span><br><span class=\"line\">  nginx-mod-stream.x86_64 0:1.10.2-1.el6                       </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n<p>安装完毕！！接下来我们来看一下nginx的文件分布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# whereis nginx</span><br><span class=\"line\">nginx: /usr/sbin/nginx /etc/nginx /usr/lib64/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure>\n<p>其中三个文件（夹）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>路径</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/usr/sbin/nginx</td>\n<td>nginx启动路径</td>\n</tr>\n<tr>\n<td>/etc/nginx</td>\n<td>存放nginx的配置文件</td>\n</tr>\n<tr>\n<td>/usr/share/nginx</td>\n<td>默认的nginx资源库</td>\n</tr>\n</tbody>\n</table>\n<p>我们首先进入<code>/etc/nginx/</code>中看一下nginx到底有哪些配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# cd /etc/nginx</span><br><span class=\"line\">[root@VM_239_130_centos nginx]# ls</span><br><span class=\"line\">conf.d        fastcgi.conf.default    koi-utf     mime.types.default  scgi_params          uwsgi_params.default</span><br><span class=\"line\">default.d     fastcgi_params          koi-win     nginx.conf          scgi_params.default  win-utf</span><br><span class=\"line\">fastcgi.conf  fastcgi_params.default  mime.types  nginx.conf.default  uwsgi_params</span><br></pre></td></tr></table></figure>\n<p>哇，看到这么多配置文件是不是吓了一跳，其实我们只需要在意nginx.conf就行了，其他的涉及到了再百度，接下来我们进入nginx.conf(这里我们使用vim，系统没有vim的小伙伴可以使用<code>yum install vim</code>进行下载安装)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;  #日志格式</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;                                                  #操作成功记录日志</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置不要动，我们跟踪到这一行<code>include /etc/nginx/conf.d/*.conf</code>主要作用就是加载更多的配置文件，我们退出vim编辑<code>ESC+:q</code>进入到conf.d文件夹来看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos nginx]# cd /etc/nginx/conf.d</span><br><span class=\"line\">[root@VM_239_130_centos conf.d]# ls</span><br><span class=\"line\">default.conf  default.conf.rpmsave  ssl.conf  virtual.conf</span><br></pre></td></tr></table></figure>\n<p>然后进入default.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim default.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># The default server</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现这个文件配置的是server{}，server的配置就是我们nginx的核心配置，这里先不过多的讲，下面会详细介绍server的配置，但是此时如果我们运行nginx的话将会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address family not supported by protocol</span><br></pre></td></tr></table></figure>\n<p>我们需要将上面的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<p>注释掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<p>退出vim编辑，使用<code>/usr/sbin/nginx</code>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos conf.d]# /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>关闭nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编译安装\"><a class=\"header-anchor\" href=\"#2-编译安装\">¶</a>2、编译安装</h3>\n<p>这里借鉴了腾讯云论坛上的一个帖子： <a href=\"http://bbs.qcloud.com/thread-10429-1-1.html\" target=\"_blank\" rel=\"noopener\">CentOS 7中Nginx1.9.5编译安装教程systemctl启动</a></p>\n<p><font color=\"#555555\">先安装gcc 等</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ wget</span><br></pre></td></tr></table></figure>\n<p><font>.然后装一些库</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc wget automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">进入默认的软件目录</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">下载 nginx软件</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.9.5.tar.gz</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">如果这个下载太慢可以在这里下载</span><font><a href=\"http://nginx.org/download/nginx-1.9.5.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.9.5.tar.gz</a> 下载完后yum -y intall lrzsz 装好上传工具</font></p>\n<p><font>然后用rz上传到服务器</font> <font color=\"#555555\">然后解压文件.</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.9.5.tar.gz</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">进入 nginx1.9.5的源码 如果想改版本号 可以进入源码目录</font><font color=\"#555555\">src/core/nginx.h</font><font color=\"#555555\">更改</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.9.5/</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">创建一个nginx目录用来存放运行的临时文件夹</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/cache/nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">开始configure</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/local/nginx \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--error-log-path=/var/log/nginx/error.log \\</span><br><span class=\"line\">--http-log-path=/var/log/nginx/access.log \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\</span><br><span class=\"line\">--user=nobody \\</span><br><span class=\"line\">--group=nobody \\</span><br><span class=\"line\">--with-pcre \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-mail \\</span><br><span class=\"line\">--with-mail_ssl_module \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">接着 编译</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">安装</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">启动nginx</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">用ps aux来查看nginx是否启动</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep nginx</span><br></pre></td></tr></table></figure>\n<p><span style=\"font-size: 12px;\">复制代码</span></p>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">然后配置服务</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">按i输入以下内容</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx - high performance web server </span><br><span class=\"line\">Documentation=http://nginx.org/en/docs/</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/var/run/nginx.pid</span><br><span class=\"line\">ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf</span><br><span class=\"line\">ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">编辑好后保存</font><font color=\"#555555\">然后开启开机启动</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">用命令关掉nginx</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">后面可以用systemctl来操作nginx.service</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n<p>这里值得一提的是nginx编译安装后的文件夹和yum安装的文件夹类似，nginx.conf文件都在/etc/nginx下，不过编译安装后的nginx.conf文件内部配置与yum安装略有差异</p>\n<p>编译安装后的nginx.conf内部直接配置server，所以编译安装的小伙伴配置server就不用去改/etc/nginx/conf.d下的default.conf文件配置了，直接到nginx.conf文件中改server配置就行了</p>\n<h2 id=\"二-nginx配置详解\"><a class=\"header-anchor\" href=\"#二-nginx配置详解\">¶</a>二、Nginx配置详解</h2>\n<p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p>\n<p>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p>\n<p>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p>\n<p>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</p>\n<p>5、location块：配置请求的路由，以及各种页面的处理情况。</p>\n<p>我们来到yum安装后的<code>/etc/nginx/conf.d/default.conf</code>文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">   # listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在server块中</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>listen</td>\n<td>nginx监听端口</td>\n</tr>\n<tr>\n<td>root</td>\n<td>nginx资源路径根目录</td>\n</tr>\n<tr>\n<td>location</td>\n<td>url访问的本地资源路径配置(支持通配符)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>error_page</td>\n<td>跳转报错页面</td>\n</tr>\n</tbody>\n</table>\n<p>其中nginx会在资源目录中去找默认的index.html页面，我们进入/usr/share/nginx/html中看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos conf.d]# cd /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\"></span><br><span class=\"line\">404.html  50x.html  index.html  nginx-logo.png  poweredby.png</span><br></pre></td></tr></table></figure>\n<p>我们在这个文件夹中创建一个test.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# touch test.html</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\"></span><br><span class=\"line\">404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png test.html  world</span><br></pre></td></tr></table></figure>\n<p>html页面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">        &lt;head&gt;</span><br><span class=\"line\">                &lt;title&gt;test&lt;/title&gt;</span><br><span class=\"line\">        &lt;/head&gt;</span><br><span class=\"line\">        &lt;body&gt;  </span><br><span class=\"line\">                &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class=\"line\">        &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>然后我们在浏览器上去访问test.html</p>\n<p>成功~</p>\n<p>然后我们修改一下default.conf的配置，增加一个location</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># The default server</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">   # listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /test&#123;</span><br><span class=\"line\">        #root /;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存退出然后关闭nginx后重新运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# pkill -9 nginx</span><br><span class=\"line\">[root@VM_239_130_centos html]# /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>然后我们访问test/test.html</p>\n<p><img src=\"http://nginx.ikuvn.com/images/261498318719617.jpg\" alt=\"Clipboard Image.png\"></p>\n<p>不料却报错了，找不到网页，这是因为我们新添加了一个location资源路径的配置，他会自动找到root，然后在去找root下面是否有test这个文件夹，有的话就去test文件夹中去找我们访问的test.html，可想而知，我们并没有建立test文件夹</p>\n<p>回到 /usr/share/nginx/html，然后建立test文件夹，将test.html移动到test文件夹中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# mkdir test</span><br><span class=\"line\">[root@VM_239_130_centos html]# mv test.html test/test.html</span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\">404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png  test  world</span><br><span class=\"line\">[root@VM_239_130_centos html]# cd test</span><br><span class=\"line\">[root@VM_239_130_centos test]# ls</span><br><span class=\"line\">test.html</span><br></pre></td></tr></table></figure>\n<p>这里要注意一下，我增加的location配置是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /test&#123;</span><br><span class=\"line\">        #root /;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如果这个root配置不注释的话将会覆盖server块下的root路径哦，到这里nginx基本配置应该就写完了，大家可以去亲自试一试~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这几天因为需要部署静态资源服务器，所以就找了个vps部署一下Nginx，顺带将vsftpd配置好了，下面就给大家讲一下如何在CentOS上部署Nginx及vsftpd！</p>\n<p>如果大家不知道Nginx和vsftpd的用处，请自行百度，这里就不过多介绍，废话少说，进入正题。</p>\n<h2 id=\"一-在centos上下载nginx和vsftpd\"><a class=\"header-anchor\" href=\"#一-在centos上下载nginx和vsftpd\">¶</a>一、在CentOS上下载Nginx和vsftpd</h2>\n<p>常用的Nginx下载方式有两种，一种是使用CentOS上自带的yum下载，第二种是从网上下载后在通过make进行编译安装，下面我将会向大家介绍一下这两种安装方式</p>\n<h3 id=\"1-yum安装方式\"><a class=\"header-anchor\" href=\"#1-yum安装方式\">¶</a>1、yum安装方式</h3>\n<p>首先我们更新一下yum软件库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<p>然后我们搜索一下yum库关于nginx的rpm包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n<p>可以看到下面的列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# yum list | grep nginx</span><br><span class=\"line\">nginx-filesystem.noarch                     1.10.2-1.el6                 @epel  </span><br><span class=\"line\">collectd-nginx.x86_64                       4.10.9-4.el6                 epel   </span><br><span class=\"line\">munin-nginx.noarch                          2.0.33-1.el6                 epel   </span><br><span class=\"line\">nginx.x86_64                                1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-all-modules.noarch                    1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-geoip.x86_64                 1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-image-filter.x86_64          1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-perl.x86_64                  1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-http-xslt-filter.x86_64           1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-mail.x86_64                       1.10.2-1.el6                 epel   </span><br><span class=\"line\">nginx-mod-stream.x86_64                     1.10.2-1.el6                 epel   </span><br><span class=\"line\">pcp-pmda-nginx.x86_64                       3.10.9-9.el6                 os</span><br></pre></td></tr></table></figure>\n<p>接下来我们选择使用yum安装<code>nginx.x86_64 1.10.2-1.el6 epel</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>中间会提示我们一次是否确认安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\"> Package                                   Arch                 Version                       Repository          Size</span><br><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\">Installing:</span><br><span class=\"line\"> nginx                                     x86_64               1.10.2-1.el6                  epel               462 k</span><br><span class=\"line\">Installing for dependencies:</span><br><span class=\"line\"> nginx-all-modules                         noarch               1.10.2-1.el6                  epel               7.7 k</span><br><span class=\"line\"> nginx-mod-http-geoip                      x86_64               1.10.2-1.el6                  epel                14 k</span><br><span class=\"line\"> nginx-mod-http-image-filter               x86_64               1.10.2-1.el6                  epel                16 k</span><br><span class=\"line\"> nginx-mod-http-perl                       x86_64               1.10.2-1.el6                  epel                26 k</span><br><span class=\"line\"> nginx-mod-http-xslt-filter                x86_64               1.10.2-1.el6                  epel                16 k</span><br><span class=\"line\"> nginx-mod-mail                            x86_64               1.10.2-1.el6                  epel                43 k</span><br><span class=\"line\"> nginx-mod-stream                          x86_64               1.10.2-1.el6                  epel                36 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=======================================================================================================================</span><br><span class=\"line\">Install       8 Package(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Total download size: 620 k</span><br><span class=\"line\">Installed size: 1.6 M</span><br><span class=\"line\">Is this ok [y/N]:</span><br></pre></td></tr></table></figure>\n<p>输入<code>y</code>继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installed:</span><br><span class=\"line\">  nginx.x86_64 0:1.10.2-1.el6                                                                                          </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  nginx-all-modules.noarch 0:1.10.2-1.el6                       nginx-mod-http-geoip.x86_64 0:1.10.2-1.el6            </span><br><span class=\"line\">  nginx-mod-http-image-filter.x86_64 0:1.10.2-1.el6             nginx-mod-http-perl.x86_64 0:1.10.2-1.el6             </span><br><span class=\"line\">  nginx-mod-http-xslt-filter.x86_64 0:1.10.2-1.el6              nginx-mod-mail.x86_64 0:1.10.2-1.el6                  </span><br><span class=\"line\">  nginx-mod-stream.x86_64 0:1.10.2-1.el6                       </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n<p>安装完毕！！接下来我们来看一下nginx的文件分布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# whereis nginx</span><br><span class=\"line\">nginx: /usr/sbin/nginx /etc/nginx /usr/lib64/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure>\n<p>其中三个文件（夹）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>路径</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/usr/sbin/nginx</td>\n<td>nginx启动路径</td>\n</tr>\n<tr>\n<td>/etc/nginx</td>\n<td>存放nginx的配置文件</td>\n</tr>\n<tr>\n<td>/usr/share/nginx</td>\n<td>默认的nginx资源库</td>\n</tr>\n</tbody>\n</table>\n<p>我们首先进入<code>/etc/nginx/</code>中看一下nginx到底有哪些配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# cd /etc/nginx</span><br><span class=\"line\">[root@VM_239_130_centos nginx]# ls</span><br><span class=\"line\">conf.d        fastcgi.conf.default    koi-utf     mime.types.default  scgi_params          uwsgi_params.default</span><br><span class=\"line\">default.d     fastcgi_params          koi-win     nginx.conf          scgi_params.default  win-utf</span><br><span class=\"line\">fastcgi.conf  fastcgi_params.default  mime.types  nginx.conf.default  uwsgi_params</span><br></pre></td></tr></table></figure>\n<p>哇，看到这么多配置文件是不是吓了一跳，其实我们只需要在意nginx.conf就行了，其他的涉及到了再百度，接下来我们进入nginx.conf(这里我们使用vim，系统没有vim的小伙伴可以使用<code>yum install vim</code>进行下载安装)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;  #日志格式</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;                                                  #操作成功记录日志</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置不要动，我们跟踪到这一行<code>include /etc/nginx/conf.d/*.conf</code>主要作用就是加载更多的配置文件，我们退出vim编辑<code>ESC+:q</code>进入到conf.d文件夹来看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos nginx]# cd /etc/nginx/conf.d</span><br><span class=\"line\">[root@VM_239_130_centos conf.d]# ls</span><br><span class=\"line\">default.conf  default.conf.rpmsave  ssl.conf  virtual.conf</span><br></pre></td></tr></table></figure>\n<p>然后进入default.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim default.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># The default server</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现这个文件配置的是server{}，server的配置就是我们nginx的核心配置，这里先不过多的讲，下面会详细介绍server的配置，但是此时如果我们运行nginx的话将会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address family not supported by protocol</span><br></pre></td></tr></table></figure>\n<p>我们需要将上面的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<p>注释掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<p>退出vim编辑，使用<code>/usr/sbin/nginx</code>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos conf.d]# /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>关闭nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编译安装\"><a class=\"header-anchor\" href=\"#2-编译安装\">¶</a>2、编译安装</h3>\n<p>这里借鉴了腾讯云论坛上的一个帖子： <a href=\"http://bbs.qcloud.com/thread-10429-1-1.html\" target=\"_blank\" rel=\"noopener\">CentOS 7中Nginx1.9.5编译安装教程systemctl启动</a></p>\n<p><font color=\"#555555\">先安装gcc 等</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ wget</span><br></pre></td></tr></table></figure>\n<p><font>.然后装一些库</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc wget automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">进入默认的软件目录</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">下载 nginx软件</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.9.5.tar.gz</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">如果这个下载太慢可以在这里下载</span><font><a href=\"http://nginx.org/download/nginx-1.9.5.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.9.5.tar.gz</a> 下载完后yum -y intall lrzsz 装好上传工具</font></p>\n<p><font>然后用rz上传到服务器</font> <font color=\"#555555\">然后解压文件.</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.9.5.tar.gz</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">进入 nginx1.9.5的源码 如果想改版本号 可以进入源码目录</font><font color=\"#555555\">src/core/nginx.h</font><font color=\"#555555\">更改</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.9.5/</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">创建一个nginx目录用来存放运行的临时文件夹</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/cache/nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">开始configure</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/local/nginx \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--error-log-path=/var/log/nginx/error.log \\</span><br><span class=\"line\">--http-log-path=/var/log/nginx/access.log \\</span><br><span class=\"line\">--pid-path=/var/run/nginx.pid \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\</span><br><span class=\"line\">--user=nobody \\</span><br><span class=\"line\">--group=nobody \\</span><br><span class=\"line\">--with-pcre \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-http_addition_module \\</span><br><span class=\"line\">--with-http_sub_module \\</span><br><span class=\"line\">--with-http_dav_module \\</span><br><span class=\"line\">--with-http_flv_module \\</span><br><span class=\"line\">--with-http_mp4_module \\</span><br><span class=\"line\">--with-http_gunzip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--with-http_random_index_module \\</span><br><span class=\"line\">--with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_auth_request_module \\</span><br><span class=\"line\">--with-mail \\</span><br><span class=\"line\">--with-mail_ssl_module \\</span><br><span class=\"line\">--with-file-aio \\</span><br><span class=\"line\">--with-ipv6 \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-threads \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-stream_ssl_module</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">接着 编译</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">安装</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">启动nginx</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">用ps aux来查看nginx是否启动</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep nginx</span><br></pre></td></tr></table></figure>\n<p><span style=\"font-size: 12px;\">复制代码</span></p>\n<p><span style=\"color: rgb(68, 68, 68); font-size: 14px;\">然后配置服务</span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">按i输入以下内容</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx - high performance web server </span><br><span class=\"line\">Documentation=http://nginx.org/en/docs/</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/var/run/nginx.pid</span><br><span class=\"line\">ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf</span><br><span class=\"line\">ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">编辑好后保存</font><font color=\"#555555\">然后开启开机启动</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">用命令关掉nginx</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<p><font color=\"#555555\">后面可以用systemctl来操作nginx.service</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n<p>这里值得一提的是nginx编译安装后的文件夹和yum安装的文件夹类似，nginx.conf文件都在/etc/nginx下，不过编译安装后的nginx.conf文件内部配置与yum安装略有差异</p>\n<p>编译安装后的nginx.conf内部直接配置server，所以编译安装的小伙伴配置server就不用去改/etc/nginx/conf.d下的default.conf文件配置了，直接到nginx.conf文件中改server配置就行了</p>\n<h2 id=\"二-nginx配置详解\"><a class=\"header-anchor\" href=\"#二-nginx配置详解\">¶</a>二、Nginx配置详解</h2>\n<p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p>\n<p>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p>\n<p>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p>\n<p>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</p>\n<p>5、location块：配置请求的路由，以及各种页面的处理情况。</p>\n<p>我们来到yum安装后的<code>/etc/nginx/conf.d/default.conf</code>文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">   # listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在server块中</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>listen</td>\n<td>nginx监听端口</td>\n</tr>\n<tr>\n<td>root</td>\n<td>nginx资源路径根目录</td>\n</tr>\n<tr>\n<td>location</td>\n<td>url访问的本地资源路径配置(支持通配符)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>error_page</td>\n<td>跳转报错页面</td>\n</tr>\n</tbody>\n</table>\n<p>其中nginx会在资源目录中去找默认的index.html页面，我们进入/usr/share/nginx/html中看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos conf.d]# cd /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\"></span><br><span class=\"line\">404.html  50x.html  index.html  nginx-logo.png  poweredby.png</span><br></pre></td></tr></table></figure>\n<p>我们在这个文件夹中创建一个test.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# touch test.html</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\"></span><br><span class=\"line\">404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png test.html  world</span><br></pre></td></tr></table></figure>\n<p>html页面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">        &lt;head&gt;</span><br><span class=\"line\">                &lt;title&gt;test&lt;/title&gt;</span><br><span class=\"line\">        &lt;/head&gt;</span><br><span class=\"line\">        &lt;body&gt;  </span><br><span class=\"line\">                &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class=\"line\">        &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>然后我们在浏览器上去访问test.html</p>\n<p>成功~</p>\n<p>然后我们修改一下default.conf的配置，增加一个location</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># The default server</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">   # listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /test&#123;</span><br><span class=\"line\">        #root /;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存退出然后关闭nginx后重新运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# pkill -9 nginx</span><br><span class=\"line\">[root@VM_239_130_centos html]# /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>然后我们访问test/test.html</p>\n<p><img src=\"http://nginx.ikuvn.com/images/261498318719617.jpg\" alt=\"Clipboard Image.png\"></p>\n<p>不料却报错了，找不到网页，这是因为我们新添加了一个location资源路径的配置，他会自动找到root，然后在去找root下面是否有test这个文件夹，有的话就去test文件夹中去找我们访问的test.html，可想而知，我们并没有建立test文件夹</p>\n<p>回到 /usr/share/nginx/html，然后建立test文件夹，将test.html移动到test文件夹中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_239_130_centos html]# mkdir test</span><br><span class=\"line\">[root@VM_239_130_centos html]# mv test.html test/test.html</span><br><span class=\"line\">[root@VM_239_130_centos html]# ls</span><br><span class=\"line\">404.html  50x.html  hello  index.html  nginx-logo.png  poweredby.png  test  world</span><br><span class=\"line\">[root@VM_239_130_centos html]# cd test</span><br><span class=\"line\">[root@VM_239_130_centos test]# ls</span><br><span class=\"line\">test.html</span><br></pre></td></tr></table></figure>\n<p>这里要注意一下，我增加的location配置是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /test&#123;</span><br><span class=\"line\">        #root /;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如果这个root配置不注释的话将会覆盖server块下的root路径哦，到这里nginx基本配置应该就写完了，大家可以去亲自试一试~</p>\n"},{"title":"Spring Cloud Config 入门","author":"Nico","date":"2018-11-06T04:47:00.000Z","_content":"## 一、依赖配置\nMaven依赖配置只是配置中心需要的配置，其他配置自加，本文仅以扩展为目标~\n#### 客户端\nMaven配置\n```\n    <dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-config</artifactId>\n\t</dependency>\n```\nMain\n```\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigApp {\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(ConfigApp.class, args);\n\t}\n}\n```\napplication.yml\n```\nserver:\n  port: 8087\nspring:\n  cloud:\n    config:\n      label: master\n      server:\n        git:\n          uri: git配置仓库http地址\n          username: xxx\n          password: xxx\n```\n#### 配置服务端\nMaven配置\n```\n    <dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-config-server</artifactId>\n\t</dependency>\n```\napplication.yml\n```\nspring:\n  cloud:\n    config:\n      profile: dev\n      label: master\n      uri: http://localhost:8087/\n```\n## 二、映射规则\n```\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.yml\n/{label}/{application}-{profile}.properties\n```\napplication：服务名\nprofile：环境``dev/test/pro``\nlable：分支\n\n仓库根目录下可以用``application.yml``作为全局配置，所有服务共享","source":"_posts/Spring-Cloud-Config-入门.md","raw":"title: Spring Cloud Config 入门\nauthor: Nico\ntags: []\ncategories: []\ndate: 2018-11-06 12:47:00\n---\n## 一、依赖配置\nMaven依赖配置只是配置中心需要的配置，其他配置自加，本文仅以扩展为目标~\n#### 客户端\nMaven配置\n```\n    <dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-config</artifactId>\n\t</dependency>\n```\nMain\n```\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigApp {\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(ConfigApp.class, args);\n\t}\n}\n```\napplication.yml\n```\nserver:\n  port: 8087\nspring:\n  cloud:\n    config:\n      label: master\n      server:\n        git:\n          uri: git配置仓库http地址\n          username: xxx\n          password: xxx\n```\n#### 配置服务端\nMaven配置\n```\n    <dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-config-server</artifactId>\n\t</dependency>\n```\napplication.yml\n```\nspring:\n  cloud:\n    config:\n      profile: dev\n      label: master\n      uri: http://localhost:8087/\n```\n## 二、映射规则\n```\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.yml\n/{label}/{application}-{profile}.properties\n```\napplication：服务名\nprofile：环境``dev/test/pro``\nlable：分支\n\n仓库根目录下可以用``application.yml``作为全局配置，所有服务共享","slug":"Spring-Cloud-Config-入门","published":1,"updated":"2018-11-06T05:20:46.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kz400039ctpwisom89t","content":"<h2 id=\"一-依赖配置\"><a class=\"header-anchor\" href=\"#一-依赖配置\">¶</a>一、依赖配置</h2>\n<p>Maven依赖配置只是配置中心需要的配置，其他配置自加，本文仅以扩展为目标~</p>\n<h4 id=\"客户端\"><a class=\"header-anchor\" href=\"#客户端\">¶</a>客户端</h4>\n<p>Maven配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>Main</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">public class ConfigApp &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(ConfigApp.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8087</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      label: master</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        git:</span><br><span class=\"line\">          uri: git配置仓库http地址</span><br><span class=\"line\">          username: xxx</span><br><span class=\"line\">          password: xxx</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置服务端\"><a class=\"header-anchor\" href=\"#配置服务端\">¶</a>配置服务端</h4>\n<p>Maven配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      profile: dev</span><br><span class=\"line\">      label: master</span><br><span class=\"line\">      uri: http://localhost:8087/</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-映射规则\"><a class=\"header-anchor\" href=\"#二-映射规则\">¶</a>二、映射规则</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>\n<p>application：服务名<br>\nprofile：环境<code>dev/test/pro</code><br>\nlable：分支</p>\n<p>仓库根目录下可以用<code>application.yml</code>作为全局配置，所有服务共享</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-依赖配置\"><a class=\"header-anchor\" href=\"#一-依赖配置\">¶</a>一、依赖配置</h2>\n<p>Maven依赖配置只是配置中心需要的配置，其他配置自加，本文仅以扩展为目标~</p>\n<h4 id=\"客户端\"><a class=\"header-anchor\" href=\"#客户端\">¶</a>客户端</h4>\n<p>Maven配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>Main</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">public class ConfigApp &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(ConfigApp.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8087</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      label: master</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        git:</span><br><span class=\"line\">          uri: git配置仓库http地址</span><br><span class=\"line\">          username: xxx</span><br><span class=\"line\">          password: xxx</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置服务端\"><a class=\"header-anchor\" href=\"#配置服务端\">¶</a>配置服务端</h4>\n<p>Maven配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      profile: dev</span><br><span class=\"line\">      label: master</span><br><span class=\"line\">      uri: http://localhost:8087/</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-映射规则\"><a class=\"header-anchor\" href=\"#二-映射规则\">¶</a>二、映射规则</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>\n<p>application：服务名<br>\nprofile：环境<code>dev/test/pro</code><br>\nlable：分支</p>\n<p>仓库根目录下可以用<code>application.yml</code>作为全局配置，所有服务共享</p>\n"},{"title":"Spring Cloud Eureka 使用Nginx做路由网关","author":"Nico","date":"2018-11-06T04:46:21.000Z","_content":"## 一、起始\n在分布式系统的体系中，注册中心的作用及其重要，每个服务可以将自己注册到Eureka中，然后通过心跳包去实时获取注册中心的服务列表，因此达到分布式环境下的Rpc调用及负载。\n\n但是如果使用Eureka做负载均衡，那么将会面临着一个问题：\n```\n如果要调整负载均衡方案，例如复杂的加权，那么整个系统就要面临着停服的尴尬。\n```\n那么我们能不能将负载均衡交给系统之外的中间件处理？本文就拿Spring Cloud环境来举例如何将配置Eureka Client以至将负载的主动权交给Nginx！\n## 二、可行性\n各服务注册在Eureka上的可识别HOST默认是本机IP，也就是**ipAddress**这个参数，各个服务从Eureka获取的服务列表大多数情况下是**ipAddress:port**的搭配形式，而Nginx通常通过**server_name**来监听**80**端口去转发各个请求，**server_name**为域名的形式，那么我们只需要想办法将注册列表的搭配变成如下方式即可：\n```\nipAddress = account.xt.org\nport = 80\n```\n也就是说从Eureka上获得的服务列表将会是**account.application.api:80**，那么这个想法到底能不能做到呢？\n\n我们都知道Spring Cloud提供了Eureka的配置方式，配置域有两个，他们分别是**Client**和**Instance**，而关于网络方面的配置大多在后者，其中有两个参数恰好符合我们上述要求：\n - IpAddress：实例IP\n - NonSecurePort：获取该实例应该接收通信的非安全端口，在Spring Cloud中默认为服务的IP\n\n## 三、实现\n\n接下来我们需要将IpAddress配置成我们需要的域名，NonSecurePort配置为80（不配置默认会赋值为当前服务的端口号）\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: @serviceUrl@\n    registryFetchIntervalSeconds: 5\n  instance:\n    preferIpAddress: true\n    ipAddress: account.xt.org\n    nonSecurePort: 80\n    lease-renewal-interval-in-seconds: 10\n    lease-expiration-duration-in-seconds: 90\n    instance-id: ${spring.cloud.client.ipAddress}:${spring.application.name}:${server.port}\n```\n至此，我们的服务间便可以通过域名进行RPC调用，我们可以通过Eureka提供的Rest Operations查看方才修改的服务的注册信息：\n```\ncurl GET http://localhost:8089/eureka/apps/SERVICE-XTOKEN-ACCOUNT\nRESPONSE:\n<application>\n    <name>SERVICE-XTOKEN-ACCOUNT</name>\n    <instance>\n        <instanceId>192.168.50.200:service-xtoken-account:8094</instanceId>\n        <hostName>account.xt.org</hostName>\n        <app>SERVICE-XTOKEN-ACCOUNT</app>\n        <ipAddr>account.xt.org</ipAddr>\n        <status>UP</status>\n        <overriddenstatus>UNKNOWN</overriddenstatus>\n        <port enabled=\"true\">80</port>\n        <securePort enabled=\"false\">443</securePort>\n        <countryId>1</countryId>\n        <dataCenterInfo class=\"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo\">\n            <name>MyOwn</name>\n        </dataCenterInfo>\n        <leaseInfo>\n            <renewalIntervalInSecs>10</renewalIntervalInSecs>\n            <durationInSecs>90</durationInSecs>\n            <registrationTimestamp>1537168990103</registrationTimestamp>\n            <lastRenewalTimestamp>1537171761036</lastRenewalTimestamp>\n            <evictionTimestamp>0</evictionTimestamp>\n            <serviceUpTimestamp>1537168990103</serviceUpTimestamp>\n        </leaseInfo>\n        <metadata>\n            <management.port>8094</management.port>\n        </metadata>\n        <homePageUrl>http://account.xt.org:80/</homePageUrl>\n        <statusPageUrl>http://192.168.50.200:8094/info</statusPageUrl>\n        <healthCheckUrl>http://192.168.50.200:8094/health</healthCheckUrl>\n        <vipAddress>service-xtoken-account</vipAddress>\n        <secureVipAddress>service-xtoken-account</secureVipAddress>\n        <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>\n        <lastUpdatedTimestamp>1537168990103</lastUpdatedTimestamp>\n        <lastDirtyTimestamp>1537168990048</lastDirtyTimestamp>\n        <actionType>ADDED</actionType>\n    </instance>\n</application>\n```\n我们发现ipAddr和port两个参数已经变成了我们想要的结果！\n\n不过这时的域名我们的网关是识别不了的，需要我们去本机的Hosts文件中配置一下：\n```\n## 其他配置\n..\n..\n127.0.0.1 account.xt.org\n```\n然后Nginx配置一个代理即可：\n```\nserver {\n        listen       80;\n        server_name  account.xt.org;\n\n        location / {\n            proxy_pass  http://127.0.0.1:8094;\n        }\n    }\n```","source":"_posts/Spring-Cloud-Eureka-使用Nginx做路由网关.md","raw":"title: Spring Cloud Eureka 使用Nginx做路由网关\nauthor: Nico\ndate: 2018-11-06 12:46:21\ntags:\n---\n## 一、起始\n在分布式系统的体系中，注册中心的作用及其重要，每个服务可以将自己注册到Eureka中，然后通过心跳包去实时获取注册中心的服务列表，因此达到分布式环境下的Rpc调用及负载。\n\n但是如果使用Eureka做负载均衡，那么将会面临着一个问题：\n```\n如果要调整负载均衡方案，例如复杂的加权，那么整个系统就要面临着停服的尴尬。\n```\n那么我们能不能将负载均衡交给系统之外的中间件处理？本文就拿Spring Cloud环境来举例如何将配置Eureka Client以至将负载的主动权交给Nginx！\n## 二、可行性\n各服务注册在Eureka上的可识别HOST默认是本机IP，也就是**ipAddress**这个参数，各个服务从Eureka获取的服务列表大多数情况下是**ipAddress:port**的搭配形式，而Nginx通常通过**server_name**来监听**80**端口去转发各个请求，**server_name**为域名的形式，那么我们只需要想办法将注册列表的搭配变成如下方式即可：\n```\nipAddress = account.xt.org\nport = 80\n```\n也就是说从Eureka上获得的服务列表将会是**account.application.api:80**，那么这个想法到底能不能做到呢？\n\n我们都知道Spring Cloud提供了Eureka的配置方式，配置域有两个，他们分别是**Client**和**Instance**，而关于网络方面的配置大多在后者，其中有两个参数恰好符合我们上述要求：\n - IpAddress：实例IP\n - NonSecurePort：获取该实例应该接收通信的非安全端口，在Spring Cloud中默认为服务的IP\n\n## 三、实现\n\n接下来我们需要将IpAddress配置成我们需要的域名，NonSecurePort配置为80（不配置默认会赋值为当前服务的端口号）\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: @serviceUrl@\n    registryFetchIntervalSeconds: 5\n  instance:\n    preferIpAddress: true\n    ipAddress: account.xt.org\n    nonSecurePort: 80\n    lease-renewal-interval-in-seconds: 10\n    lease-expiration-duration-in-seconds: 90\n    instance-id: ${spring.cloud.client.ipAddress}:${spring.application.name}:${server.port}\n```\n至此，我们的服务间便可以通过域名进行RPC调用，我们可以通过Eureka提供的Rest Operations查看方才修改的服务的注册信息：\n```\ncurl GET http://localhost:8089/eureka/apps/SERVICE-XTOKEN-ACCOUNT\nRESPONSE:\n<application>\n    <name>SERVICE-XTOKEN-ACCOUNT</name>\n    <instance>\n        <instanceId>192.168.50.200:service-xtoken-account:8094</instanceId>\n        <hostName>account.xt.org</hostName>\n        <app>SERVICE-XTOKEN-ACCOUNT</app>\n        <ipAddr>account.xt.org</ipAddr>\n        <status>UP</status>\n        <overriddenstatus>UNKNOWN</overriddenstatus>\n        <port enabled=\"true\">80</port>\n        <securePort enabled=\"false\">443</securePort>\n        <countryId>1</countryId>\n        <dataCenterInfo class=\"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo\">\n            <name>MyOwn</name>\n        </dataCenterInfo>\n        <leaseInfo>\n            <renewalIntervalInSecs>10</renewalIntervalInSecs>\n            <durationInSecs>90</durationInSecs>\n            <registrationTimestamp>1537168990103</registrationTimestamp>\n            <lastRenewalTimestamp>1537171761036</lastRenewalTimestamp>\n            <evictionTimestamp>0</evictionTimestamp>\n            <serviceUpTimestamp>1537168990103</serviceUpTimestamp>\n        </leaseInfo>\n        <metadata>\n            <management.port>8094</management.port>\n        </metadata>\n        <homePageUrl>http://account.xt.org:80/</homePageUrl>\n        <statusPageUrl>http://192.168.50.200:8094/info</statusPageUrl>\n        <healthCheckUrl>http://192.168.50.200:8094/health</healthCheckUrl>\n        <vipAddress>service-xtoken-account</vipAddress>\n        <secureVipAddress>service-xtoken-account</secureVipAddress>\n        <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>\n        <lastUpdatedTimestamp>1537168990103</lastUpdatedTimestamp>\n        <lastDirtyTimestamp>1537168990048</lastDirtyTimestamp>\n        <actionType>ADDED</actionType>\n    </instance>\n</application>\n```\n我们发现ipAddr和port两个参数已经变成了我们想要的结果！\n\n不过这时的域名我们的网关是识别不了的，需要我们去本机的Hosts文件中配置一下：\n```\n## 其他配置\n..\n..\n127.0.0.1 account.xt.org\n```\n然后Nginx配置一个代理即可：\n```\nserver {\n        listen       80;\n        server_name  account.xt.org;\n\n        location / {\n            proxy_pass  http://127.0.0.1:8094;\n        }\n    }\n```","slug":"Spring-Cloud-Eureka-使用Nginx做路由网关","published":1,"updated":"2018-11-06T04:46:30.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzb00049ctp3cug5ys1","content":"<h2 id=\"一-起始\"><a class=\"header-anchor\" href=\"#一-起始\">¶</a>一、起始</h2>\n<p>在分布式系统的体系中，注册中心的作用及其重要，每个服务可以将自己注册到Eureka中，然后通过心跳包去实时获取注册中心的服务列表，因此达到分布式环境下的Rpc调用及负载。</p>\n<p>但是如果使用Eureka做负载均衡，那么将会面临着一个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要调整负载均衡方案，例如复杂的加权，那么整个系统就要面临着停服的尴尬。</span><br></pre></td></tr></table></figure>\n<p>那么我们能不能将负载均衡交给系统之外的中间件处理？本文就拿Spring Cloud环境来举例如何将配置Eureka Client以至将负载的主动权交给Nginx！</p>\n<h2 id=\"二-可行性\"><a class=\"header-anchor\" href=\"#二-可行性\">¶</a>二、可行性</h2>\n<p>各服务注册在Eureka上的可识别HOST默认是本机IP，也就是<strong>ipAddress</strong>这个参数，各个服务从Eureka获取的服务列表大多数情况下是<strong>ipAddress:port</strong>的搭配形式，而Nginx通常通过<strong>server_name</strong>来监听<strong>80</strong>端口去转发各个请求，<strong>server_name</strong>为域名的形式，那么我们只需要想办法将注册列表的搭配变成如下方式即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipAddress = account.xt.org</span><br><span class=\"line\">port = 80</span><br></pre></td></tr></table></figure>\n<p>也就是说从Eureka上获得的服务列表将会是<strong>account.application.api:80</strong>，那么这个想法到底能不能做到呢？</p>\n<p>我们都知道Spring Cloud提供了Eureka的配置方式，配置域有两个，他们分别是<strong>Client</strong>和<strong>Instance</strong>，而关于网络方面的配置大多在后者，其中有两个参数恰好符合我们上述要求：</p>\n<ul>\n<li>IpAddress：实例IP</li>\n<li>NonSecurePort：获取该实例应该接收通信的非安全端口，在Spring Cloud中默认为服务的IP</li>\n</ul>\n<h2 id=\"三-实现\"><a class=\"header-anchor\" href=\"#三-实现\">¶</a>三、实现</h2>\n<p>接下来我们需要将IpAddress配置成我们需要的域名，NonSecurePort配置为80（不配置默认会赋值为当前服务的端口号）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: @serviceUrl@</span><br><span class=\"line\">    registryFetchIntervalSeconds: 5</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    preferIpAddress: true</span><br><span class=\"line\">    ipAddress: account.xt.org</span><br><span class=\"line\">    nonSecurePort: 80</span><br><span class=\"line\">    lease-renewal-interval-in-seconds: 10</span><br><span class=\"line\">    lease-expiration-duration-in-seconds: 90</span><br><span class=\"line\">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们的服务间便可以通过域名进行RPC调用，我们可以通过Eureka提供的Rest Operations查看方才修改的服务的注册信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl GET http://localhost:8089/eureka/apps/SERVICE-XTOKEN-ACCOUNT</span><br><span class=\"line\">RESPONSE:</span><br><span class=\"line\">&lt;application&gt;</span><br><span class=\"line\">    &lt;name&gt;SERVICE-XTOKEN-ACCOUNT&lt;/name&gt;</span><br><span class=\"line\">    &lt;instance&gt;</span><br><span class=\"line\">        &lt;instanceId&gt;192.168.50.200:service-xtoken-account:8094&lt;/instanceId&gt;</span><br><span class=\"line\">        &lt;hostName&gt;account.xt.org&lt;/hostName&gt;</span><br><span class=\"line\">        &lt;app&gt;SERVICE-XTOKEN-ACCOUNT&lt;/app&gt;</span><br><span class=\"line\">        &lt;ipAddr&gt;account.xt.org&lt;/ipAddr&gt;</span><br><span class=\"line\">        &lt;status&gt;UP&lt;/status&gt;</span><br><span class=\"line\">        &lt;overriddenstatus&gt;UNKNOWN&lt;/overriddenstatus&gt;</span><br><span class=\"line\">        &lt;port enabled=&quot;true&quot;&gt;80&lt;/port&gt;</span><br><span class=\"line\">        &lt;securePort enabled=&quot;false&quot;&gt;443&lt;/securePort&gt;</span><br><span class=\"line\">        &lt;countryId&gt;1&lt;/countryId&gt;</span><br><span class=\"line\">        &lt;dataCenterInfo class=&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;&gt;</span><br><span class=\"line\">            &lt;name&gt;MyOwn&lt;/name&gt;</span><br><span class=\"line\">        &lt;/dataCenterInfo&gt;</span><br><span class=\"line\">        &lt;leaseInfo&gt;</span><br><span class=\"line\">            &lt;renewalIntervalInSecs&gt;10&lt;/renewalIntervalInSecs&gt;</span><br><span class=\"line\">            &lt;durationInSecs&gt;90&lt;/durationInSecs&gt;</span><br><span class=\"line\">            &lt;registrationTimestamp&gt;1537168990103&lt;/registrationTimestamp&gt;</span><br><span class=\"line\">            &lt;lastRenewalTimestamp&gt;1537171761036&lt;/lastRenewalTimestamp&gt;</span><br><span class=\"line\">            &lt;evictionTimestamp&gt;0&lt;/evictionTimestamp&gt;</span><br><span class=\"line\">            &lt;serviceUpTimestamp&gt;1537168990103&lt;/serviceUpTimestamp&gt;</span><br><span class=\"line\">        &lt;/leaseInfo&gt;</span><br><span class=\"line\">        &lt;metadata&gt;</span><br><span class=\"line\">            &lt;management.port&gt;8094&lt;/management.port&gt;</span><br><span class=\"line\">        &lt;/metadata&gt;</span><br><span class=\"line\">        &lt;homePageUrl&gt;http://account.xt.org:80/&lt;/homePageUrl&gt;</span><br><span class=\"line\">        &lt;statusPageUrl&gt;http://192.168.50.200:8094/info&lt;/statusPageUrl&gt;</span><br><span class=\"line\">        &lt;healthCheckUrl&gt;http://192.168.50.200:8094/health&lt;/healthCheckUrl&gt;</span><br><span class=\"line\">        &lt;vipAddress&gt;service-xtoken-account&lt;/vipAddress&gt;</span><br><span class=\"line\">        &lt;secureVipAddress&gt;service-xtoken-account&lt;/secureVipAddress&gt;</span><br><span class=\"line\">        &lt;isCoordinatingDiscoveryServer&gt;false&lt;/isCoordinatingDiscoveryServer&gt;</span><br><span class=\"line\">        &lt;lastUpdatedTimestamp&gt;1537168990103&lt;/lastUpdatedTimestamp&gt;</span><br><span class=\"line\">        &lt;lastDirtyTimestamp&gt;1537168990048&lt;/lastDirtyTimestamp&gt;</span><br><span class=\"line\">        &lt;actionType&gt;ADDED&lt;/actionType&gt;</span><br><span class=\"line\">    &lt;/instance&gt;</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n<p>我们发现ipAddr和port两个参数已经变成了我们想要的结果！</p>\n<p>不过这时的域名我们的网关是识别不了的，需要我们去本机的Hosts文件中配置一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 其他配置</span><br><span class=\"line\">..</span><br><span class=\"line\">..</span><br><span class=\"line\">127.0.0.1 account.xt.org</span><br></pre></td></tr></table></figure>\n<p>然后Nginx配置一个代理即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  account.xt.org;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  http://127.0.0.1:8094;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-起始\"><a class=\"header-anchor\" href=\"#一-起始\">¶</a>一、起始</h2>\n<p>在分布式系统的体系中，注册中心的作用及其重要，每个服务可以将自己注册到Eureka中，然后通过心跳包去实时获取注册中心的服务列表，因此达到分布式环境下的Rpc调用及负载。</p>\n<p>但是如果使用Eureka做负载均衡，那么将会面临着一个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要调整负载均衡方案，例如复杂的加权，那么整个系统就要面临着停服的尴尬。</span><br></pre></td></tr></table></figure>\n<p>那么我们能不能将负载均衡交给系统之外的中间件处理？本文就拿Spring Cloud环境来举例如何将配置Eureka Client以至将负载的主动权交给Nginx！</p>\n<h2 id=\"二-可行性\"><a class=\"header-anchor\" href=\"#二-可行性\">¶</a>二、可行性</h2>\n<p>各服务注册在Eureka上的可识别HOST默认是本机IP，也就是<strong>ipAddress</strong>这个参数，各个服务从Eureka获取的服务列表大多数情况下是<strong>ipAddress:port</strong>的搭配形式，而Nginx通常通过<strong>server_name</strong>来监听<strong>80</strong>端口去转发各个请求，<strong>server_name</strong>为域名的形式，那么我们只需要想办法将注册列表的搭配变成如下方式即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipAddress = account.xt.org</span><br><span class=\"line\">port = 80</span><br></pre></td></tr></table></figure>\n<p>也就是说从Eureka上获得的服务列表将会是<strong>account.application.api:80</strong>，那么这个想法到底能不能做到呢？</p>\n<p>我们都知道Spring Cloud提供了Eureka的配置方式，配置域有两个，他们分别是<strong>Client</strong>和<strong>Instance</strong>，而关于网络方面的配置大多在后者，其中有两个参数恰好符合我们上述要求：</p>\n<ul>\n<li>IpAddress：实例IP</li>\n<li>NonSecurePort：获取该实例应该接收通信的非安全端口，在Spring Cloud中默认为服务的IP</li>\n</ul>\n<h2 id=\"三-实现\"><a class=\"header-anchor\" href=\"#三-实现\">¶</a>三、实现</h2>\n<p>接下来我们需要将IpAddress配置成我们需要的域名，NonSecurePort配置为80（不配置默认会赋值为当前服务的端口号）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: @serviceUrl@</span><br><span class=\"line\">    registryFetchIntervalSeconds: 5</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    preferIpAddress: true</span><br><span class=\"line\">    ipAddress: account.xt.org</span><br><span class=\"line\">    nonSecurePort: 80</span><br><span class=\"line\">    lease-renewal-interval-in-seconds: 10</span><br><span class=\"line\">    lease-expiration-duration-in-seconds: 90</span><br><span class=\"line\">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们的服务间便可以通过域名进行RPC调用，我们可以通过Eureka提供的Rest Operations查看方才修改的服务的注册信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl GET http://localhost:8089/eureka/apps/SERVICE-XTOKEN-ACCOUNT</span><br><span class=\"line\">RESPONSE:</span><br><span class=\"line\">&lt;application&gt;</span><br><span class=\"line\">    &lt;name&gt;SERVICE-XTOKEN-ACCOUNT&lt;/name&gt;</span><br><span class=\"line\">    &lt;instance&gt;</span><br><span class=\"line\">        &lt;instanceId&gt;192.168.50.200:service-xtoken-account:8094&lt;/instanceId&gt;</span><br><span class=\"line\">        &lt;hostName&gt;account.xt.org&lt;/hostName&gt;</span><br><span class=\"line\">        &lt;app&gt;SERVICE-XTOKEN-ACCOUNT&lt;/app&gt;</span><br><span class=\"line\">        &lt;ipAddr&gt;account.xt.org&lt;/ipAddr&gt;</span><br><span class=\"line\">        &lt;status&gt;UP&lt;/status&gt;</span><br><span class=\"line\">        &lt;overriddenstatus&gt;UNKNOWN&lt;/overriddenstatus&gt;</span><br><span class=\"line\">        &lt;port enabled=&quot;true&quot;&gt;80&lt;/port&gt;</span><br><span class=\"line\">        &lt;securePort enabled=&quot;false&quot;&gt;443&lt;/securePort&gt;</span><br><span class=\"line\">        &lt;countryId&gt;1&lt;/countryId&gt;</span><br><span class=\"line\">        &lt;dataCenterInfo class=&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;&gt;</span><br><span class=\"line\">            &lt;name&gt;MyOwn&lt;/name&gt;</span><br><span class=\"line\">        &lt;/dataCenterInfo&gt;</span><br><span class=\"line\">        &lt;leaseInfo&gt;</span><br><span class=\"line\">            &lt;renewalIntervalInSecs&gt;10&lt;/renewalIntervalInSecs&gt;</span><br><span class=\"line\">            &lt;durationInSecs&gt;90&lt;/durationInSecs&gt;</span><br><span class=\"line\">            &lt;registrationTimestamp&gt;1537168990103&lt;/registrationTimestamp&gt;</span><br><span class=\"line\">            &lt;lastRenewalTimestamp&gt;1537171761036&lt;/lastRenewalTimestamp&gt;</span><br><span class=\"line\">            &lt;evictionTimestamp&gt;0&lt;/evictionTimestamp&gt;</span><br><span class=\"line\">            &lt;serviceUpTimestamp&gt;1537168990103&lt;/serviceUpTimestamp&gt;</span><br><span class=\"line\">        &lt;/leaseInfo&gt;</span><br><span class=\"line\">        &lt;metadata&gt;</span><br><span class=\"line\">            &lt;management.port&gt;8094&lt;/management.port&gt;</span><br><span class=\"line\">        &lt;/metadata&gt;</span><br><span class=\"line\">        &lt;homePageUrl&gt;http://account.xt.org:80/&lt;/homePageUrl&gt;</span><br><span class=\"line\">        &lt;statusPageUrl&gt;http://192.168.50.200:8094/info&lt;/statusPageUrl&gt;</span><br><span class=\"line\">        &lt;healthCheckUrl&gt;http://192.168.50.200:8094/health&lt;/healthCheckUrl&gt;</span><br><span class=\"line\">        &lt;vipAddress&gt;service-xtoken-account&lt;/vipAddress&gt;</span><br><span class=\"line\">        &lt;secureVipAddress&gt;service-xtoken-account&lt;/secureVipAddress&gt;</span><br><span class=\"line\">        &lt;isCoordinatingDiscoveryServer&gt;false&lt;/isCoordinatingDiscoveryServer&gt;</span><br><span class=\"line\">        &lt;lastUpdatedTimestamp&gt;1537168990103&lt;/lastUpdatedTimestamp&gt;</span><br><span class=\"line\">        &lt;lastDirtyTimestamp&gt;1537168990048&lt;/lastDirtyTimestamp&gt;</span><br><span class=\"line\">        &lt;actionType&gt;ADDED&lt;/actionType&gt;</span><br><span class=\"line\">    &lt;/instance&gt;</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n<p>我们发现ipAddr和port两个参数已经变成了我们想要的结果！</p>\n<p>不过这时的域名我们的网关是识别不了的，需要我们去本机的Hosts文件中配置一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 其他配置</span><br><span class=\"line\">..</span><br><span class=\"line\">..</span><br><span class=\"line\">127.0.0.1 account.xt.org</span><br></pre></td></tr></table></figure>\n<p>然后Nginx配置一个代理即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  account.xt.org;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  http://127.0.0.1:8094;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Spring Cloud Gateway深入探究","author":"Nico","date":"2018-11-06T04:41:00.000Z","_content":"## Spring Cloud Gateway介绍\n废话不多说，看官方文档的介绍\n> This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.\n\n有道翻译一下:\n\n这个项目提供了一个建在Spring生态系统之上的API网关，包括:Spring 5, Spring Boot 2和project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供交叉关注，例如:安全性、监视/度量和弹性。\n\n工作原理如下：\n\n![image](https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png)\n\nGateway实际上提供了一个在路由上的控制功能，大体包含两个大功能：\n - Route\n - Filter\n - Forward\n\n我们可以通过Route去匹配请求的uri，而每个Router下可以配置一个Filter Chain，我们可以通过Filter去修饰请求和响应及一些类似鉴权等中间动作，通过Forward可以控制重定向和请求转发（实际上Filter也可以做到，只不过这里分开说清晰一点）。在路由控制上，Gateway表现的非常灵活，它有两种配置方式：\n - Yml or Properties File\n - Code\n\n主要名词如下：\n - **Route**: Route the basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates and a collection of filters. A route is matched if aggregate predicate is true.\n - **Predicate**: This is a Java 8 Function Predicate. The input type is a Spring Framework ServerWebExchange. This allows developers to match on anything from the HTTP request, such as headers or parameters.\n - **Filter**: These are instances Spring Framework GatewayFilter constructed in with a specific factory. Here, requests and responses can be modified before or after sending the downstream request.\n\nRoute 作为Gateway中的基本元素，它有自己的ID、URI和一个Predicate集合、Filter集合。Predicate的作用是判断请求的Uri是否匹配当前的Route，Filter则是匹配通过之后对请求和响应的处理及修饰，那么在Gateway中Route基本结构如下\n```\nGateway{\n    Route1 {\n        String id;\n        String path;\n        List<Predicate> predicates;\n        List<Filter> filters;\n    };\n    Route2 {\n        String id;\n        String path;\n        List<Predicate> predicates;\n        List<Filter> filters;\n    };\n    ...\n    ...\n}\n```\nRoute中的ID作为它的唯一标识，path的作用是正则匹配请求路径，Predicate则是在path匹配的情况下进一步去更加细致的匹配请求路径，如一下例子：\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: before_route\n        uri: http://example.org\n        predicates:\n        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]\n```\n只匹配在``Jan 20, 2017 17:42`` 发起的请求\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: http://example.org\n        predicates:\n        - Cookie=chocolate, “”\n```\n只匹配请求中携带``chocolate``且值为``ch.p``的请求\n\n更多例子这里就不一一展开，有兴趣的可以去看下官方文档: [传送门](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-request-predicates-factories)\n\n## Spring Cloud Gateway 配置\n#### Maven\n```\n<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-gateway</artifactId>\n\t\t\t\t<version>2.0.2.BUILD-SNAPSHOT</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-gateway</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t    <groupId>org.yaml</groupId>\n\t\t    <artifactId>snakeyaml</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>spring-snapshots</id>\n\t\t\t<name>Spring Snapshots</name>\n\t\t\t<url>https://repo.spring.io/libs-snapshot</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n```\n#### Yml\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: http://example.org\n        predicates:\n        - Cookie=chocolate, ch.p\n```\n#### Java Config\n```\n@Configuration\n@RestController\n@SpringBootApplication\npublic class Application {\n\n\t@Bean\n\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\t\treturn builder.routes()\n\t\t\t\t.route(r -> r.path(\"/request/**\")\n\t\t\t\t\t\t.and()\n\t\t\t\t\t\t.predicate(new Predicate<ServerWebExchange>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean test(ServerWebExchange t) {\n\t\t\t\t\t\t\t\tboolean access = t.getRequest().getCookies().get(\"_9755xjdesxxd_\").get(0).getValue().equals(\"32\");\n\t\t\t\t\t\t\t\treturn access;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filters(f -> f.stripPrefix(2)\n\t\t\t\t\t\t\t.filter(new GatewayFilter() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 2)\n\t\t\t\t\t\t\t.filter(new GatewayFilter() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1))\n\t\t\t\t\t\t.uri(\"http://localhost:8080/hello\")\n\t\t\t\t\t\t).build();\n\t}\n\t\n\t@GetMapping(\"/hello\")\n\tpublic String hello() {\n\t\treturn \"hello\";\n\t}\n\n\tpublic static void main(String[] args) throws ClassNotFoundException {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n```\nYml配置和Java代码配置可以共存，Yml配置的好处是可以直接用自带的一些谓词和Filter，而Java代码配置更加灵活！\n## Spring Cloud Gateway使用\n上文已经说过，Gateway支持两种配置，本文主要以Java Config的方式着重讲解，因为官方文档中对于Yml配置的讲解已经足够深入，如有兴趣可以进入[传送门](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-how-it-works)\n\n#### Route\n一个Route的配置可以足够简单\n```\n@Configuration\n@RestController\n@SpringBootApplication\npublic class Application1 {\n\n\t@Bean\n\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\t\treturn builder.routes()\n\t\t\t\t.route(r -> r.path(\"/user/**\")\n\t\t\t\t\t\t.uri(\"http://localhost:8080/hello\")\n\t\t\t\t\t\t).build();\n\t}\n\t\n\t@GetMapping(\"/hello\")\n\tpublic String hello() {\n\t\treturn \"hello\";\n\t}\n\n\tpublic static void main(String[] args) throws ClassNotFoundException {\n\t\tSpringApplication.run(Application1.class, args);\n\t}\n\n}\n```\n上述Demo定义了一个Route，并且path值为``/**``，意味着匹配多层uri，如果将path改为``/*``则意味着只能匹配一层。所以运行上面的程序，那么所有的请求都将被转发到``http://localhost:8080/hello``\n\n如果uri的配置并没有一个确定的资源，例如``http://ip:port``，那么``/**``所匹配的路径将会自动拼装在uri之后：\n```\nrequest http://当前服务/user/1\nforward http://ip:port/user/1\n```\n这种方式更适合服务之间的转发，我们可以将uri设置为``ip:port``也可以设置为``xxx.com``域名，但是不能自己转发自己的服务，例如\n```\nrequest http://当前服务/user/1\nforward http://当前服务/user/1\n```\n这就导致了HTTP 413的错误，无限转发至自己，也就意味着请求死锁，非常致命！最好的方式如下：\n\n我们拟定开两个服务占用的端口分别是``8080``和``8081``,我们假如要从``8080``服务通过``/user/**``路由匹配转发至``8081``服务，可以这样做：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n工作跟踪：\n```\nrequest http://localhost:8080/user/hello\nforward http://localhost:8081/user/hello\n```\n8081服务接口定义：\n```\n@GetMapping(\"/user/hello\")\npublic String hello() {\n\treturn \"User Say Hello\";\n}\n```\nReponse Body：\n```\nUser Say Hello\n```\n\n当Gateway代替Zuul时，也就是说在服务间的通讯由Zuul转换成Gateway之后，uri的写法将会变成这个样子：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(r -> r.path(\"user/**\")\n\t\t\t\t\t.uri(\"lb://USER_SERVER_NAME\")\n\t\t\t\t\t).build();\n}\n```\n上述代码将``user/**``所匹配的请求全部转发到``USER_SERVER_NAME``服务下：\n```\nrequest /user/1\nforward http://USER_SERVER_HOST:USER_SERVER_PORT/user/1\n```\n其中**lb**的含义其实是``load balance``的意思，我想开发者以lb来区分路由模式可能是负载均衡意味着多服务的环境，因此lb可以表示转发对象从指定的uri转变成了服务！\n#### Predicate\nPredicate是Java 8+新出的一个库，本身作用是进行逻辑运算，支持种类如下：\n- isEqual\n- and\n- negate\n- or\n另外还有一个方法``test(T)``用于触发逻辑计算返回一个Boolean类型值。\n\nGateway使用Predicate来做除path pattern match之外的匹配判断，使用及其简单：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.predicate(e -> e.getClass() != null)\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n输入的**e**代表着``ServerWebExchange``对象，我们可以通过``ServerWebExchange``获取所有请求相关的信息，例如Cookies和Headers。通过Lambda语法去编写判断逻辑，如果一个Route中所有的Predicate返回的结果都是TRUE则匹配成功，否则匹配失败。\n\n> Tp：path和predicate需要使用and链接，也可以使用or链接，分别代表不同的逻辑运算！\n\n#### Filter\nFilter的作用类似于Predicate，区别在于，Predicate可以做请求中断，Filter也可以做，Filter可以做Reponse的修饰，Predicate并做不到，也就是说Filter最为最后一道拦截，可以做的事情有很多，例如修改响应报文，增加个Header或者Cookie，甚至修改响应Body，相比之下，Filter更加全能！\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.predicate(e -> e.getClass() != null)\n\t\t\t\t\t.filters(fn -> fn.addResponseHeader(\"developer\", \"Nico\"))\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n## Spring Cloud Gateway 工作原理\nGateway是基于Spring MVC之上的网关路由控制器，我们可以直接定位到Spring MVC的``org.springframework.web.reactive.DispatcherHandler``类，它的``handle``方法将会处理解析Request之后的``ServerWebExchange``对象。\n\n进入``handle``方法，将会使用Flux遍历``org.springframework.web.reactive.DispatcherHandler.handlerMappings``对``ServerWebExchange``进行处理,``handlerMappings``中包含着一下处理器：\n```\norg.springframework.web.reactive.function.server.support.RouterFunctionMapping@247a29b6, org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping@f6449f4, org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping@535c6b8b,\norg.springframework.web.reactive.handler.SimpleUrlHandlerMapping@5633e9e\n```\n以上只是一个简单请求的处理器，Flux的``concatMap``方法会将每个处理器的Mono合并成一个Flux，然后调用``org.springframework.web.reactive.DispatcherHandler``类中的``invokeHandler``方法开始处理``ServerWebExchange``,处理完毕之后将紧接着处理返回值，这时使用``handleResult``方法，具体实现如下：\n```\n@Override\npublic Mono<Void> handle(ServerWebExchange exchange) {\n\tif (logger.isDebugEnabled()) {\n\t\tServerHttpRequest request = exchange.getRequest();\n\t\tlogger.debug(\"Processing \" + request.getMethodValue() + \" request for [\" + request.getURI() + \"]\");\n\t}\n\tif (this.handlerMappings == null) {\n\t\treturn Mono.error(HANDLER_NOT_FOUND_EXCEPTION);\n\t}\n\treturn Flux.fromIterable(this.handlerMappings)\n\t\t\t.concatMap(mapping -> mapping.getHandler(exchange))\n\t\t\t.next()\n\t\t\t.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))\n\t\t\t.flatMap(handler -> invokeHandler(exchange, handler))\n\t\t\t.flatMap(result -> handleResult(exchange, result));\n}\n```\n\nGateway起作用的关键在于``invokeHandler``方法中：\n```\nprivate Mono<HandlerResult> invokeHandler(ServerWebExchange exchange, Object handler) {\n\tif (this.handlerAdapters != null) {\n\t\tfor (HandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\tif (handlerAdapter.supports(handler)) {\n\t\t\t\treturn handlerAdapter.handle(exchange, handler);\n\t\t\t}\n\t\t}\n\t}\n\treturn Mono.error(new IllegalStateException(\"No HandlerAdapter: \" + handler));\n}\n```\n\n\n\n\n对应的处理器的适配器匹配到本身之后，将会触发适配器的处理方法，每个处理器都会实现一个对应的接口，他们大致都有一个共同的特点：\n```\npublic interface Handler {\n\n\tMono<Void> handle(ServerWebExchange exchange);\n\n}\n```\n每个适配器的处理方法中都会在穿插入适配逻辑代码之后调用处理器的``handle``方法，Spring Cloud Gateway的所有Handler都在```org.springframework.cloud.gateway.handler```包下：\n```\norg.springframework.cloud.gateway.handler.AsyncPredicate<T>\norg.springframework.cloud.gateway.handler.FilteringWebHandler\norg.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping\n```\n可以看到，上述三个处理器分别处理了Filter和Predicate，有兴趣的朋友可以去看一下这些类内部的具体实现，这里就不一一细说。\n\n总的来讲，Spring Cloud Gateway的原理是在服务加载期间读取自己的配置将信息存放在一个容器中，在Spring Mvc 处理请求的时候取出这些信息进行**逻辑判断**及**过滤**，根据不同的处理结果触发不同的事件！\n\n而请求转发这一块有兴趣的同学可以去研究一下！\n\n> TP: path的匹配其实也是一个Predicate逻辑判断\n\n## Spring Cloud Gateway 总结\n笔者偶然间看到spring-cloud-netflix的issue下的一个回答[传送门](https://github.com/spring-cloud/spring-cloud-netflix/issues/2951)：\n```\nLovnx：Zuul 2.0 has opened sourcing,Do you intend to integrate it in some next version?\nspencergibb：No. We created spring cloud gateway instead.\n```\n这才感觉到Spring Cloud果然霸气，也因此接触到了Spring Cloud Gateway，觉得很有必要学习一下，总体来讲，Spring Cloud Gateway简化了之前过滤器配置的复杂度，也在新的配置方式上增加了微服务的网关配置，可以直接代替掉Zuul，期待着Spring会整出自己的注册中心来。\n\n笔者学艺不精，以上阐述有误的地方，希望批评指出，联系方式：ainililia@163.com\n\n## 相关文档\n[官方文档](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_glossary)\n[Spring Cloud Gateway 入门](http://ju.outofmemory.cn/entry/346688)\n[响应式编程之Reactor的关于Flux和Mono概念](https://blog.csdn.net/qq_28089993/article/details/79443447)","source":"_posts/Spring-Cloud-Gateway深入探究.md","raw":"title: Spring Cloud Gateway深入探究\nauthor: Nico\ntags: []\ncategories: []\ndate: 2018-11-06 12:41:00\n---\n## Spring Cloud Gateway介绍\n废话不多说，看官方文档的介绍\n> This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.\n\n有道翻译一下:\n\n这个项目提供了一个建在Spring生态系统之上的API网关，包括:Spring 5, Spring Boot 2和project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供交叉关注，例如:安全性、监视/度量和弹性。\n\n工作原理如下：\n\n![image](https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png)\n\nGateway实际上提供了一个在路由上的控制功能，大体包含两个大功能：\n - Route\n - Filter\n - Forward\n\n我们可以通过Route去匹配请求的uri，而每个Router下可以配置一个Filter Chain，我们可以通过Filter去修饰请求和响应及一些类似鉴权等中间动作，通过Forward可以控制重定向和请求转发（实际上Filter也可以做到，只不过这里分开说清晰一点）。在路由控制上，Gateway表现的非常灵活，它有两种配置方式：\n - Yml or Properties File\n - Code\n\n主要名词如下：\n - **Route**: Route the basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates and a collection of filters. A route is matched if aggregate predicate is true.\n - **Predicate**: This is a Java 8 Function Predicate. The input type is a Spring Framework ServerWebExchange. This allows developers to match on anything from the HTTP request, such as headers or parameters.\n - **Filter**: These are instances Spring Framework GatewayFilter constructed in with a specific factory. Here, requests and responses can be modified before or after sending the downstream request.\n\nRoute 作为Gateway中的基本元素，它有自己的ID、URI和一个Predicate集合、Filter集合。Predicate的作用是判断请求的Uri是否匹配当前的Route，Filter则是匹配通过之后对请求和响应的处理及修饰，那么在Gateway中Route基本结构如下\n```\nGateway{\n    Route1 {\n        String id;\n        String path;\n        List<Predicate> predicates;\n        List<Filter> filters;\n    };\n    Route2 {\n        String id;\n        String path;\n        List<Predicate> predicates;\n        List<Filter> filters;\n    };\n    ...\n    ...\n}\n```\nRoute中的ID作为它的唯一标识，path的作用是正则匹配请求路径，Predicate则是在path匹配的情况下进一步去更加细致的匹配请求路径，如一下例子：\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: before_route\n        uri: http://example.org\n        predicates:\n        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]\n```\n只匹配在``Jan 20, 2017 17:42`` 发起的请求\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: http://example.org\n        predicates:\n        - Cookie=chocolate, “”\n```\n只匹配请求中携带``chocolate``且值为``ch.p``的请求\n\n更多例子这里就不一一展开，有兴趣的可以去看下官方文档: [传送门](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-request-predicates-factories)\n\n## Spring Cloud Gateway 配置\n#### Maven\n```\n<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-gateway</artifactId>\n\t\t\t\t<version>2.0.2.BUILD-SNAPSHOT</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-gateway</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t    <groupId>org.yaml</groupId>\n\t\t    <artifactId>snakeyaml</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>spring-snapshots</id>\n\t\t\t<name>Spring Snapshots</name>\n\t\t\t<url>https://repo.spring.io/libs-snapshot</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n```\n#### Yml\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: http://example.org\n        predicates:\n        - Cookie=chocolate, ch.p\n```\n#### Java Config\n```\n@Configuration\n@RestController\n@SpringBootApplication\npublic class Application {\n\n\t@Bean\n\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\t\treturn builder.routes()\n\t\t\t\t.route(r -> r.path(\"/request/**\")\n\t\t\t\t\t\t.and()\n\t\t\t\t\t\t.predicate(new Predicate<ServerWebExchange>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean test(ServerWebExchange t) {\n\t\t\t\t\t\t\t\tboolean access = t.getRequest().getCookies().get(\"_9755xjdesxxd_\").get(0).getValue().equals(\"32\");\n\t\t\t\t\t\t\t\treturn access;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filters(f -> f.stripPrefix(2)\n\t\t\t\t\t\t\t.filter(new GatewayFilter() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 2)\n\t\t\t\t\t\t\t.filter(new GatewayFilter() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1))\n\t\t\t\t\t\t.uri(\"http://localhost:8080/hello\")\n\t\t\t\t\t\t).build();\n\t}\n\t\n\t@GetMapping(\"/hello\")\n\tpublic String hello() {\n\t\treturn \"hello\";\n\t}\n\n\tpublic static void main(String[] args) throws ClassNotFoundException {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n```\nYml配置和Java代码配置可以共存，Yml配置的好处是可以直接用自带的一些谓词和Filter，而Java代码配置更加灵活！\n## Spring Cloud Gateway使用\n上文已经说过，Gateway支持两种配置，本文主要以Java Config的方式着重讲解，因为官方文档中对于Yml配置的讲解已经足够深入，如有兴趣可以进入[传送门](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-how-it-works)\n\n#### Route\n一个Route的配置可以足够简单\n```\n@Configuration\n@RestController\n@SpringBootApplication\npublic class Application1 {\n\n\t@Bean\n\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\t\treturn builder.routes()\n\t\t\t\t.route(r -> r.path(\"/user/**\")\n\t\t\t\t\t\t.uri(\"http://localhost:8080/hello\")\n\t\t\t\t\t\t).build();\n\t}\n\t\n\t@GetMapping(\"/hello\")\n\tpublic String hello() {\n\t\treturn \"hello\";\n\t}\n\n\tpublic static void main(String[] args) throws ClassNotFoundException {\n\t\tSpringApplication.run(Application1.class, args);\n\t}\n\n}\n```\n上述Demo定义了一个Route，并且path值为``/**``，意味着匹配多层uri，如果将path改为``/*``则意味着只能匹配一层。所以运行上面的程序，那么所有的请求都将被转发到``http://localhost:8080/hello``\n\n如果uri的配置并没有一个确定的资源，例如``http://ip:port``，那么``/**``所匹配的路径将会自动拼装在uri之后：\n```\nrequest http://当前服务/user/1\nforward http://ip:port/user/1\n```\n这种方式更适合服务之间的转发，我们可以将uri设置为``ip:port``也可以设置为``xxx.com``域名，但是不能自己转发自己的服务，例如\n```\nrequest http://当前服务/user/1\nforward http://当前服务/user/1\n```\n这就导致了HTTP 413的错误，无限转发至自己，也就意味着请求死锁，非常致命！最好的方式如下：\n\n我们拟定开两个服务占用的端口分别是``8080``和``8081``,我们假如要从``8080``服务通过``/user/**``路由匹配转发至``8081``服务，可以这样做：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n工作跟踪：\n```\nrequest http://localhost:8080/user/hello\nforward http://localhost:8081/user/hello\n```\n8081服务接口定义：\n```\n@GetMapping(\"/user/hello\")\npublic String hello() {\n\treturn \"User Say Hello\";\n}\n```\nReponse Body：\n```\nUser Say Hello\n```\n\n当Gateway代替Zuul时，也就是说在服务间的通讯由Zuul转换成Gateway之后，uri的写法将会变成这个样子：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(r -> r.path(\"user/**\")\n\t\t\t\t\t.uri(\"lb://USER_SERVER_NAME\")\n\t\t\t\t\t).build();\n}\n```\n上述代码将``user/**``所匹配的请求全部转发到``USER_SERVER_NAME``服务下：\n```\nrequest /user/1\nforward http://USER_SERVER_HOST:USER_SERVER_PORT/user/1\n```\n其中**lb**的含义其实是``load balance``的意思，我想开发者以lb来区分路由模式可能是负载均衡意味着多服务的环境，因此lb可以表示转发对象从指定的uri转变成了服务！\n#### Predicate\nPredicate是Java 8+新出的一个库，本身作用是进行逻辑运算，支持种类如下：\n- isEqual\n- and\n- negate\n- or\n另外还有一个方法``test(T)``用于触发逻辑计算返回一个Boolean类型值。\n\nGateway使用Predicate来做除path pattern match之外的匹配判断，使用及其简单：\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.predicate(e -> e.getClass() != null)\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n输入的**e**代表着``ServerWebExchange``对象，我们可以通过``ServerWebExchange``获取所有请求相关的信息，例如Cookies和Headers。通过Lambda语法去编写判断逻辑，如果一个Route中所有的Predicate返回的结果都是TRUE则匹配成功，否则匹配失败。\n\n> Tp：path和predicate需要使用and链接，也可以使用or链接，分别代表不同的逻辑运算！\n\n#### Filter\nFilter的作用类似于Predicate，区别在于，Predicate可以做请求中断，Filter也可以做，Filter可以做Reponse的修饰，Predicate并做不到，也就是说Filter最为最后一道拦截，可以做的事情有很多，例如修改响应报文，增加个Header或者Cookie，甚至修改响应Body，相比之下，Filter更加全能！\n```\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n\treturn builder.routes()\n\t\t\t.route(\"hello\", r -> r\n\t\t\t\t\t.path(\"/user/**\")\n\t\t\t\t\t.and()\n\t\t\t\t\t.predicate(e -> e.getClass() != null)\n\t\t\t\t\t.filters(fn -> fn.addResponseHeader(\"developer\", \"Nico\"))\n\t\t\t\t\t.uri(\"http://localhost:8081\")\n\t\t\t\t\t).build();\n}\n```\n## Spring Cloud Gateway 工作原理\nGateway是基于Spring MVC之上的网关路由控制器，我们可以直接定位到Spring MVC的``org.springframework.web.reactive.DispatcherHandler``类，它的``handle``方法将会处理解析Request之后的``ServerWebExchange``对象。\n\n进入``handle``方法，将会使用Flux遍历``org.springframework.web.reactive.DispatcherHandler.handlerMappings``对``ServerWebExchange``进行处理,``handlerMappings``中包含着一下处理器：\n```\norg.springframework.web.reactive.function.server.support.RouterFunctionMapping@247a29b6, org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping@f6449f4, org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping@535c6b8b,\norg.springframework.web.reactive.handler.SimpleUrlHandlerMapping@5633e9e\n```\n以上只是一个简单请求的处理器，Flux的``concatMap``方法会将每个处理器的Mono合并成一个Flux，然后调用``org.springframework.web.reactive.DispatcherHandler``类中的``invokeHandler``方法开始处理``ServerWebExchange``,处理完毕之后将紧接着处理返回值，这时使用``handleResult``方法，具体实现如下：\n```\n@Override\npublic Mono<Void> handle(ServerWebExchange exchange) {\n\tif (logger.isDebugEnabled()) {\n\t\tServerHttpRequest request = exchange.getRequest();\n\t\tlogger.debug(\"Processing \" + request.getMethodValue() + \" request for [\" + request.getURI() + \"]\");\n\t}\n\tif (this.handlerMappings == null) {\n\t\treturn Mono.error(HANDLER_NOT_FOUND_EXCEPTION);\n\t}\n\treturn Flux.fromIterable(this.handlerMappings)\n\t\t\t.concatMap(mapping -> mapping.getHandler(exchange))\n\t\t\t.next()\n\t\t\t.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))\n\t\t\t.flatMap(handler -> invokeHandler(exchange, handler))\n\t\t\t.flatMap(result -> handleResult(exchange, result));\n}\n```\n\nGateway起作用的关键在于``invokeHandler``方法中：\n```\nprivate Mono<HandlerResult> invokeHandler(ServerWebExchange exchange, Object handler) {\n\tif (this.handlerAdapters != null) {\n\t\tfor (HandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\tif (handlerAdapter.supports(handler)) {\n\t\t\t\treturn handlerAdapter.handle(exchange, handler);\n\t\t\t}\n\t\t}\n\t}\n\treturn Mono.error(new IllegalStateException(\"No HandlerAdapter: \" + handler));\n}\n```\n\n\n\n\n对应的处理器的适配器匹配到本身之后，将会触发适配器的处理方法，每个处理器都会实现一个对应的接口，他们大致都有一个共同的特点：\n```\npublic interface Handler {\n\n\tMono<Void> handle(ServerWebExchange exchange);\n\n}\n```\n每个适配器的处理方法中都会在穿插入适配逻辑代码之后调用处理器的``handle``方法，Spring Cloud Gateway的所有Handler都在```org.springframework.cloud.gateway.handler```包下：\n```\norg.springframework.cloud.gateway.handler.AsyncPredicate<T>\norg.springframework.cloud.gateway.handler.FilteringWebHandler\norg.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping\n```\n可以看到，上述三个处理器分别处理了Filter和Predicate，有兴趣的朋友可以去看一下这些类内部的具体实现，这里就不一一细说。\n\n总的来讲，Spring Cloud Gateway的原理是在服务加载期间读取自己的配置将信息存放在一个容器中，在Spring Mvc 处理请求的时候取出这些信息进行**逻辑判断**及**过滤**，根据不同的处理结果触发不同的事件！\n\n而请求转发这一块有兴趣的同学可以去研究一下！\n\n> TP: path的匹配其实也是一个Predicate逻辑判断\n\n## Spring Cloud Gateway 总结\n笔者偶然间看到spring-cloud-netflix的issue下的一个回答[传送门](https://github.com/spring-cloud/spring-cloud-netflix/issues/2951)：\n```\nLovnx：Zuul 2.0 has opened sourcing,Do you intend to integrate it in some next version?\nspencergibb：No. We created spring cloud gateway instead.\n```\n这才感觉到Spring Cloud果然霸气，也因此接触到了Spring Cloud Gateway，觉得很有必要学习一下，总体来讲，Spring Cloud Gateway简化了之前过滤器配置的复杂度，也在新的配置方式上增加了微服务的网关配置，可以直接代替掉Zuul，期待着Spring会整出自己的注册中心来。\n\n笔者学艺不精，以上阐述有误的地方，希望批评指出，联系方式：ainililia@163.com\n\n## 相关文档\n[官方文档](http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_glossary)\n[Spring Cloud Gateway 入门](http://ju.outofmemory.cn/entry/346688)\n[响应式编程之Reactor的关于Flux和Mono概念](https://blog.csdn.net/qq_28089993/article/details/79443447)","slug":"Spring-Cloud-Gateway深入探究","published":1,"updated":"2018-11-06T05:18:57.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzi00059ctpouylqcz8","content":"<h2 id=\"spring-cloud-gateway介绍\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway介绍\">¶</a>Spring Cloud Gateway介绍</h2>\n<p>废话不多说，看官方文档的介绍</p>\n<blockquote>\n<p>This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p>\n</blockquote>\n<p>有道翻译一下:</p>\n<p>这个项目提供了一个建在Spring生态系统之上的API网关，包括:Spring 5, Spring Boot 2和project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供交叉关注，例如:安全性、监视/度量和弹性。</p>\n<p>工作原理如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png\" alt=\"image\"></p>\n<p>Gateway实际上提供了一个在路由上的控制功能，大体包含两个大功能：</p>\n<ul>\n<li>Route</li>\n<li>Filter</li>\n<li>Forward</li>\n</ul>\n<p>我们可以通过Route去匹配请求的uri，而每个Router下可以配置一个Filter Chain，我们可以通过Filter去修饰请求和响应及一些类似鉴权等中间动作，通过Forward可以控制重定向和请求转发（实际上Filter也可以做到，只不过这里分开说清晰一点）。在路由控制上，Gateway表现的非常灵活，它有两种配置方式：</p>\n<ul>\n<li>Yml or Properties File</li>\n<li>Code</li>\n</ul>\n<p>主要名词如下：</p>\n<ul>\n<li><strong>Route</strong>: Route the basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates and a collection of filters. A route is matched if aggregate predicate is true.</li>\n<li><strong>Predicate</strong>: This is a Java 8 Function Predicate. The input type is a Spring Framework ServerWebExchange. This allows developers to match on anything from the HTTP request, such as headers or parameters.</li>\n<li><strong>Filter</strong>: These are instances Spring Framework GatewayFilter constructed in with a specific factory. Here, requests and responses can be modified before or after sending the downstream request.</li>\n</ul>\n<p>Route 作为Gateway中的基本元素，它有自己的ID、URI和一个Predicate集合、Filter集合。Predicate的作用是判断请求的Uri是否匹配当前的Route，Filter则是匹配通过之后对请求和响应的处理及修饰，那么在Gateway中Route基本结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gateway&#123;</span><br><span class=\"line\">    Route1 &#123;</span><br><span class=\"line\">        String id;</span><br><span class=\"line\">        String path;</span><br><span class=\"line\">        List&lt;Predicate&gt; predicates;</span><br><span class=\"line\">        List&lt;Filter&gt; filters;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    Route2 &#123;</span><br><span class=\"line\">        String id;</span><br><span class=\"line\">        String path;</span><br><span class=\"line\">        List&lt;Predicate&gt; predicates;</span><br><span class=\"line\">        List&lt;Filter&gt; filters;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Route中的ID作为它的唯一标识，path的作用是正则匹配请求路径，Predicate则是在path匹配的情况下进一步去更加细致的匹配请求路径，如一下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: before_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span><br></pre></td></tr></table></figure>\n<p>只匹配在<code>Jan 20, 2017 17:42</code> 发起的请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: cookie_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Cookie=chocolate, “”</span><br></pre></td></tr></table></figure>\n<p>只匹配请求中携带<code>chocolate</code>且值为<code>ch.p</code>的请求</p>\n<p>更多例子这里就不一一展开，有兴趣的可以去看下官方文档: <a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-request-predicates-factories\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h2 id=\"spring-cloud-gateway-配置\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-配置\">¶</a>Spring Cloud Gateway 配置</h2>\n<h4 id=\"maven\"><a class=\"header-anchor\" href=\"#maven\">¶</a>Maven</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencyManagement&gt;</span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-cloud-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;2.0.2.BUILD-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/dependencyManagement&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t    &lt;groupId&gt;org.yaml&lt;/groupId&gt;</span><br><span class=\"line\">\t\t    &lt;artifactId&gt;snakeyaml&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;repositories&gt;</span><br><span class=\"line\">\t\t&lt;repository&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;spring-snapshots&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;name&gt;Spring Snapshots&lt;/name&gt;</span><br><span class=\"line\">\t\t\t&lt;url&gt;https://repo.spring.io/libs-snapshot&lt;/url&gt;</span><br><span class=\"line\">\t\t\t&lt;snapshots&gt;</span><br><span class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">\t\t\t&lt;/snapshots&gt;</span><br><span class=\"line\">\t\t&lt;/repository&gt;</span><br><span class=\"line\">\t&lt;/repositories&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"yml\"><a class=\"header-anchor\" href=\"#yml\">¶</a>Yml</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: cookie_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Cookie=chocolate, ch.p</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-config\"><a class=\"header-anchor\" href=\"#java-config\">¶</a>Java Config</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\t\treturn builder.routes()</span><br><span class=\"line\">\t\t\t\t.route(r -&gt; r.path(&quot;/request/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t\t.predicate(new Predicate&lt;ServerWebExchange&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic boolean test(ServerWebExchange t) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tboolean access = t.getRequest().getCookies().get(&quot;_9755xjdesxxd_&quot;).get(0).getValue().equals(&quot;32&quot;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn access;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t\t.filters(f -&gt; f.stripPrefix(2)</span><br><span class=\"line\">\t\t\t\t\t\t\t.filter(new GatewayFilter() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpublic Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;, 2)</span><br><span class=\"line\">\t\t\t\t\t\t\t.filter(new GatewayFilter() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpublic Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;, 1))</span><br><span class=\"line\">\t\t\t\t\t\t.uri(&quot;http://localhost:8080/hello&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">\tpublic String hello() &#123;</span><br><span class=\"line\">\t\treturn &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Yml配置和Java代码配置可以共存，Yml配置的好处是可以直接用自带的一些谓词和Filter，而Java代码配置更加灵活！</p>\n<h2 id=\"spring-cloud-gateway使用\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway使用\">¶</a>Spring Cloud Gateway使用</h2>\n<p>上文已经说过，Gateway支持两种配置，本文主要以Java Config的方式着重讲解，因为官方文档中对于Yml配置的讲解已经足够深入，如有兴趣可以进入<a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-how-it-works\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"route\"><a class=\"header-anchor\" href=\"#route\">¶</a>Route</h4>\n<p>一个Route的配置可以足够简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class Application1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\t\treturn builder.routes()</span><br><span class=\"line\">\t\t\t\t.route(r -&gt; r.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.uri(&quot;http://localhost:8080/hello&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">\tpublic String hello() &#123;</span><br><span class=\"line\">\t\treturn &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application1.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述Demo定义了一个Route，并且path值为<code>/**</code>，意味着匹配多层uri，如果将path改为<code>/*</code>则意味着只能匹配一层。所以运行上面的程序，那么所有的请求都将被转发到<code>http://localhost:8080/hello</code></p>\n<p>如果uri的配置并没有一个确定的资源，例如<code>http://ip:port</code>，那么<code>/**</code>所匹配的路径将会自动拼装在uri之后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://当前服务/user/1</span><br><span class=\"line\">forward http://ip:port/user/1</span><br></pre></td></tr></table></figure>\n<p>这种方式更适合服务之间的转发，我们可以将uri设置为<code>ip:port</code>也可以设置为<code>xxx.com</code>域名，但是不能自己转发自己的服务，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://当前服务/user/1</span><br><span class=\"line\">forward http://当前服务/user/1</span><br></pre></td></tr></table></figure>\n<p>这就导致了HTTP 413的错误，无限转发至自己，也就意味着请求死锁，非常致命！最好的方式如下：</p>\n<p>我们拟定开两个服务占用的端口分别是<code>8080</code>和<code>8081</code>,我们假如要从<code>8080</code>服务通过<code>/user/**</code>路由匹配转发至<code>8081</code>服务，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工作跟踪：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://localhost:8080/user/hello</span><br><span class=\"line\">forward http://localhost:8081/user/hello</span><br></pre></td></tr></table></figure>\n<p>8081服务接口定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/user/hello&quot;)</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">\treturn &quot;User Say Hello&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reponse Body：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User Say Hello</span><br></pre></td></tr></table></figure>\n<p>当Gateway代替Zuul时，也就是说在服务间的通讯由Zuul转换成Gateway之后，uri的写法将会变成这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(r -&gt; r.path(&quot;user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;lb://USER_SERVER_NAME&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码将<code>user/**</code>所匹配的请求全部转发到<code>USER_SERVER_NAME</code>服务下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request /user/1</span><br><span class=\"line\">forward http://USER_SERVER_HOST:USER_SERVER_PORT/user/1</span><br></pre></td></tr></table></figure>\n<p>其中<strong>lb</strong>的含义其实是<code>load balance</code>的意思，我想开发者以lb来区分路由模式可能是负载均衡意味着多服务的环境，因此lb可以表示转发对象从指定的uri转变成了服务！</p>\n<h4 id=\"predicate\"><a class=\"header-anchor\" href=\"#predicate\">¶</a>Predicate</h4>\n<p>Predicate是Java 8+新出的一个库，本身作用是进行逻辑运算，支持种类如下：</p>\n<ul>\n<li>isEqual</li>\n<li>and</li>\n<li>negate</li>\n<li>or<br>\n另外还有一个方法<code>test(T)</code>用于触发逻辑计算返回一个Boolean类型值。</li>\n</ul>\n<p>Gateway使用Predicate来做除path pattern match之外的匹配判断，使用及其简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.predicate(e -&gt; e.getClass() != null)</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入的<strong>e</strong>代表着<code>ServerWebExchange</code>对象，我们可以通过<code>ServerWebExchange</code>获取所有请求相关的信息，例如Cookies和Headers。通过Lambda语法去编写判断逻辑，如果一个Route中所有的Predicate返回的结果都是TRUE则匹配成功，否则匹配失败。</p>\n<blockquote>\n<p>Tp：path和predicate需要使用and链接，也可以使用or链接，分别代表不同的逻辑运算！</p>\n</blockquote>\n<h4 id=\"filter\"><a class=\"header-anchor\" href=\"#filter\">¶</a>Filter</h4>\n<p>Filter的作用类似于Predicate，区别在于，Predicate可以做请求中断，Filter也可以做，Filter可以做Reponse的修饰，Predicate并做不到，也就是说Filter最为最后一道拦截，可以做的事情有很多，例如修改响应报文，增加个Header或者Cookie，甚至修改响应Body，相比之下，Filter更加全能！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.predicate(e -&gt; e.getClass() != null)</span><br><span class=\"line\">\t\t\t\t\t.filters(fn -&gt; fn.addResponseHeader(&quot;developer&quot;, &quot;Nico&quot;))</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"spring-cloud-gateway-工作原理\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-工作原理\">¶</a>Spring Cloud Gateway 工作原理</h2>\n<p>Gateway是基于Spring MVC之上的网关路由控制器，我们可以直接定位到Spring MVC的<code>org.springframework.web.reactive.DispatcherHandler</code>类，它的<code>handle</code>方法将会处理解析Request之后的<code>ServerWebExchange</code>对象。</p>\n<p>进入<code>handle</code>方法，将会使用Flux遍历<code>org.springframework.web.reactive.DispatcherHandler.handlerMappings</code>对<code>ServerWebExchange</code>进行处理,<code>handlerMappings</code>中包含着一下处理器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.reactive.function.server.support.RouterFunctionMapping@247a29b6, org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping@f6449f4, org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping@535c6b8b,</span><br><span class=\"line\">org.springframework.web.reactive.handler.SimpleUrlHandlerMapping@5633e9e</span><br></pre></td></tr></table></figure>\n<p>以上只是一个简单请求的处理器，Flux的<code>concatMap</code>方法会将每个处理器的Mono合并成一个Flux，然后调用<code>org.springframework.web.reactive.DispatcherHandler</code>类中的<code>invokeHandler</code>方法开始处理<code>ServerWebExchange</code>,处理完毕之后将紧接着处理返回值，这时使用<code>handleResult</code>方法，具体实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public Mono&lt;Void&gt; handle(ServerWebExchange exchange) &#123;</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tServerHttpRequest request = exchange.getRequest();</span><br><span class=\"line\">\t\tlogger.debug(&quot;Processing &quot; + request.getMethodValue() + &quot; request for [&quot; + request.getURI() + &quot;]&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (this.handlerMappings == null) &#123;</span><br><span class=\"line\">\t\treturn Mono.error(HANDLER_NOT_FOUND_EXCEPTION);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn Flux.fromIterable(this.handlerMappings)</span><br><span class=\"line\">\t\t\t.concatMap(mapping -&gt; mapping.getHandler(exchange))</span><br><span class=\"line\">\t\t\t.next()</span><br><span class=\"line\">\t\t\t.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))</span><br><span class=\"line\">\t\t\t.flatMap(handler -&gt; invokeHandler(exchange, handler))</span><br><span class=\"line\">\t\t\t.flatMap(result -&gt; handleResult(exchange, result));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Gateway起作用的关键在于<code>invokeHandler</code>方法中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Mono&lt;HandlerResult&gt; invokeHandler(ServerWebExchange exchange, Object handler) &#123;</span><br><span class=\"line\">\tif (this.handlerAdapters != null) &#123;</span><br><span class=\"line\">\t\tfor (HandlerAdapter handlerAdapter : this.handlerAdapters) &#123;</span><br><span class=\"line\">\t\t\tif (handlerAdapter.supports(handler)) &#123;</span><br><span class=\"line\">\t\t\t\treturn handlerAdapter.handle(exchange, handler);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn Mono.error(new IllegalStateException(&quot;No HandlerAdapter: &quot; + handler));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的处理器的适配器匹配到本身之后，将会触发适配器的处理方法，每个处理器都会实现一个对应的接口，他们大致都有一个共同的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Handler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMono&lt;Void&gt; handle(ServerWebExchange exchange);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个适配器的处理方法中都会在穿插入适配逻辑代码之后调用处理器的<code>handle</code>方法，Spring Cloud Gateway的所有Handler都在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.AsyncPredicate&lt;T&gt;</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.FilteringWebHandler</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，上述三个处理器分别处理了Filter和Predicate，有兴趣的朋友可以去看一下这些类内部的具体实现，这里就不一一细说。</p>\n<p>总的来讲，Spring Cloud Gateway的原理是在服务加载期间读取自己的配置将信息存放在一个容器中，在Spring Mvc 处理请求的时候取出这些信息进行<strong>逻辑判断</strong>及<strong>过滤</strong>，根据不同的处理结果触发不同的事件！</p>\n<p>而请求转发这一块有兴趣的同学可以去研究一下！</p>\n<blockquote>\n<p>TP: path的匹配其实也是一个Predicate逻辑判断</p>\n</blockquote>\n<h2 id=\"spring-cloud-gateway-总结\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-总结\">¶</a>Spring Cloud Gateway 总结</h2>\n<p>笔者偶然间看到spring-cloud-netflix的issue下的一个回答<a href=\"https://github.com/spring-cloud/spring-cloud-netflix/issues/2951\" target=\"_blank\" rel=\"noopener\">传送门</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lovnx：Zuul 2.0 has opened sourcing,Do you intend to integrate it in some next version?</span><br><span class=\"line\">spencergibb：No. We created spring cloud gateway instead.</span><br></pre></td></tr></table></figure>\n<p>这才感觉到Spring Cloud果然霸气，也因此接触到了Spring Cloud Gateway，觉得很有必要学习一下，总体来讲，Spring Cloud Gateway简化了之前过滤器配置的复杂度，也在新的配置方式上增加了微服务的网关配置，可以直接代替掉Zuul，期待着Spring会整出自己的注册中心来。</p>\n<p>笔者学艺不精，以上阐述有误的地方，希望批评指出，联系方式：ainililia@163.com</p>\n<h2 id=\"相关文档\"><a class=\"header-anchor\" href=\"#相关文档\">¶</a>相关文档</h2>\n<p><a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_glossary\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>\n<a href=\"http://ju.outofmemory.cn/entry/346688\" target=\"_blank\" rel=\"noopener\">Spring Cloud Gateway 入门</a><br>\n<a href=\"https://blog.csdn.net/qq_28089993/article/details/79443447\" target=\"_blank\" rel=\"noopener\">响应式编程之Reactor的关于Flux和Mono概念</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"spring-cloud-gateway介绍\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway介绍\">¶</a>Spring Cloud Gateway介绍</h2>\n<p>废话不多说，看官方文档的介绍</p>\n<blockquote>\n<p>This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p>\n</blockquote>\n<p>有道翻译一下:</p>\n<p>这个项目提供了一个建在Spring生态系统之上的API网关，包括:Spring 5, Spring Boot 2和project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供交叉关注，例如:安全性、监视/度量和弹性。</p>\n<p>工作原理如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png\" alt=\"image\"></p>\n<p>Gateway实际上提供了一个在路由上的控制功能，大体包含两个大功能：</p>\n<ul>\n<li>Route</li>\n<li>Filter</li>\n<li>Forward</li>\n</ul>\n<p>我们可以通过Route去匹配请求的uri，而每个Router下可以配置一个Filter Chain，我们可以通过Filter去修饰请求和响应及一些类似鉴权等中间动作，通过Forward可以控制重定向和请求转发（实际上Filter也可以做到，只不过这里分开说清晰一点）。在路由控制上，Gateway表现的非常灵活，它有两种配置方式：</p>\n<ul>\n<li>Yml or Properties File</li>\n<li>Code</li>\n</ul>\n<p>主要名词如下：</p>\n<ul>\n<li><strong>Route</strong>: Route the basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates and a collection of filters. A route is matched if aggregate predicate is true.</li>\n<li><strong>Predicate</strong>: This is a Java 8 Function Predicate. The input type is a Spring Framework ServerWebExchange. This allows developers to match on anything from the HTTP request, such as headers or parameters.</li>\n<li><strong>Filter</strong>: These are instances Spring Framework GatewayFilter constructed in with a specific factory. Here, requests and responses can be modified before or after sending the downstream request.</li>\n</ul>\n<p>Route 作为Gateway中的基本元素，它有自己的ID、URI和一个Predicate集合、Filter集合。Predicate的作用是判断请求的Uri是否匹配当前的Route，Filter则是匹配通过之后对请求和响应的处理及修饰，那么在Gateway中Route基本结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gateway&#123;</span><br><span class=\"line\">    Route1 &#123;</span><br><span class=\"line\">        String id;</span><br><span class=\"line\">        String path;</span><br><span class=\"line\">        List&lt;Predicate&gt; predicates;</span><br><span class=\"line\">        List&lt;Filter&gt; filters;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    Route2 &#123;</span><br><span class=\"line\">        String id;</span><br><span class=\"line\">        String path;</span><br><span class=\"line\">        List&lt;Predicate&gt; predicates;</span><br><span class=\"line\">        List&lt;Filter&gt; filters;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Route中的ID作为它的唯一标识，path的作用是正则匹配请求路径，Predicate则是在path匹配的情况下进一步去更加细致的匹配请求路径，如一下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: before_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span><br></pre></td></tr></table></figure>\n<p>只匹配在<code>Jan 20, 2017 17:42</code> 发起的请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: cookie_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Cookie=chocolate, “”</span><br></pre></td></tr></table></figure>\n<p>只匹配请求中携带<code>chocolate</code>且值为<code>ch.p</code>的请求</p>\n<p>更多例子这里就不一一展开，有兴趣的可以去看下官方文档: <a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-request-predicates-factories\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h2 id=\"spring-cloud-gateway-配置\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-配置\">¶</a>Spring Cloud Gateway 配置</h2>\n<h4 id=\"maven\"><a class=\"header-anchor\" href=\"#maven\">¶</a>Maven</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencyManagement&gt;</span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-cloud-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;2.0.2.BUILD-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/dependencyManagement&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t    &lt;groupId&gt;org.yaml&lt;/groupId&gt;</span><br><span class=\"line\">\t\t    &lt;artifactId&gt;snakeyaml&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;repositories&gt;</span><br><span class=\"line\">\t\t&lt;repository&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;spring-snapshots&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;name&gt;Spring Snapshots&lt;/name&gt;</span><br><span class=\"line\">\t\t\t&lt;url&gt;https://repo.spring.io/libs-snapshot&lt;/url&gt;</span><br><span class=\"line\">\t\t\t&lt;snapshots&gt;</span><br><span class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">\t\t\t&lt;/snapshots&gt;</span><br><span class=\"line\">\t\t&lt;/repository&gt;</span><br><span class=\"line\">\t&lt;/repositories&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"yml\"><a class=\"header-anchor\" href=\"#yml\">¶</a>Yml</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - id: cookie_route</span><br><span class=\"line\">        uri: http://example.org</span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">        - Cookie=chocolate, ch.p</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-config\"><a class=\"header-anchor\" href=\"#java-config\">¶</a>Java Config</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\t\treturn builder.routes()</span><br><span class=\"line\">\t\t\t\t.route(r -&gt; r.path(&quot;/request/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t\t.predicate(new Predicate&lt;ServerWebExchange&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic boolean test(ServerWebExchange t) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tboolean access = t.getRequest().getCookies().get(&quot;_9755xjdesxxd_&quot;).get(0).getValue().equals(&quot;32&quot;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn access;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t\t.filters(f -&gt; f.stripPrefix(2)</span><br><span class=\"line\">\t\t\t\t\t\t\t.filter(new GatewayFilter() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpublic Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;, 2)</span><br><span class=\"line\">\t\t\t\t\t\t\t.filter(new GatewayFilter() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpublic Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\treturn chain.filter(exchange);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;, 1))</span><br><span class=\"line\">\t\t\t\t\t\t.uri(&quot;http://localhost:8080/hello&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">\tpublic String hello() &#123;</span><br><span class=\"line\">\t\treturn &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Yml配置和Java代码配置可以共存，Yml配置的好处是可以直接用自带的一些谓词和Filter，而Java代码配置更加灵活！</p>\n<h2 id=\"spring-cloud-gateway使用\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway使用\">¶</a>Spring Cloud Gateway使用</h2>\n<p>上文已经说过，Gateway支持两种配置，本文主要以Java Config的方式着重讲解，因为官方文档中对于Yml配置的讲解已经足够深入，如有兴趣可以进入<a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#gateway-how-it-works\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"route\"><a class=\"header-anchor\" href=\"#route\">¶</a>Route</h4>\n<p>一个Route的配置可以足够简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class Application1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\t\treturn builder.routes()</span><br><span class=\"line\">\t\t\t\t.route(r -&gt; r.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.uri(&quot;http://localhost:8080/hello&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">\tpublic String hello() &#123;</span><br><span class=\"line\">\t\treturn &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application1.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述Demo定义了一个Route，并且path值为<code>/**</code>，意味着匹配多层uri，如果将path改为<code>/*</code>则意味着只能匹配一层。所以运行上面的程序，那么所有的请求都将被转发到<code>http://localhost:8080/hello</code></p>\n<p>如果uri的配置并没有一个确定的资源，例如<code>http://ip:port</code>，那么<code>/**</code>所匹配的路径将会自动拼装在uri之后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://当前服务/user/1</span><br><span class=\"line\">forward http://ip:port/user/1</span><br></pre></td></tr></table></figure>\n<p>这种方式更适合服务之间的转发，我们可以将uri设置为<code>ip:port</code>也可以设置为<code>xxx.com</code>域名，但是不能自己转发自己的服务，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://当前服务/user/1</span><br><span class=\"line\">forward http://当前服务/user/1</span><br></pre></td></tr></table></figure>\n<p>这就导致了HTTP 413的错误，无限转发至自己，也就意味着请求死锁，非常致命！最好的方式如下：</p>\n<p>我们拟定开两个服务占用的端口分别是<code>8080</code>和<code>8081</code>,我们假如要从<code>8080</code>服务通过<code>/user/**</code>路由匹配转发至<code>8081</code>服务，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工作跟踪：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request http://localhost:8080/user/hello</span><br><span class=\"line\">forward http://localhost:8081/user/hello</span><br></pre></td></tr></table></figure>\n<p>8081服务接口定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/user/hello&quot;)</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">\treturn &quot;User Say Hello&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reponse Body：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User Say Hello</span><br></pre></td></tr></table></figure>\n<p>当Gateway代替Zuul时，也就是说在服务间的通讯由Zuul转换成Gateway之后，uri的写法将会变成这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(r -&gt; r.path(&quot;user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;lb://USER_SERVER_NAME&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码将<code>user/**</code>所匹配的请求全部转发到<code>USER_SERVER_NAME</code>服务下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request /user/1</span><br><span class=\"line\">forward http://USER_SERVER_HOST:USER_SERVER_PORT/user/1</span><br></pre></td></tr></table></figure>\n<p>其中<strong>lb</strong>的含义其实是<code>load balance</code>的意思，我想开发者以lb来区分路由模式可能是负载均衡意味着多服务的环境，因此lb可以表示转发对象从指定的uri转变成了服务！</p>\n<h4 id=\"predicate\"><a class=\"header-anchor\" href=\"#predicate\">¶</a>Predicate</h4>\n<p>Predicate是Java 8+新出的一个库，本身作用是进行逻辑运算，支持种类如下：</p>\n<ul>\n<li>isEqual</li>\n<li>and</li>\n<li>negate</li>\n<li>or<br>\n另外还有一个方法<code>test(T)</code>用于触发逻辑计算返回一个Boolean类型值。</li>\n</ul>\n<p>Gateway使用Predicate来做除path pattern match之外的匹配判断，使用及其简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.predicate(e -&gt; e.getClass() != null)</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入的<strong>e</strong>代表着<code>ServerWebExchange</code>对象，我们可以通过<code>ServerWebExchange</code>获取所有请求相关的信息，例如Cookies和Headers。通过Lambda语法去编写判断逻辑，如果一个Route中所有的Predicate返回的结果都是TRUE则匹配成功，否则匹配失败。</p>\n<blockquote>\n<p>Tp：path和predicate需要使用and链接，也可以使用or链接，分别代表不同的逻辑运算！</p>\n</blockquote>\n<h4 id=\"filter\"><a class=\"header-anchor\" href=\"#filter\">¶</a>Filter</h4>\n<p>Filter的作用类似于Predicate，区别在于，Predicate可以做请求中断，Filter也可以做，Filter可以做Reponse的修饰，Predicate并做不到，也就是说Filter最为最后一道拦截，可以做的事情有很多，例如修改响应报文，增加个Header或者Cookie，甚至修改响应Body，相比之下，Filter更加全能！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RouteLocator customRouteLocator(RouteLocatorBuilder builder) &#123;</span><br><span class=\"line\">\treturn builder.routes()</span><br><span class=\"line\">\t\t\t.route(&quot;hello&quot;, r -&gt; r</span><br><span class=\"line\">\t\t\t\t\t.path(&quot;/user/**&quot;)</span><br><span class=\"line\">\t\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t\t\t.predicate(e -&gt; e.getClass() != null)</span><br><span class=\"line\">\t\t\t\t\t.filters(fn -&gt; fn.addResponseHeader(&quot;developer&quot;, &quot;Nico&quot;))</span><br><span class=\"line\">\t\t\t\t\t.uri(&quot;http://localhost:8081&quot;)</span><br><span class=\"line\">\t\t\t\t\t).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"spring-cloud-gateway-工作原理\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-工作原理\">¶</a>Spring Cloud Gateway 工作原理</h2>\n<p>Gateway是基于Spring MVC之上的网关路由控制器，我们可以直接定位到Spring MVC的<code>org.springframework.web.reactive.DispatcherHandler</code>类，它的<code>handle</code>方法将会处理解析Request之后的<code>ServerWebExchange</code>对象。</p>\n<p>进入<code>handle</code>方法，将会使用Flux遍历<code>org.springframework.web.reactive.DispatcherHandler.handlerMappings</code>对<code>ServerWebExchange</code>进行处理,<code>handlerMappings</code>中包含着一下处理器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.reactive.function.server.support.RouterFunctionMapping@247a29b6, org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping@f6449f4, org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping@535c6b8b,</span><br><span class=\"line\">org.springframework.web.reactive.handler.SimpleUrlHandlerMapping@5633e9e</span><br></pre></td></tr></table></figure>\n<p>以上只是一个简单请求的处理器，Flux的<code>concatMap</code>方法会将每个处理器的Mono合并成一个Flux，然后调用<code>org.springframework.web.reactive.DispatcherHandler</code>类中的<code>invokeHandler</code>方法开始处理<code>ServerWebExchange</code>,处理完毕之后将紧接着处理返回值，这时使用<code>handleResult</code>方法，具体实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public Mono&lt;Void&gt; handle(ServerWebExchange exchange) &#123;</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tServerHttpRequest request = exchange.getRequest();</span><br><span class=\"line\">\t\tlogger.debug(&quot;Processing &quot; + request.getMethodValue() + &quot; request for [&quot; + request.getURI() + &quot;]&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (this.handlerMappings == null) &#123;</span><br><span class=\"line\">\t\treturn Mono.error(HANDLER_NOT_FOUND_EXCEPTION);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn Flux.fromIterable(this.handlerMappings)</span><br><span class=\"line\">\t\t\t.concatMap(mapping -&gt; mapping.getHandler(exchange))</span><br><span class=\"line\">\t\t\t.next()</span><br><span class=\"line\">\t\t\t.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))</span><br><span class=\"line\">\t\t\t.flatMap(handler -&gt; invokeHandler(exchange, handler))</span><br><span class=\"line\">\t\t\t.flatMap(result -&gt; handleResult(exchange, result));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Gateway起作用的关键在于<code>invokeHandler</code>方法中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Mono&lt;HandlerResult&gt; invokeHandler(ServerWebExchange exchange, Object handler) &#123;</span><br><span class=\"line\">\tif (this.handlerAdapters != null) &#123;</span><br><span class=\"line\">\t\tfor (HandlerAdapter handlerAdapter : this.handlerAdapters) &#123;</span><br><span class=\"line\">\t\t\tif (handlerAdapter.supports(handler)) &#123;</span><br><span class=\"line\">\t\t\t\treturn handlerAdapter.handle(exchange, handler);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn Mono.error(new IllegalStateException(&quot;No HandlerAdapter: &quot; + handler));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的处理器的适配器匹配到本身之后，将会触发适配器的处理方法，每个处理器都会实现一个对应的接口，他们大致都有一个共同的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Handler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMono&lt;Void&gt; handle(ServerWebExchange exchange);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个适配器的处理方法中都会在穿插入适配逻辑代码之后调用处理器的<code>handle</code>方法，Spring Cloud Gateway的所有Handler都在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.AsyncPredicate&lt;T&gt;</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.FilteringWebHandler</span><br><span class=\"line\">org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，上述三个处理器分别处理了Filter和Predicate，有兴趣的朋友可以去看一下这些类内部的具体实现，这里就不一一细说。</p>\n<p>总的来讲，Spring Cloud Gateway的原理是在服务加载期间读取自己的配置将信息存放在一个容器中，在Spring Mvc 处理请求的时候取出这些信息进行<strong>逻辑判断</strong>及<strong>过滤</strong>，根据不同的处理结果触发不同的事件！</p>\n<p>而请求转发这一块有兴趣的同学可以去研究一下！</p>\n<blockquote>\n<p>TP: path的匹配其实也是一个Predicate逻辑判断</p>\n</blockquote>\n<h2 id=\"spring-cloud-gateway-总结\"><a class=\"header-anchor\" href=\"#spring-cloud-gateway-总结\">¶</a>Spring Cloud Gateway 总结</h2>\n<p>笔者偶然间看到spring-cloud-netflix的issue下的一个回答<a href=\"https://github.com/spring-cloud/spring-cloud-netflix/issues/2951\" target=\"_blank\" rel=\"noopener\">传送门</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lovnx：Zuul 2.0 has opened sourcing,Do you intend to integrate it in some next version?</span><br><span class=\"line\">spencergibb：No. We created spring cloud gateway instead.</span><br></pre></td></tr></table></figure>\n<p>这才感觉到Spring Cloud果然霸气，也因此接触到了Spring Cloud Gateway，觉得很有必要学习一下，总体来讲，Spring Cloud Gateway简化了之前过滤器配置的复杂度，也在新的配置方式上增加了微服务的网关配置，可以直接代替掉Zuul，期待着Spring会整出自己的注册中心来。</p>\n<p>笔者学艺不精，以上阐述有误的地方，希望批评指出，联系方式：ainililia@163.com</p>\n<h2 id=\"相关文档\"><a class=\"header-anchor\" href=\"#相关文档\">¶</a>相关文档</h2>\n<p><a href=\"http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_glossary\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>\n<a href=\"http://ju.outofmemory.cn/entry/346688\" target=\"_blank\" rel=\"noopener\">Spring Cloud Gateway 入门</a><br>\n<a href=\"https://blog.csdn.net/qq_28089993/article/details/79443447\" target=\"_blank\" rel=\"noopener\">响应式编程之Reactor的关于Flux和Mono概念</a></p>\n"},{"title":"使用Arthas监控Java进程","author":"Nico","date":"2018-11-06T04:41:00.000Z","_content":"## 一、Arthas简介\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。\n\n当你遇到以下类似问题而束手无策时，`Arthas`可以帮助你解决：\n\n0. 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n0. 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n0. 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n0. 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n0. 是否有一个全局视角来查看系统的运行状况？\n0. 有什么办法可以监控到JVM的实时运行状态？\n\n`Arthas`采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n使用说明可以看下官方的文档[https://alibaba.github.io/arthas/](https://alibaba.github.io/arthas/)\n\n## 二、安装及使用\n以下通过CentOS系统举例来安装Arthas\n#### 1.安装Java环境\n首先去Oracle下载JDK，可以通过``wget``或者``curl -O``来下载到Linux主机上。\n\n最方便的就是下载一个tar.gz格式的压缩包，然后通过``tar -zxf``解压，以下是笔者最终存放jdk的物理路径\n```\n[nico@VM_0_17_centos jdk1.8.0_181]$ pwd\n/usr/lib/java-1.8.0/jdk1.8.0_181\n```\n\n接下来配置环境变量，通过``vim /etc/profile``进入编辑操作，并增加以下配置\n```\nexport JAVA_HOME=/usr/lib/java-1.8.0/jdk1.8.0_181\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=$JAVA_HOME/lib/\nexport PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH\n```\n退出并保存，通过执行``source /etc/profile``立即生效\n\n然后分别执行``java``和``javac``验证环境是否生效\n#### 2.安装Arthas\nArthas非常小巧，官方有一个可直接执行的sh脚本供我们使用，可以通过以下指令下载\n```\ncurl -L https://alibaba.github.io/arthas/install.sh | sh\n```\n启动Arthas\n```\n./as.sh\n```\n#### 3.安装ElasticSearch\nArthas启动需要存在至少一个及以上的Java进程，这里我们为了方便测试，直接安装ElasticSearch。\n\n和安装JDK的方式类似，我们去官方下载一个``tar.gz``的压缩包，然后解压\n```\n[nico@VM_0_17_centos elasticsearch]$ ll\ntotal 95612\ndrwxr-xr-x 9 nico root     4096 Sep 19 09:03 elasticsearch-6.4.0\n-rw-r--r-- 1 nico root 97901357 Aug 23 23:21 elasticsearch-6.4.0.tar.gz\n```\nElasticSearch的不允许**root**用户启动，所以笔者用的是**nico**账号，创建账号过程如下\n```\nadduser nico\npasswd nico\n#输入密码\n#将as.sh和elasticsearch的目录权限赋予nico账户\nchown nico as.sh\nchown -R nico elasticsearch\nsu nico\n```\n以上指令请分开到对应的目录执行，执行完毕之后我们进入elasticsearch目录下的bin目录中，启动elasticsearch\n```\n./elasticsearch\n```\n#### 4.使用Arthas监控ElasticSearch\n进入``as.sh``所在目录，启动Arthas\n```\n./as.sh\n```\n```\n[nico@VM_0_17_centos arthas]$ ./as.sh\nArthas script version: 3.0.4\nFound existing java process, please choose one and hit RETURN.\n* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch\n```\n我们看到，当前只有ElasticSearch一个进程，输入1监控ElasticSearch\n```\n[nico@VM_0_17_centos arthas]$ ./as.sh\nArthas script version: 3.0.4\nFound existing java process, please choose one and hit RETURN.\n* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch\n1\nCalculating attach execution time...\nAttaching to 19670 using version 3.0.4...\n\nreal\t0m0.227s\nuser\t0m0.177s\nsys\t0m0.035s\nAttach success.\nConnecting to arthas server... current timestamp is 1537320967\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           \n /  O  \\ |  .--. ''--.  .--'|  '--'  | /  O  \\ '   .-'                          \n|  .-.  ||  '--'.'   |  |   |  .--.  ||  .-.  |`.  `-.                          \n|  | |  ||  |\\  \\    |  |   |  |  |  ||  | |  |.-'    |                         \n`--' `--'`--' '--'   `--'   `--'  `--'`--' `--'`-----'                          \n                                                                                \n\nwiki: https://alibaba.github.io/arthas\nversion: 3.0.4\npid: 19670\ntimestamp: 1537320967728\n\n$ \n```\n启动成功，Arthas提供一个shell的操作模式来供我们去监控Java进程，具体指令可以看下官方的[Wiki](https://alibaba.github.io/arthas/quick-start.html)\n#### 5.安装过程可能遇到的问题\n(1)遇到报错``java.security.AccessControlException: Access Denied ``\n\n官方解决办法\n```\nAdd the permission in client.policy (for the application client), or in server.policy (for EJB/web modules) for the application that needs to set the property. By default, applications only have “read” permission for properties.\n\nFor example, to grant read/write permission for all the files in the codebase directory, add or append the following to client.policy or server.policy:\n\ngrant codeBase \"file:/.../build/sparc_SunOS/sec/-\" {\n   permission java.util.PropertyPermission \"*\", \"read,write\";\n };\n```\njava.policy所在的目录为JDK所在目录下的相对目录``jre/lib/security``\n```\nvim java.policy\n```\n尾部增加一行即可\n```\npermission java.security.AllPermission;\n```","source":"_posts/hello-world.md","raw":"title: 使用Arthas监控Java进程\ntags: []\ncategories:\n  - DevOps\nauthor: Nico\ndate: 2018-11-06 12:41:00\n---\n## 一、Arthas简介\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。\n\n当你遇到以下类似问题而束手无策时，`Arthas`可以帮助你解决：\n\n0. 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n0. 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n0. 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n0. 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n0. 是否有一个全局视角来查看系统的运行状况？\n0. 有什么办法可以监控到JVM的实时运行状态？\n\n`Arthas`采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n使用说明可以看下官方的文档[https://alibaba.github.io/arthas/](https://alibaba.github.io/arthas/)\n\n## 二、安装及使用\n以下通过CentOS系统举例来安装Arthas\n#### 1.安装Java环境\n首先去Oracle下载JDK，可以通过``wget``或者``curl -O``来下载到Linux主机上。\n\n最方便的就是下载一个tar.gz格式的压缩包，然后通过``tar -zxf``解压，以下是笔者最终存放jdk的物理路径\n```\n[nico@VM_0_17_centos jdk1.8.0_181]$ pwd\n/usr/lib/java-1.8.0/jdk1.8.0_181\n```\n\n接下来配置环境变量，通过``vim /etc/profile``进入编辑操作，并增加以下配置\n```\nexport JAVA_HOME=/usr/lib/java-1.8.0/jdk1.8.0_181\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=$JAVA_HOME/lib/\nexport PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH\n```\n退出并保存，通过执行``source /etc/profile``立即生效\n\n然后分别执行``java``和``javac``验证环境是否生效\n#### 2.安装Arthas\nArthas非常小巧，官方有一个可直接执行的sh脚本供我们使用，可以通过以下指令下载\n```\ncurl -L https://alibaba.github.io/arthas/install.sh | sh\n```\n启动Arthas\n```\n./as.sh\n```\n#### 3.安装ElasticSearch\nArthas启动需要存在至少一个及以上的Java进程，这里我们为了方便测试，直接安装ElasticSearch。\n\n和安装JDK的方式类似，我们去官方下载一个``tar.gz``的压缩包，然后解压\n```\n[nico@VM_0_17_centos elasticsearch]$ ll\ntotal 95612\ndrwxr-xr-x 9 nico root     4096 Sep 19 09:03 elasticsearch-6.4.0\n-rw-r--r-- 1 nico root 97901357 Aug 23 23:21 elasticsearch-6.4.0.tar.gz\n```\nElasticSearch的不允许**root**用户启动，所以笔者用的是**nico**账号，创建账号过程如下\n```\nadduser nico\npasswd nico\n#输入密码\n#将as.sh和elasticsearch的目录权限赋予nico账户\nchown nico as.sh\nchown -R nico elasticsearch\nsu nico\n```\n以上指令请分开到对应的目录执行，执行完毕之后我们进入elasticsearch目录下的bin目录中，启动elasticsearch\n```\n./elasticsearch\n```\n#### 4.使用Arthas监控ElasticSearch\n进入``as.sh``所在目录，启动Arthas\n```\n./as.sh\n```\n```\n[nico@VM_0_17_centos arthas]$ ./as.sh\nArthas script version: 3.0.4\nFound existing java process, please choose one and hit RETURN.\n* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch\n```\n我们看到，当前只有ElasticSearch一个进程，输入1监控ElasticSearch\n```\n[nico@VM_0_17_centos arthas]$ ./as.sh\nArthas script version: 3.0.4\nFound existing java process, please choose one and hit RETURN.\n* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch\n1\nCalculating attach execution time...\nAttaching to 19670 using version 3.0.4...\n\nreal\t0m0.227s\nuser\t0m0.177s\nsys\t0m0.035s\nAttach success.\nConnecting to arthas server... current timestamp is 1537320967\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           \n /  O  \\ |  .--. ''--.  .--'|  '--'  | /  O  \\ '   .-'                          \n|  .-.  ||  '--'.'   |  |   |  .--.  ||  .-.  |`.  `-.                          \n|  | |  ||  |\\  \\    |  |   |  |  |  ||  | |  |.-'    |                         \n`--' `--'`--' '--'   `--'   `--'  `--'`--' `--'`-----'                          \n                                                                                \n\nwiki: https://alibaba.github.io/arthas\nversion: 3.0.4\npid: 19670\ntimestamp: 1537320967728\n\n$ \n```\n启动成功，Arthas提供一个shell的操作模式来供我们去监控Java进程，具体指令可以看下官方的[Wiki](https://alibaba.github.io/arthas/quick-start.html)\n#### 5.安装过程可能遇到的问题\n(1)遇到报错``java.security.AccessControlException: Access Denied ``\n\n官方解决办法\n```\nAdd the permission in client.policy (for the application client), or in server.policy (for EJB/web modules) for the application that needs to set the property. By default, applications only have “read” permission for properties.\n\nFor example, to grant read/write permission for all the files in the codebase directory, add or append the following to client.policy or server.policy:\n\ngrant codeBase \"file:/.../build/sparc_SunOS/sec/-\" {\n   permission java.util.PropertyPermission \"*\", \"read,write\";\n };\n```\njava.policy所在的目录为JDK所在目录下的相对目录``jre/lib/security``\n```\nvim java.policy\n```\n尾部增加一行即可\n```\npermission java.security.AllPermission;\n```","slug":"hello-world","published":1,"updated":"2018-11-06T05:23:08.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzk00079ctp7f7m4u6f","content":"<h2 id=\"一-arthas简介\"><a class=\"header-anchor\" href=\"#一-arthas简介\">¶</a>一、Arthas简介</h2>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>\n<p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p>\n<ol start=\"0\">\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n</ol>\n<p><code>Arthas</code>采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>使用说明可以看下官方的文档<a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\" rel=\"noopener\">https://alibaba.github.io/arthas/</a></p>\n<h2 id=\"二-安装及使用\"><a class=\"header-anchor\" href=\"#二-安装及使用\">¶</a>二、安装及使用</h2>\n<p>以下通过CentOS系统举例来安装Arthas</p>\n<h4 id=\"1-安装java环境\"><a class=\"header-anchor\" href=\"#1-安装java环境\">¶</a>1.安装Java环境</h4>\n<p>首先去Oracle下载JDK，可以通过<code>wget</code>或者<code>curl -O</code>来下载到Linux主机上。</p>\n<p>最方便的就是下载一个tar.gz格式的压缩包，然后通过<code>tar -zxf</code>解压，以下是笔者最终存放jdk的物理路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos jdk1.8.0_181]$ pwd</span><br><span class=\"line\">/usr/lib/java-1.8.0/jdk1.8.0_181</span><br></pre></td></tr></table></figure>\n<p>接下来配置环境变量，通过<code>vim /etc/profile</code>进入编辑操作，并增加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/java-1.8.0/jdk1.8.0_181</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">export CLASSPATH=$JAVA_HOME/lib/</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>退出并保存，通过执行<code>source /etc/profile</code>立即生效</p>\n<p>然后分别执行<code>java</code>和<code>javac</code>验证环境是否生效</p>\n<h4 id=\"2-安装arthas\"><a class=\"header-anchor\" href=\"#2-安装arthas\">¶</a>2.安装Arthas</h4>\n<p>Arthas非常小巧，官方有一个可直接执行的sh脚本供我们使用，可以通过以下指令下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://alibaba.github.io/arthas/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>启动Arthas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./as.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-安装elasticsearch\"><a class=\"header-anchor\" href=\"#3-安装elasticsearch\">¶</a>3.安装ElasticSearch</h4>\n<p>Arthas启动需要存在至少一个及以上的Java进程，这里我们为了方便测试，直接安装ElasticSearch。</p>\n<p>和安装JDK的方式类似，我们去官方下载一个<code>tar.gz</code>的压缩包，然后解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos elasticsearch]$ ll</span><br><span class=\"line\">total 95612</span><br><span class=\"line\">drwxr-xr-x 9 nico root     4096 Sep 19 09:03 elasticsearch-6.4.0</span><br><span class=\"line\">-rw-r--r-- 1 nico root 97901357 Aug 23 23:21 elasticsearch-6.4.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>ElasticSearch的不允许<strong>root</strong>用户启动，所以笔者用的是<strong>nico</strong>账号，创建账号过程如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser nico</span><br><span class=\"line\">passwd nico</span><br><span class=\"line\">#输入密码</span><br><span class=\"line\">#将as.sh和elasticsearch的目录权限赋予nico账户</span><br><span class=\"line\">chown nico as.sh</span><br><span class=\"line\">chown -R nico elasticsearch</span><br><span class=\"line\">su nico</span><br></pre></td></tr></table></figure>\n<p>以上指令请分开到对应的目录执行，执行完毕之后我们进入elasticsearch目录下的bin目录中，启动elasticsearch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./elasticsearch</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用arthas监控elasticsearch\"><a class=\"header-anchor\" href=\"#4-使用arthas监控elasticsearch\">¶</a>4.使用Arthas监控ElasticSearch</h4>\n<p>进入<code>as.sh</code>所在目录，启动Arthas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./as.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos arthas]$ ./as.sh</span><br><span class=\"line\">Arthas script version: 3.0.4</span><br><span class=\"line\">Found existing java process, please choose one and hit RETURN.</span><br><span class=\"line\">* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch</span><br></pre></td></tr></table></figure>\n<p>我们看到，当前只有ElasticSearch一个进程，输入1监控ElasticSearch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos arthas]$ ./as.sh</span><br><span class=\"line\">Arthas script version: 3.0.4</span><br><span class=\"line\">Found existing java process, please choose one and hit RETURN.</span><br><span class=\"line\">* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class=\"line\">1</span><br><span class=\"line\">Calculating attach execution time...</span><br><span class=\"line\">Attaching to 19670 using version 3.0.4...</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m0.227s</span><br><span class=\"line\">user\t0m0.177s</span><br><span class=\"line\">sys\t0m0.035s</span><br><span class=\"line\">Attach success.</span><br><span class=\"line\">Connecting to arthas server... current timestamp is 1537320967</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to 127.0.0.1.</span><br><span class=\"line\">Escape character is &apos;^]&apos;.</span><br><span class=\"line\">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class=\"line\"> /  O  \\ |  .--. &apos;&apos;--.  .--&apos;|  &apos;--&apos;  | /  O  \\ &apos;   .-&apos;                          </span><br><span class=\"line\">|  .-.  ||  &apos;--&apos;.&apos;   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class=\"line\">|  | |  ||  |\\  \\    |  |   |  |  |  ||  | |  |.-&apos;    |                         </span><br><span class=\"line\">`--&apos; `--&apos;`--&apos; &apos;--&apos;   `--&apos;   `--&apos;  `--&apos;`--&apos; `--&apos;`-----&apos;                          </span><br><span class=\"line\">                                                                                </span><br><span class=\"line\"></span><br><span class=\"line\">wiki: https://alibaba.github.io/arthas</span><br><span class=\"line\">version: 3.0.4</span><br><span class=\"line\">pid: 19670</span><br><span class=\"line\">timestamp: 1537320967728</span><br><span class=\"line\"></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n<p>启动成功，Arthas提供一个shell的操作模式来供我们去监控Java进程，具体指令可以看下官方的<a href=\"https://alibaba.github.io/arthas/quick-start.html\" target=\"_blank\" rel=\"noopener\">Wiki</a></p>\n<h4 id=\"5-安装过程可能遇到的问题\"><a class=\"header-anchor\" href=\"#5-安装过程可能遇到的问题\">¶</a>5.安装过程可能遇到的问题</h4>\n<p>(1)遇到报错<code>java.security.AccessControlException: Access Denied</code></p>\n<p>官方解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add the permission in client.policy (for the application client), or in server.policy (for EJB/web modules) for the application that needs to set the property. By default, applications only have “read” permission for properties.</span><br><span class=\"line\"></span><br><span class=\"line\">For example, to grant read/write permission for all the files in the codebase directory, add or append the following to client.policy or server.policy:</span><br><span class=\"line\"></span><br><span class=\"line\">grant codeBase &quot;file:/.../build/sparc_SunOS/sec/-&quot; &#123;</span><br><span class=\"line\">   permission java.util.PropertyPermission &quot;*&quot;, &quot;read,write&quot;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>java.policy所在的目录为JDK所在目录下的相对目录<code>jre/lib/security</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim java.policy</span><br></pre></td></tr></table></figure>\n<p>尾部增加一行即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permission java.security.AllPermission;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-arthas简介\"><a class=\"header-anchor\" href=\"#一-arthas简介\">¶</a>一、Arthas简介</h2>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>\n<p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p>\n<ol start=\"0\">\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n</ol>\n<p><code>Arthas</code>采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>使用说明可以看下官方的文档<a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\" rel=\"noopener\">https://alibaba.github.io/arthas/</a></p>\n<h2 id=\"二-安装及使用\"><a class=\"header-anchor\" href=\"#二-安装及使用\">¶</a>二、安装及使用</h2>\n<p>以下通过CentOS系统举例来安装Arthas</p>\n<h4 id=\"1-安装java环境\"><a class=\"header-anchor\" href=\"#1-安装java环境\">¶</a>1.安装Java环境</h4>\n<p>首先去Oracle下载JDK，可以通过<code>wget</code>或者<code>curl -O</code>来下载到Linux主机上。</p>\n<p>最方便的就是下载一个tar.gz格式的压缩包，然后通过<code>tar -zxf</code>解压，以下是笔者最终存放jdk的物理路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos jdk1.8.0_181]$ pwd</span><br><span class=\"line\">/usr/lib/java-1.8.0/jdk1.8.0_181</span><br></pre></td></tr></table></figure>\n<p>接下来配置环境变量，通过<code>vim /etc/profile</code>进入编辑操作，并增加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/java-1.8.0/jdk1.8.0_181</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">export CLASSPATH=$JAVA_HOME/lib/</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>退出并保存，通过执行<code>source /etc/profile</code>立即生效</p>\n<p>然后分别执行<code>java</code>和<code>javac</code>验证环境是否生效</p>\n<h4 id=\"2-安装arthas\"><a class=\"header-anchor\" href=\"#2-安装arthas\">¶</a>2.安装Arthas</h4>\n<p>Arthas非常小巧，官方有一个可直接执行的sh脚本供我们使用，可以通过以下指令下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://alibaba.github.io/arthas/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>启动Arthas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./as.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-安装elasticsearch\"><a class=\"header-anchor\" href=\"#3-安装elasticsearch\">¶</a>3.安装ElasticSearch</h4>\n<p>Arthas启动需要存在至少一个及以上的Java进程，这里我们为了方便测试，直接安装ElasticSearch。</p>\n<p>和安装JDK的方式类似，我们去官方下载一个<code>tar.gz</code>的压缩包，然后解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos elasticsearch]$ ll</span><br><span class=\"line\">total 95612</span><br><span class=\"line\">drwxr-xr-x 9 nico root     4096 Sep 19 09:03 elasticsearch-6.4.0</span><br><span class=\"line\">-rw-r--r-- 1 nico root 97901357 Aug 23 23:21 elasticsearch-6.4.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>ElasticSearch的不允许<strong>root</strong>用户启动，所以笔者用的是<strong>nico</strong>账号，创建账号过程如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser nico</span><br><span class=\"line\">passwd nico</span><br><span class=\"line\">#输入密码</span><br><span class=\"line\">#将as.sh和elasticsearch的目录权限赋予nico账户</span><br><span class=\"line\">chown nico as.sh</span><br><span class=\"line\">chown -R nico elasticsearch</span><br><span class=\"line\">su nico</span><br></pre></td></tr></table></figure>\n<p>以上指令请分开到对应的目录执行，执行完毕之后我们进入elasticsearch目录下的bin目录中，启动elasticsearch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./elasticsearch</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用arthas监控elasticsearch\"><a class=\"header-anchor\" href=\"#4-使用arthas监控elasticsearch\">¶</a>4.使用Arthas监控ElasticSearch</h4>\n<p>进入<code>as.sh</code>所在目录，启动Arthas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./as.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos arthas]$ ./as.sh</span><br><span class=\"line\">Arthas script version: 3.0.4</span><br><span class=\"line\">Found existing java process, please choose one and hit RETURN.</span><br><span class=\"line\">* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch</span><br></pre></td></tr></table></figure>\n<p>我们看到，当前只有ElasticSearch一个进程，输入1监控ElasticSearch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nico@VM_0_17_centos arthas]$ ./as.sh</span><br><span class=\"line\">Arthas script version: 3.0.4</span><br><span class=\"line\">Found existing java process, please choose one and hit RETURN.</span><br><span class=\"line\">* [1]: 19670 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class=\"line\">1</span><br><span class=\"line\">Calculating attach execution time...</span><br><span class=\"line\">Attaching to 19670 using version 3.0.4...</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m0.227s</span><br><span class=\"line\">user\t0m0.177s</span><br><span class=\"line\">sys\t0m0.035s</span><br><span class=\"line\">Attach success.</span><br><span class=\"line\">Connecting to arthas server... current timestamp is 1537320967</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to 127.0.0.1.</span><br><span class=\"line\">Escape character is &apos;^]&apos;.</span><br><span class=\"line\">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class=\"line\"> /  O  \\ |  .--. &apos;&apos;--.  .--&apos;|  &apos;--&apos;  | /  O  \\ &apos;   .-&apos;                          </span><br><span class=\"line\">|  .-.  ||  &apos;--&apos;.&apos;   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class=\"line\">|  | |  ||  |\\  \\    |  |   |  |  |  ||  | |  |.-&apos;    |                         </span><br><span class=\"line\">`--&apos; `--&apos;`--&apos; &apos;--&apos;   `--&apos;   `--&apos;  `--&apos;`--&apos; `--&apos;`-----&apos;                          </span><br><span class=\"line\">                                                                                </span><br><span class=\"line\"></span><br><span class=\"line\">wiki: https://alibaba.github.io/arthas</span><br><span class=\"line\">version: 3.0.4</span><br><span class=\"line\">pid: 19670</span><br><span class=\"line\">timestamp: 1537320967728</span><br><span class=\"line\"></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n<p>启动成功，Arthas提供一个shell的操作模式来供我们去监控Java进程，具体指令可以看下官方的<a href=\"https://alibaba.github.io/arthas/quick-start.html\" target=\"_blank\" rel=\"noopener\">Wiki</a></p>\n<h4 id=\"5-安装过程可能遇到的问题\"><a class=\"header-anchor\" href=\"#5-安装过程可能遇到的问题\">¶</a>5.安装过程可能遇到的问题</h4>\n<p>(1)遇到报错<code>java.security.AccessControlException: Access Denied</code></p>\n<p>官方解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add the permission in client.policy (for the application client), or in server.policy (for EJB/web modules) for the application that needs to set the property. By default, applications only have “read” permission for properties.</span><br><span class=\"line\"></span><br><span class=\"line\">For example, to grant read/write permission for all the files in the codebase directory, add or append the following to client.policy or server.policy:</span><br><span class=\"line\"></span><br><span class=\"line\">grant codeBase &quot;file:/.../build/sparc_SunOS/sec/-&quot; &#123;</span><br><span class=\"line\">   permission java.util.PropertyPermission &quot;*&quot;, &quot;read,write&quot;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>java.policy所在的目录为JDK所在目录下的相对目录<code>jre/lib/security</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim java.policy</span><br></pre></td></tr></table></figure>\n<p>尾部增加一行即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permission java.security.AllPermission;</span><br></pre></td></tr></table></figure>"},{"title":"如何使用Defender优雅的管理权限？","author":"Nico","date":"2018-12-11T12:09:51.000Z","_content":"## 何为权限管理\n权限管理已经不知不觉深入到了我们生活的每一个角落，例如地铁进站的闸机，高速公路上的过路费，停车场的杠杆等等等等。\n\n作为一名开发人员，权限二字对我们的映像更加深刻，无论任何系统，都多多少少与权限管理会沾上关系！什么？你的系统和权限不沾边......好吧，你的代码拉取权限总得有吧！如果还没有的话，你登上掘金看到这篇文章并点了一个赞这个过程就需要好多次权限校验。好了扯远了，我们回归正题，这里使用一张图来简单展示web系统的权限是什么样子：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679cf52d7e57736?w=734&h=214&f=png&s=18626)\n\n看完之后，是不是感觉很简单，不错，权限管理并不难，我们只需要将**校验**这一环节进行开发即可，实现方式也有很多种：\n### 方案一：组件封装\n我们可以将权限校验的整个过程组件化，例如组件名为``AuthComponent``，之后再所有需要权限校验的接口对应的方法的开头，调用``AuthComponent``的``verify``方法进行校验，根据结果做不同的业务处理！\n - 优点：貌似能达到主要目的，而且非常灵活~\n - 缺点：代码冗余，低内聚，高耦合，不易于维护。\n\n### 方案二：通用处理\n在方案一的基础上我们稍加改造，例如使用``AOP``对需要校验的接口做个切面，在方法执行前我们使用``AuthComponent``校验一下即可，这样我们的代码就更方便维护了！\n - 优点：弥补了方案一的缺点。\n - 缺点：太过通用化，很难兼容所有的情况，不灵活。\n\n### 方案三：自定义注解\n我们将方案一和方案二结合一下，取一灵活，取二通用，我们自定义一个名为``@Auth``的注解，并且它需要传一个参数，我们这里直径定义为枚举类``Level``，简单结构如下：\n```\npublic enum Level { LOGIN, ADMIN }\n```\n之后我们定义一个注解切面，切向携带``@Auth``的方法，在方法执行前根据value值的内容，也就是``Level``的值去做不同的权限管理即可。\n - 优点：灵活可控，通用性还行。\n - 缺点：缺乏组件化，结构零散，不易复用，对于多种场景下需要制定多个切面，不优雅！\n\n### 方案四：使用框架\n这是最简单的方法，例如优秀的开源``shiro``、``spring-Security``等都可以满足我们的需求，唯一的区别是框架的轻重及使用方式！\n\n## 如何更优雅的管理权限\n想必很多同学都在使用第四种方案，也有不少的小伙伴在使用方案三，对于缺点明显的方案一和二，使用的应该很少。\n\n如果我们的服务并不需要那么重的权限管理框架去解决权限问题，又不想不优雅的自定义注解去实现时，我们该怎么办呢？\n\n不妨试试 [Defender](https://github.com/ainilili/defender)\n### Defender是什么\n``defender``是一款全面拥抱``spring-boot``的轻量级，高灵活，高可用的权限框架。如果日常中我们需要更加便捷的对服务增加权限管理，那么``defender``正合适！\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679d0bbcd681a0d?w=871&h=278&f=png&s=13234)\n\n它可以免除我们重复编写自定义注解和切面，只需要调用简单的API即可灵活的指定不同模式的防御网络。\n\n``defender``提供很多种防御模式，我们可以通过调用简单的api是使用构建不同模式的校验器，从而迅速完成权限的管理：\n```\n@Configuration\n@EnableDefender(\"* org.nico.trap.controller..*.*(..)\")\npublic class DefenderTestConfig {\n\t@Bean\n\tpublic Defender init(){\n\t\treturn Defender.getInstance()\n\t\t\t\t.registry(Guarder.builder(GuarderType.URI)\n\t\t\t\t\t\t.pattern(\"POST /user/*\")\n\t\t\t\t\t\t.preventer(caller -> {\n\t\t\t\t\t\t\treturn caller.getRequest().getHeader(\"token\") == null \n\t\t\t\t\t\t\t\t? Result.pass() : Result.notpass(\"error\");\n\t\t\t\t\t\t}))\n\t\t\t\t.ready();\n\t}\n}\n```\n上述代码的作用是对请求符合``POST``类型且URI前缀为``/user/``的所有接口做了权限管理。\n\n另外，我们可以使用``lambda``简单完成权限校验逻辑，又或者使用匿名类实现复杂校验逻辑：\n```\nGuarder.builder(GuarderType.ANNOTATION)\n\t\t.pattern(\"org.nico.trap.controller\")\n\t\t.preventer(new AbstractPreventer() {\n\t\t\t\n\t\t\t@Autowired\n\t\t\tprivate AuthComponent authComponent;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Result detection(Caller caller) {\n\t\t\t\tString identity = caller.getAccess().value();\n\t\t\t\tif(! identity.equals(AuthConst.VISITOR)) {\n\t\t\t\t\tUserBo user = authComponent.getUser();\n\t\t\t\t\tif(user != null) {\n\t\t\t\t\t\tif(identity.equals(AuthConst.ADMIN)){\n\t\t\t\t\t\t\tif(user.getRuleType() == null) {\n\t\t\t\t\t\t\t\treturn Result.notpass(new ResponseVo<>(ResponseCode.ERROR_ON_USER_IDENTITY_MISMATCH));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}else {\n\t\t\t\t\t\treturn Result.notpass(new ResponseVo<>(ResponseCode.ERROR_ON_LOGIN_INVALID));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Result.pass();\n\t\t\t}\n\t\t})\n```\n其中``GuarderType.URI``和``GuarderType.ANNOTATION``分别代表URI ANT匹配模式和注解模式，后者是方案三的实现，``defender``提供简单优雅的api将各种模式的权限校验方式集合在一起。\n\n相比``shiro``、``spring-security``，``defender``显得更加轻便灵活，因为它并没有提供一系列权限更具体的管理实现，而是将校验的实现开放一个接口面向开发者，总体代码大小不超过``21k``，显然对于轻量级的权限管理，``defender``更加适合！\n\n``defender``刚刚起步，如果大家有兴趣可以将之集成在您的开发环境尝一下鲜，项目地址如下\n\n > [Defender传送门](https://github.com/ainilili/defender)\n \n官方也提供有简单的使用文档\n\n > [中文文档](https://github.com/ainilili/defender/blob/master/DOC_CN.md)\n \n > [English Document](https://github.com/ainilili/defender/blob/master/DOC_EN.md)\n \n如果您感觉不错，也想参与贡献\n\n > [如何贡献](https://github.com/ainilili/defender/blob/master/CONTRIBUTING.md)\n\n\n","source":"_posts/如何使用Defender优雅的管理权限？.md","raw":"title: 如何使用Defender优雅的管理权限？\nauthor: Nico\ndate: 2018-12-11 20:09:51\ntags:\n---\n## 何为权限管理\n权限管理已经不知不觉深入到了我们生活的每一个角落，例如地铁进站的闸机，高速公路上的过路费，停车场的杠杆等等等等。\n\n作为一名开发人员，权限二字对我们的映像更加深刻，无论任何系统，都多多少少与权限管理会沾上关系！什么？你的系统和权限不沾边......好吧，你的代码拉取权限总得有吧！如果还没有的话，你登上掘金看到这篇文章并点了一个赞这个过程就需要好多次权限校验。好了扯远了，我们回归正题，这里使用一张图来简单展示web系统的权限是什么样子：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679cf52d7e57736?w=734&h=214&f=png&s=18626)\n\n看完之后，是不是感觉很简单，不错，权限管理并不难，我们只需要将**校验**这一环节进行开发即可，实现方式也有很多种：\n### 方案一：组件封装\n我们可以将权限校验的整个过程组件化，例如组件名为``AuthComponent``，之后再所有需要权限校验的接口对应的方法的开头，调用``AuthComponent``的``verify``方法进行校验，根据结果做不同的业务处理！\n - 优点：貌似能达到主要目的，而且非常灵活~\n - 缺点：代码冗余，低内聚，高耦合，不易于维护。\n\n### 方案二：通用处理\n在方案一的基础上我们稍加改造，例如使用``AOP``对需要校验的接口做个切面，在方法执行前我们使用``AuthComponent``校验一下即可，这样我们的代码就更方便维护了！\n - 优点：弥补了方案一的缺点。\n - 缺点：太过通用化，很难兼容所有的情况，不灵活。\n\n### 方案三：自定义注解\n我们将方案一和方案二结合一下，取一灵活，取二通用，我们自定义一个名为``@Auth``的注解，并且它需要传一个参数，我们这里直径定义为枚举类``Level``，简单结构如下：\n```\npublic enum Level { LOGIN, ADMIN }\n```\n之后我们定义一个注解切面，切向携带``@Auth``的方法，在方法执行前根据value值的内容，也就是``Level``的值去做不同的权限管理即可。\n - 优点：灵活可控，通用性还行。\n - 缺点：缺乏组件化，结构零散，不易复用，对于多种场景下需要制定多个切面，不优雅！\n\n### 方案四：使用框架\n这是最简单的方法，例如优秀的开源``shiro``、``spring-Security``等都可以满足我们的需求，唯一的区别是框架的轻重及使用方式！\n\n## 如何更优雅的管理权限\n想必很多同学都在使用第四种方案，也有不少的小伙伴在使用方案三，对于缺点明显的方案一和二，使用的应该很少。\n\n如果我们的服务并不需要那么重的权限管理框架去解决权限问题，又不想不优雅的自定义注解去实现时，我们该怎么办呢？\n\n不妨试试 [Defender](https://github.com/ainilili/defender)\n### Defender是什么\n``defender``是一款全面拥抱``spring-boot``的轻量级，高灵活，高可用的权限框架。如果日常中我们需要更加便捷的对服务增加权限管理，那么``defender``正合适！\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679d0bbcd681a0d?w=871&h=278&f=png&s=13234)\n\n它可以免除我们重复编写自定义注解和切面，只需要调用简单的API即可灵活的指定不同模式的防御网络。\n\n``defender``提供很多种防御模式，我们可以通过调用简单的api是使用构建不同模式的校验器，从而迅速完成权限的管理：\n```\n@Configuration\n@EnableDefender(\"* org.nico.trap.controller..*.*(..)\")\npublic class DefenderTestConfig {\n\t@Bean\n\tpublic Defender init(){\n\t\treturn Defender.getInstance()\n\t\t\t\t.registry(Guarder.builder(GuarderType.URI)\n\t\t\t\t\t\t.pattern(\"POST /user/*\")\n\t\t\t\t\t\t.preventer(caller -> {\n\t\t\t\t\t\t\treturn caller.getRequest().getHeader(\"token\") == null \n\t\t\t\t\t\t\t\t? Result.pass() : Result.notpass(\"error\");\n\t\t\t\t\t\t}))\n\t\t\t\t.ready();\n\t}\n}\n```\n上述代码的作用是对请求符合``POST``类型且URI前缀为``/user/``的所有接口做了权限管理。\n\n另外，我们可以使用``lambda``简单完成权限校验逻辑，又或者使用匿名类实现复杂校验逻辑：\n```\nGuarder.builder(GuarderType.ANNOTATION)\n\t\t.pattern(\"org.nico.trap.controller\")\n\t\t.preventer(new AbstractPreventer() {\n\t\t\t\n\t\t\t@Autowired\n\t\t\tprivate AuthComponent authComponent;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Result detection(Caller caller) {\n\t\t\t\tString identity = caller.getAccess().value();\n\t\t\t\tif(! identity.equals(AuthConst.VISITOR)) {\n\t\t\t\t\tUserBo user = authComponent.getUser();\n\t\t\t\t\tif(user != null) {\n\t\t\t\t\t\tif(identity.equals(AuthConst.ADMIN)){\n\t\t\t\t\t\t\tif(user.getRuleType() == null) {\n\t\t\t\t\t\t\t\treturn Result.notpass(new ResponseVo<>(ResponseCode.ERROR_ON_USER_IDENTITY_MISMATCH));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}else {\n\t\t\t\t\t\treturn Result.notpass(new ResponseVo<>(ResponseCode.ERROR_ON_LOGIN_INVALID));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Result.pass();\n\t\t\t}\n\t\t})\n```\n其中``GuarderType.URI``和``GuarderType.ANNOTATION``分别代表URI ANT匹配模式和注解模式，后者是方案三的实现，``defender``提供简单优雅的api将各种模式的权限校验方式集合在一起。\n\n相比``shiro``、``spring-security``，``defender``显得更加轻便灵活，因为它并没有提供一系列权限更具体的管理实现，而是将校验的实现开放一个接口面向开发者，总体代码大小不超过``21k``，显然对于轻量级的权限管理，``defender``更加适合！\n\n``defender``刚刚起步，如果大家有兴趣可以将之集成在您的开发环境尝一下鲜，项目地址如下\n\n > [Defender传送门](https://github.com/ainilili/defender)\n \n官方也提供有简单的使用文档\n\n > [中文文档](https://github.com/ainilili/defender/blob/master/DOC_CN.md)\n \n > [English Document](https://github.com/ainilili/defender/blob/master/DOC_EN.md)\n \n如果您感觉不错，也想参与贡献\n\n > [如何贡献](https://github.com/ainilili/defender/blob/master/CONTRIBUTING.md)\n\n\n","slug":"如何使用Defender优雅的管理权限？","published":1,"updated":"2018-12-11T12:09:54.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzl00089ctpx4bryar3","content":"<h2 id=\"何为权限管理\"><a class=\"header-anchor\" href=\"#何为权限管理\">¶</a>何为权限管理</h2>\n<p>权限管理已经不知不觉深入到了我们生活的每一个角落，例如地铁进站的闸机，高速公路上的过路费，停车场的杠杆等等等等。</p>\n<p>作为一名开发人员，权限二字对我们的映像更加深刻，无论任何系统，都多多少少与权限管理会沾上关系！什么？你的系统和权限不沾边…好吧，你的代码拉取权限总得有吧！如果还没有的话，你登上掘金看到这篇文章并点了一个赞这个过程就需要好多次权限校验。好了扯远了，我们回归正题，这里使用一张图来简单展示web系统的权限是什么样子：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679cf52d7e57736?w=734&amp;h=214&amp;f=png&amp;s=18626\" alt=\"\"></p>\n<p>看完之后，是不是感觉很简单，不错，权限管理并不难，我们只需要将<strong>校验</strong>这一环节进行开发即可，实现方式也有很多种：</p>\n<h3 id=\"方案一：组件封装\"><a class=\"header-anchor\" href=\"#方案一：组件封装\">¶</a>方案一：组件封装</h3>\n<p>我们可以将权限校验的整个过程组件化，例如组件名为<code>AuthComponent</code>，之后再所有需要权限校验的接口对应的方法的开头，调用<code>AuthComponent</code>的<code>verify</code>方法进行校验，根据结果做不同的业务处理！</p>\n<ul>\n<li>优点：貌似能达到主要目的，而且非常灵活~</li>\n<li>缺点：代码冗余，低内聚，高耦合，不易于维护。</li>\n</ul>\n<h3 id=\"方案二：通用处理\"><a class=\"header-anchor\" href=\"#方案二：通用处理\">¶</a>方案二：通用处理</h3>\n<p>在方案一的基础上我们稍加改造，例如使用<code>AOP</code>对需要校验的接口做个切面，在方法执行前我们使用<code>AuthComponent</code>校验一下即可，这样我们的代码就更方便维护了！</p>\n<ul>\n<li>优点：弥补了方案一的缺点。</li>\n<li>缺点：太过通用化，很难兼容所有的情况，不灵活。</li>\n</ul>\n<h3 id=\"方案三：自定义注解\"><a class=\"header-anchor\" href=\"#方案三：自定义注解\">¶</a>方案三：自定义注解</h3>\n<p>我们将方案一和方案二结合一下，取一灵活，取二通用，我们自定义一个名为<code>@Auth</code>的注解，并且它需要传一个参数，我们这里直径定义为枚举类<code>Level</code>，简单结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Level &#123; LOGIN, ADMIN &#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们定义一个注解切面，切向携带<code>@Auth</code>的方法，在方法执行前根据value值的内容，也就是<code>Level</code>的值去做不同的权限管理即可。</p>\n<ul>\n<li>优点：灵活可控，通用性还行。</li>\n<li>缺点：缺乏组件化，结构零散，不易复用，对于多种场景下需要制定多个切面，不优雅！</li>\n</ul>\n<h3 id=\"方案四：使用框架\"><a class=\"header-anchor\" href=\"#方案四：使用框架\">¶</a>方案四：使用框架</h3>\n<p>这是最简单的方法，例如优秀的开源<code>shiro</code>、<code>spring-Security</code>等都可以满足我们的需求，唯一的区别是框架的轻重及使用方式！</p>\n<h2 id=\"如何更优雅的管理权限\"><a class=\"header-anchor\" href=\"#如何更优雅的管理权限\">¶</a>如何更优雅的管理权限</h2>\n<p>想必很多同学都在使用第四种方案，也有不少的小伙伴在使用方案三，对于缺点明显的方案一和二，使用的应该很少。</p>\n<p>如果我们的服务并不需要那么重的权限管理框架去解决权限问题，又不想不优雅的自定义注解去实现时，我们该怎么办呢？</p>\n<p>不妨试试 <a href=\"https://github.com/ainilili/defender\" target=\"_blank\" rel=\"noopener\">Defender</a></p>\n<h3 id=\"defender是什么\"><a class=\"header-anchor\" href=\"#defender是什么\">¶</a>Defender是什么</h3>\n<p><code>defender</code>是一款全面拥抱<code>spring-boot</code>的轻量级，高灵活，高可用的权限框架。如果日常中我们需要更加便捷的对服务增加权限管理，那么<code>defender</code>正合适！</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679d0bbcd681a0d?w=871&amp;h=278&amp;f=png&amp;s=13234\" alt=\"\"></p>\n<p>它可以免除我们重复编写自定义注解和切面，只需要调用简单的API即可灵活的指定不同模式的防御网络。</p>\n<p><code>defender</code>提供很多种防御模式，我们可以通过调用简单的api是使用构建不同模式的校验器，从而迅速完成权限的管理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableDefender(&quot;* org.nico.trap.controller..*.*(..)&quot;)</span><br><span class=\"line\">public class DefenderTestConfig &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic Defender init()&#123;</span><br><span class=\"line\">\t\treturn Defender.getInstance()</span><br><span class=\"line\">\t\t\t\t.registry(Guarder.builder(GuarderType.URI)</span><br><span class=\"line\">\t\t\t\t\t\t.pattern(&quot;POST /user/*&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.preventer(caller -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treturn caller.getRequest().getHeader(&quot;token&quot;) == null </span><br><span class=\"line\">\t\t\t\t\t\t\t\t? Result.pass() : Result.notpass(&quot;error&quot;);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t.ready();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码的作用是对请求符合<code>POST</code>类型且URI前缀为<code>/user/</code>的所有接口做了权限管理。</p>\n<p>另外，我们可以使用<code>lambda</code>简单完成权限校验逻辑，又或者使用匿名类实现复杂校验逻辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Guarder.builder(GuarderType.ANNOTATION)</span><br><span class=\"line\">\t\t.pattern(&quot;org.nico.trap.controller&quot;)</span><br><span class=\"line\">\t\t.preventer(new AbstractPreventer() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Autowired</span><br><span class=\"line\">\t\t\tprivate AuthComponent authComponent;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Result detection(Caller caller) &#123;</span><br><span class=\"line\">\t\t\t\tString identity = caller.getAccess().value();</span><br><span class=\"line\">\t\t\t\tif(! identity.equals(AuthConst.VISITOR)) &#123;</span><br><span class=\"line\">\t\t\t\t\tUserBo user = authComponent.getUser();</span><br><span class=\"line\">\t\t\t\t\tif(user != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif(identity.equals(AuthConst.ADMIN))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(user.getRuleType() == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn Result.notpass(new ResponseVo&lt;&gt;(ResponseCode.ERROR_ON_USER_IDENTITY_MISMATCH));</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\t\t\t\treturn Result.notpass(new ResponseVo&lt;&gt;(ResponseCode.ERROR_ON_LOGIN_INVALID));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn Result.pass();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>GuarderType.URI</code>和<code>GuarderType.ANNOTATION</code>分别代表URI ANT匹配模式和注解模式，后者是方案三的实现，<code>defender</code>提供简单优雅的api将各种模式的权限校验方式集合在一起。</p>\n<p>相比<code>shiro</code>、<code>spring-security</code>，<code>defender</code>显得更加轻便灵活，因为它并没有提供一系列权限更具体的管理实现，而是将校验的实现开放一个接口面向开发者，总体代码大小不超过<code>21k</code>，显然对于轻量级的权限管理，<code>defender</code>更加适合！</p>\n<p><code>defender</code>刚刚起步，如果大家有兴趣可以将之集成在您的开发环境尝一下鲜，项目地址如下</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender\" target=\"_blank\" rel=\"noopener\">Defender传送门</a></p>\n</blockquote>\n<p>官方也提供有简单的使用文档</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/DOC_CN.md\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/DOC_EN.md\" target=\"_blank\" rel=\"noopener\">English Document</a></p>\n</blockquote>\n<p>如果您感觉不错，也想参与贡献</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">如何贡献</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"何为权限管理\"><a class=\"header-anchor\" href=\"#何为权限管理\">¶</a>何为权限管理</h2>\n<p>权限管理已经不知不觉深入到了我们生活的每一个角落，例如地铁进站的闸机，高速公路上的过路费，停车场的杠杆等等等等。</p>\n<p>作为一名开发人员，权限二字对我们的映像更加深刻，无论任何系统，都多多少少与权限管理会沾上关系！什么？你的系统和权限不沾边…好吧，你的代码拉取权限总得有吧！如果还没有的话，你登上掘金看到这篇文章并点了一个赞这个过程就需要好多次权限校验。好了扯远了，我们回归正题，这里使用一张图来简单展示web系统的权限是什么样子：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679cf52d7e57736?w=734&amp;h=214&amp;f=png&amp;s=18626\" alt=\"\"></p>\n<p>看完之后，是不是感觉很简单，不错，权限管理并不难，我们只需要将<strong>校验</strong>这一环节进行开发即可，实现方式也有很多种：</p>\n<h3 id=\"方案一：组件封装\"><a class=\"header-anchor\" href=\"#方案一：组件封装\">¶</a>方案一：组件封装</h3>\n<p>我们可以将权限校验的整个过程组件化，例如组件名为<code>AuthComponent</code>，之后再所有需要权限校验的接口对应的方法的开头，调用<code>AuthComponent</code>的<code>verify</code>方法进行校验，根据结果做不同的业务处理！</p>\n<ul>\n<li>优点：貌似能达到主要目的，而且非常灵活~</li>\n<li>缺点：代码冗余，低内聚，高耦合，不易于维护。</li>\n</ul>\n<h3 id=\"方案二：通用处理\"><a class=\"header-anchor\" href=\"#方案二：通用处理\">¶</a>方案二：通用处理</h3>\n<p>在方案一的基础上我们稍加改造，例如使用<code>AOP</code>对需要校验的接口做个切面，在方法执行前我们使用<code>AuthComponent</code>校验一下即可，这样我们的代码就更方便维护了！</p>\n<ul>\n<li>优点：弥补了方案一的缺点。</li>\n<li>缺点：太过通用化，很难兼容所有的情况，不灵活。</li>\n</ul>\n<h3 id=\"方案三：自定义注解\"><a class=\"header-anchor\" href=\"#方案三：自定义注解\">¶</a>方案三：自定义注解</h3>\n<p>我们将方案一和方案二结合一下，取一灵活，取二通用，我们自定义一个名为<code>@Auth</code>的注解，并且它需要传一个参数，我们这里直径定义为枚举类<code>Level</code>，简单结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Level &#123; LOGIN, ADMIN &#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们定义一个注解切面，切向携带<code>@Auth</code>的方法，在方法执行前根据value值的内容，也就是<code>Level</code>的值去做不同的权限管理即可。</p>\n<ul>\n<li>优点：灵活可控，通用性还行。</li>\n<li>缺点：缺乏组件化，结构零散，不易复用，对于多种场景下需要制定多个切面，不优雅！</li>\n</ul>\n<h3 id=\"方案四：使用框架\"><a class=\"header-anchor\" href=\"#方案四：使用框架\">¶</a>方案四：使用框架</h3>\n<p>这是最简单的方法，例如优秀的开源<code>shiro</code>、<code>spring-Security</code>等都可以满足我们的需求，唯一的区别是框架的轻重及使用方式！</p>\n<h2 id=\"如何更优雅的管理权限\"><a class=\"header-anchor\" href=\"#如何更优雅的管理权限\">¶</a>如何更优雅的管理权限</h2>\n<p>想必很多同学都在使用第四种方案，也有不少的小伙伴在使用方案三，对于缺点明显的方案一和二，使用的应该很少。</p>\n<p>如果我们的服务并不需要那么重的权限管理框架去解决权限问题，又不想不优雅的自定义注解去实现时，我们该怎么办呢？</p>\n<p>不妨试试 <a href=\"https://github.com/ainilili/defender\" target=\"_blank\" rel=\"noopener\">Defender</a></p>\n<h3 id=\"defender是什么\"><a class=\"header-anchor\" href=\"#defender是什么\">¶</a>Defender是什么</h3>\n<p><code>defender</code>是一款全面拥抱<code>spring-boot</code>的轻量级，高灵活，高可用的权限框架。如果日常中我们需要更加便捷的对服务增加权限管理，那么<code>defender</code>正合适！</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679d0bbcd681a0d?w=871&amp;h=278&amp;f=png&amp;s=13234\" alt=\"\"></p>\n<p>它可以免除我们重复编写自定义注解和切面，只需要调用简单的API即可灵活的指定不同模式的防御网络。</p>\n<p><code>defender</code>提供很多种防御模式，我们可以通过调用简单的api是使用构建不同模式的校验器，从而迅速完成权限的管理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableDefender(&quot;* org.nico.trap.controller..*.*(..)&quot;)</span><br><span class=\"line\">public class DefenderTestConfig &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic Defender init()&#123;</span><br><span class=\"line\">\t\treturn Defender.getInstance()</span><br><span class=\"line\">\t\t\t\t.registry(Guarder.builder(GuarderType.URI)</span><br><span class=\"line\">\t\t\t\t\t\t.pattern(&quot;POST /user/*&quot;)</span><br><span class=\"line\">\t\t\t\t\t\t.preventer(caller -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treturn caller.getRequest().getHeader(&quot;token&quot;) == null </span><br><span class=\"line\">\t\t\t\t\t\t\t\t? Result.pass() : Result.notpass(&quot;error&quot;);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t.ready();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码的作用是对请求符合<code>POST</code>类型且URI前缀为<code>/user/</code>的所有接口做了权限管理。</p>\n<p>另外，我们可以使用<code>lambda</code>简单完成权限校验逻辑，又或者使用匿名类实现复杂校验逻辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Guarder.builder(GuarderType.ANNOTATION)</span><br><span class=\"line\">\t\t.pattern(&quot;org.nico.trap.controller&quot;)</span><br><span class=\"line\">\t\t.preventer(new AbstractPreventer() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Autowired</span><br><span class=\"line\">\t\t\tprivate AuthComponent authComponent;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Result detection(Caller caller) &#123;</span><br><span class=\"line\">\t\t\t\tString identity = caller.getAccess().value();</span><br><span class=\"line\">\t\t\t\tif(! identity.equals(AuthConst.VISITOR)) &#123;</span><br><span class=\"line\">\t\t\t\t\tUserBo user = authComponent.getUser();</span><br><span class=\"line\">\t\t\t\t\tif(user != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif(identity.equals(AuthConst.ADMIN))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(user.getRuleType() == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn Result.notpass(new ResponseVo&lt;&gt;(ResponseCode.ERROR_ON_USER_IDENTITY_MISMATCH));</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\t\t\t\treturn Result.notpass(new ResponseVo&lt;&gt;(ResponseCode.ERROR_ON_LOGIN_INVALID));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn Result.pass();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>GuarderType.URI</code>和<code>GuarderType.ANNOTATION</code>分别代表URI ANT匹配模式和注解模式，后者是方案三的实现，<code>defender</code>提供简单优雅的api将各种模式的权限校验方式集合在一起。</p>\n<p>相比<code>shiro</code>、<code>spring-security</code>，<code>defender</code>显得更加轻便灵活，因为它并没有提供一系列权限更具体的管理实现，而是将校验的实现开放一个接口面向开发者，总体代码大小不超过<code>21k</code>，显然对于轻量级的权限管理，<code>defender</code>更加适合！</p>\n<p><code>defender</code>刚刚起步，如果大家有兴趣可以将之集成在您的开发环境尝一下鲜，项目地址如下</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender\" target=\"_blank\" rel=\"noopener\">Defender传送门</a></p>\n</blockquote>\n<p>官方也提供有简单的使用文档</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/DOC_CN.md\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/DOC_EN.md\" target=\"_blank\" rel=\"noopener\">English Document</a></p>\n</blockquote>\n<p>如果您感觉不错，也想参与贡献</p>\n<blockquote>\n<p><a href=\"https://github.com/ainilili/defender/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">如何贡献</a></p>\n</blockquote>\n"},{"title":"使Mybatis开发变得更加轻松的增强工具 — Ourbatis","date":"2018-11-06T02:11:36.000Z","_content":"## 一、Mybatis的不足之处\nMybatis是一款优秀的及其灵活的持久层框架，通过XML配置并映射到Mapper接口为Service层提供基础数据操作入口。\n\n这么优秀的框架竟然还有不足之处？ \n\n俗话说人无完人，因为Mybatis实在是太灵活了，灵活到每个Mapper接口都需要定制对应的XML，所以就会引发一些问题。\n\n### 问题一：配置文件繁多\n假如一个系统中DB中涉及100张表，我们就需要写``100``个Mapper接口，还没完，最可怕的是，我们要为这``100``个Mapper接口定制与之对应的``100``套XML。而每个Mapper都必不可少的需要增删改查功能，我们就要写``100``遍增删改查，作为高贵的Java开发工程师，这是不能容忍的，于是``Mybatis Generator``诞生了，然而又会引发另一个问题！\n\n### 问题二：维护困难\n我们使用``Mybatis Generator``解决了问题一，再多的文件生成就是了，简单粗暴，貌似解决了所有的问题，Mybatis完美了！\n\n不要高兴的太早，在系统刚刚建立起来时，我们使用``Mybatis Generator``生成了一堆XML，在开发过程中，产品忽然提了一个新的需求，项目经理根据这个需求在某张表中增加或变动了一个字段，这时，我猜你的操作是这样：\n - 1、找到对应表的XML\n - 2、将该XML中自定义的一段标签复制出来，保存在本地\n - 3、使用``Mybatis Generator``重新生成该表的XML\n - 4、将之覆盖当前的XML\n - 5、将自定义的一段标签再粘贴进新的XML中\n\n在这个过程中，如果我们在第2步时漏复制了一段标签，等整个操作完成之后，又别是一番滋味在心头~\n\n### 问题三：编写XML困难\n假如肝不错，问题二也是小CASE，那么问题又来了，我们如何在繁长的XML中去编写和修改我们的XML呢。\n\n当我们打开要编辑的XML，映入眼帘的就是1000多行的XML，其中900行都是通用的增删改查操作，要新增一个标签，我们需要拉至文件底部编写新的数据操作，要更新一个标签，我们需要通过``Ctrl + F``寻找目标标签再进行修改。\n\n如何避免这些问题呢？\n\n如何让Mybatis增强通用性又不失灵活呢？\n\n## 二、使用Ourbatis辅助Mybatis\nOurbatis是一款Mybatis开发增强工具，小巧简洁，项目地址：\n - Github：[https://github.com/ainilili/ourbatis](https://github.com/ainilili/ourbatis)\n - Gitee：[https://gitee.com/ainilili/ourbatis](https://gitee.com/ainilili/ourbatis)\n - Wiki：[https://github.com/ainilili/ourbatis/wiki](https://github.com/ainilili/ourbatis/wiki)\n - Demo：[https://github.com/ainilili/ourbatis-simple](https://github.com/ainilili/ourbatis-simple)\n \n特性：\n - **1**、简洁方便，可以让Mybatis无XML化开发。\n - **2**、优雅解耦，通用和自定义的SQL标签完全隔离，让维护更加轻松。\n - **3**、无侵入性，Mybatis和Ourbatis可同时使用，配置简洁。\n - **4**、灵活可控，通用模板可自定义及扩展。\n - **5**、部署快捷，只需要一个依赖，两个配置，即可直接运行。\n - **6**、多数据源，在多数据源环境下也可以照常使用。\n\n### 关于Ourbatis使用的一个小Demo\n环境：\n - Spring Boot 2.0.5.RELEASE\n - Ourbatis 1.0.5\n - JAVA 8\n - Mysql\n\n 以``Spring Boot 2.0.5.RELEASE``版本为例，在可以正常使用Mybatis的项目中，``pom.xml``添加如下依赖：\n```\n    <dependency>\n        \t<groupId>com.smallnico</groupId>\n        \t<artifactId>ourbatis-spring-boot-starter</artifactId>\n        \t<version>1.0.5</version>\n\t</dependency>\n```\n在配置文件中增加一下配置：\n```\nourbatis.domain-locations=实体类所在包名\n```\n接下来，Mapper接口只需要继承``SimpleMapper``即可：\n```\nimport org.nico.ourbatis.domain.User;\npublic interface UserMapper extends SimpleMapper<User, Integer>{\n}\n```\n至此，一个使用Ourbatis的简单应用已经部署起来了，之后，你就可以使用一些Ourbatis默认的通用操作方法：\n```\n\tpublic T selectById(K key);\n\t\n\tpublic T selectEntity(T condition);\n\t\n\tpublic List<T> selectList(T condition);\n\t\n\tpublic long selectCount(Object condition);\n\t\n\tpublic List<T> selectPage(Page<Object> page);\n\t\n\tdefault PageResult<T> selectPageResult(Page<Object> page){\n\t\tlong total = selectCount(page.getEntity());\n\t\tList<T> results = null;\n\t\tif(total > 0) {\n\t\t\tresults = selectPage(page);\n\t\t}\n\t\treturn new PageResult<>(total, results);\n\t}\n\t\n\tpublic K selectId(T condition);\n\t\n\tpublic List<K> selectIds(T condition);\n\t\n\tpublic int insert(T entity);\n\t\n\tpublic int insertSelective(T entity);\n\t\n\tpublic int insertBatch(List<T> list);\n\t\n\tpublic int update(T entity);\n\t\n\tpublic int updateSelective(T entity);\n\t\n\tpublic int updateBatch(List<T> list);\n\t\n\tpublic int delete(T condition);\n\t\n\tpublic int deleteById(K key);\n\t\n\tpublic int deleteBatch(List<K> list);\n\t\n```\n### Mapper自定义方法\n在很多场景中，我们使用以上的自带的通用方法远远不能满足我们的需求，我们往往需要额外扩展新的Mapper方法、XML标签，我们使用了Ourbatis之后该如何实现呢？\n\n首先看一下我们的需求，在上述Demo中，我们在UserMapper中增加一个方法``selectNameById``：\n```\nimport org.nico.ourbatis.domain.User;\npublic interface UserMapper extends SimpleMapper<User, Integer>{\n    public String selectNameById(Integer userId);\n}\n```\n和Mybatis一样，需要在``resources``资源目录下新建一个文件夹``ourbatis-mappers``，然后在其中新建一个XML文件，命名规则为：\n```\nDomainClassSimpleName + Mapper.xml\n```\n其中``DomainClassSimpleName``就是我们实体类的类名，这里是为``User``，那么新建的XML名为``UserMapper.xml``。\n```\nsrc/main/resources\n - ourbatis-mappers\n   - UserMapper.xml\n```\n之后，打开``UserMapper.xml``，开始编写Mapper中``selectNameById``方法对应的标签：\n```\n<select id=\"selectNameById\" resultType=\"java.lang.String\">\n    select name from user where id = #{userId}\n</select>\n```\n注意，整个文件中只需要写标签就行了，其他的什么都不需要，这是为什么呢？深入之后你就会明白，这里先不多说！\n\n接下来，就没有接下来了，可以直接使用``selectNameById``方法了。\n### 深入了解Ourbatis\n![ourbatis 流程图](https://user-gold-cdn.xitu.io/2018/10/18/1668605ac4cc678d?w=540&h=816&f=png&s=22436)\n\n当服务启动的时候，Ourbatis首先会扫描``ourbatis.domain-locations``配置包下的所有实体类，将之映射为与之对应的表结构数据：\n![ourbatis Mapping](https://user-gold-cdn.xitu.io/2018/10/18/166865c063369ef6?w=741&h=270&f=png&s=10672)\n\n然后通过``ourbatis.xml``的渲染，生成一个又一个的XML文件，最后将之重新Build到Mybatis容器中！\n\n整个过程分为两个核心点：\n - 1、映射实体类为元数据\n - 2、使用``ourbatis.xml``渲染元数据为XML文件\n\n我会一一介绍之~\n#### 映射实体类为元数据\n在映射时，我们要根据自己数据库字段命名的风格去调整映射规则，就需要在第1个核心点中去做处理，Ourbatis使用包装器来完成：\n```\npublic interface Wrapper<T> {\n\tpublic String wrapping(T value);\n}\n```\n对于需要映射的字段，如**表名**和**表字段名**，它们都将会经过一个包装器链条的处理之后再投入到``ourbatis.xml``中做渲染，这样就使得我们可以自定义包装器出更换映射的字段格式，具体方式可以参考官方Wiki：[Wrapper包装器](https://github.com/ainilili/ourbatis/wiki/Wrapper%E5%8C%85%E8%A3%85%E5%99%A8)\n\n#### 使用``ourbatis.xml``渲染元数据为XML文件\n而在于第2个核心点中，Ourbatis通过自定义标签做模板渲染，我们可以先看一下官方默认的``ourbatis.xml``内部构造：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"@{mapperClassName}\">\n\t<resultMap id=\"BaseResultMap\" type=\"@{domainClassName}\">\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t<id column=\"@{elem.jdbcName}\" property=\"@{elem.javaName}\" />\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<result column=\"@{elem.jdbcName}\" property=\"@{elem.javaName}\" />\n\t\t</ourbatis:foreach>\n\t</resultMap>\n\n\t<sql id=\"Base_Column_List\">\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t</sql>\n\n\t<select id=\"selectById\" parameterType=\"java.lang.Object\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<select id=\"selectEntity\" parameterType=\"@{domainClassName}\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectCount\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"long\">\n\t\tselect count(0)\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectPage\"\n\t\tparameterType=\"org.nico.ourbatis.entity.Page\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<if test=\"entity != null\">\n\t\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t\t<if test=\"entity.@{elem.javaName} != null\">\n\t\t\t\t\tand `@{elem.jdbcName}` = #{entity.@{elem.javaName}}\n\t\t\t\t</if>\n\t\t\t</ourbatis:foreach>\n\t\t</if>\n\t\t<if test=\"orderBy != null\">\n\t\t\torder by ${orderBy}\n\t\t</if>\n\t\t<if test=\"start != null and end != null\">\n\t\t\tlimit ${start},${end}\n\t\t</if>\n\t</select>\n\n\t<select id=\"selectList\" parameterType=\"@{domainClassName}\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<select id=\"selectId\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"java.lang.Object\">\n\t\tselect\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectIds\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"java.lang.Object\">\n\t\tselect\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<delete id=\"deleteById\" parameterType=\"java.lang.Object\">\n\t\tdelete\n\t\tfrom @{tableName}\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</delete>\n\n\t<insert id=\"insert\" keyProperty=\"@{primaryColumns.0.jdbcName}\"\n\t\tuseGeneratedKeys=\"true\" parameterType=\"@{domainClassName}\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<include refid=\"Base_Column_List\" />\n\t\t)\n\t\tvalues (\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t#{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t\t)\n\t</insert>\n\n\t<insert id=\"insertSelective\"\n\t\tkeyProperty=\"@{primaryColumns.0.jdbcName}\" useGeneratedKeys=\"true\"\n\t\tparameterType=\"@{domainClassName}\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t,`@{elem.jdbcName}`\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\t)\n\t\tvalues (\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t#{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t, #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\t)\n\t</insert>\n\n\t<insert id=\"insertBatch\"\n\t\tkeyProperty=\"@{primaryColumns.0.jdbcName}\" useGeneratedKeys=\"true\"\n\t\tparameterType=\"java.util.List\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<include refid=\"Base_Column_List\" />\n\t\t)\n\t\tvalues\n\t\t<foreach collection=\"list\" index=\"index\" item=\"item\"\n\t\t\tseparator=\",\">\n\t\t\t(\n\t\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t#{item.@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t\t)\n\t\t</foreach>\n\t</insert>\n\n\t<update id=\"update\" parameterType=\"@{domainClassName}\">\n\t\tupdate @{tableName}\n\t\t<set>\n\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t</set>\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</update>\n\n\t<update id=\"updateSelective\" parameterType=\"@{domainClassName}\">\n\t\tupdate @{tableName}\n\t\t<set>\n\t\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t\t,`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t\t</if>\n\t\t\t</ourbatis:foreach>\n\t\t</set>\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</update>\n\n\t<update id=\"updateBatch\" parameterType=\"java.util.List\">\n\t\t<foreach collection=\"list\" index=\"index\" item=\"item\"\n\t\t\tseparator=\";\">\n\t\t\tupdate @{tableName}\n\t\t\t<set>\n\t\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\"\n\t\t\t\t\tsplit=\",\">\n\t\t\t\t\t`@{elem.jdbcName}` = #{item.@{elem.javaName}}\n\t\t\t\t</ourbatis:foreach>\n\t\t\t</set>\n\t\t\twhere 1=1\n\t\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t\tand `@{elem.jdbcName}` = #{item.@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t</foreach>\n\t</update>\n\n\t<delete id=\"deleteBatch\" parameterType=\"java.util.List\">\n\t\tdelete from @{tableName} where @{primaryColumns.0.jdbcName} in\n\t\t<foreach close=\")\" collection=\"list\" index=\"index\" item=\"item\"\n\t\t\topen=\"(\" separator=\",\">\n\t\t\t#{item}\n\t\t</foreach>\n\t</delete>\n\n\t<delete id=\"delete\" parameterType=\"@{domainClassName}\">\n\t\tdelete from @{tableName} where 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</delete>\n\n\t<ourbatis:ref path=\"classpath:ourbatis-mappers/@{domainSimpleClassName}Mapper.xml\" />\n</mapper>\n```\n可以看出来，``ourbatis.xml``内容类似于原生的Mybatis的XML，不同的是，有两个陌生的标签：\n - ourbatis:foreach 对元数据中的列表进行循环渲染\n - ourbatis:ref 引入外界文件内容\n\n这是Ourbatis中独有的标签，Ourbatis也提供着对应的入口让我们去自定义标签：\n```\nClass: org.nico.ourbatis.Ourbatis\nField: \npublic static final Map<String, AssistAdapter> ASSIST_ADAPTERS = new HashMap<String, AssistAdapter>(){\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t{\n\t\t\tput(\"ourbatis:foreach\", new ForeachAdapter());\n\t\t\tput(\"ourbatis:ref\", new RefAdapter());\n\t\t}\n\t};\n```\n我们可以修改``org.nico.ourbatis.Ourbatis``类中的静态参数``ASSIST_ADAPTERS``去删除、更新和添加自定义标签，需要实现一个标签适配器，我们可以看一下最简单的``RefAdapter``适配器的实现：\n```\npublic class RefAdapter extends AssistAdapter{\n\t@Override\n\tpublic String adapter(Map<String, Object> datas, NoelRender render, Document document) {\n\t\tString path = render.rending(datas, document.getParameter(\"path\"), \"domainSimpleClassName\");\n\t\tString result =  StreamUtils.convertToString(path.replaceAll(\"classpath:\", \"\"));\n\t\treturn result == null ? \"\" : result.trim();\n\t}\n}\n```\nOurbatis中只定义了上述两个自定义标签已足够满足需求，通过``foreach``标签，将元数据中的集合遍历渲染，通过``ref``标签引入外界资源，也就是我们之前所说的对Mapper接口中方法的扩展！\n```\n<ourbatis:ref path=\"classpath:ourbatis-mappers/@{domainSimpleClassName}Mapper.xml\" />\n```\n其中的path就是当前项目classpath路径的相对路径，而``@{domainSimpleClassName}``就代表着实体类的类名，更多的系统参数可以参考Wiki：[元数据映射](https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84)\n\n通过这种模板渲染的机制，Ourbatis是相当灵活的，我们不仅可以通过引入外部文件进行扩展，当我们需要添加或修改通用方法时，我们可以可以自定义``ourbatis.xml``的内容，如何做到呢？复制一份将之放在资源目录下就可以了！\n\n看到这里，相信大家已经知道Ourbatis的基本原理已经使用方式，我就再次不多说了，更多细节可以去官方Wiki中阅读：[Ourbatis Wiki](https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84)","source":"_posts/测试，hexo.md","raw":"title: 使Mybatis开发变得更加轻松的增强工具 — Ourbatis\ndate: 2018-11-06 10:11:36\ntags:\n---\n## 一、Mybatis的不足之处\nMybatis是一款优秀的及其灵活的持久层框架，通过XML配置并映射到Mapper接口为Service层提供基础数据操作入口。\n\n这么优秀的框架竟然还有不足之处？ \n\n俗话说人无完人，因为Mybatis实在是太灵活了，灵活到每个Mapper接口都需要定制对应的XML，所以就会引发一些问题。\n\n### 问题一：配置文件繁多\n假如一个系统中DB中涉及100张表，我们就需要写``100``个Mapper接口，还没完，最可怕的是，我们要为这``100``个Mapper接口定制与之对应的``100``套XML。而每个Mapper都必不可少的需要增删改查功能，我们就要写``100``遍增删改查，作为高贵的Java开发工程师，这是不能容忍的，于是``Mybatis Generator``诞生了，然而又会引发另一个问题！\n\n### 问题二：维护困难\n我们使用``Mybatis Generator``解决了问题一，再多的文件生成就是了，简单粗暴，貌似解决了所有的问题，Mybatis完美了！\n\n不要高兴的太早，在系统刚刚建立起来时，我们使用``Mybatis Generator``生成了一堆XML，在开发过程中，产品忽然提了一个新的需求，项目经理根据这个需求在某张表中增加或变动了一个字段，这时，我猜你的操作是这样：\n - 1、找到对应表的XML\n - 2、将该XML中自定义的一段标签复制出来，保存在本地\n - 3、使用``Mybatis Generator``重新生成该表的XML\n - 4、将之覆盖当前的XML\n - 5、将自定义的一段标签再粘贴进新的XML中\n\n在这个过程中，如果我们在第2步时漏复制了一段标签，等整个操作完成之后，又别是一番滋味在心头~\n\n### 问题三：编写XML困难\n假如肝不错，问题二也是小CASE，那么问题又来了，我们如何在繁长的XML中去编写和修改我们的XML呢。\n\n当我们打开要编辑的XML，映入眼帘的就是1000多行的XML，其中900行都是通用的增删改查操作，要新增一个标签，我们需要拉至文件底部编写新的数据操作，要更新一个标签，我们需要通过``Ctrl + F``寻找目标标签再进行修改。\n\n如何避免这些问题呢？\n\n如何让Mybatis增强通用性又不失灵活呢？\n\n## 二、使用Ourbatis辅助Mybatis\nOurbatis是一款Mybatis开发增强工具，小巧简洁，项目地址：\n - Github：[https://github.com/ainilili/ourbatis](https://github.com/ainilili/ourbatis)\n - Gitee：[https://gitee.com/ainilili/ourbatis](https://gitee.com/ainilili/ourbatis)\n - Wiki：[https://github.com/ainilili/ourbatis/wiki](https://github.com/ainilili/ourbatis/wiki)\n - Demo：[https://github.com/ainilili/ourbatis-simple](https://github.com/ainilili/ourbatis-simple)\n \n特性：\n - **1**、简洁方便，可以让Mybatis无XML化开发。\n - **2**、优雅解耦，通用和自定义的SQL标签完全隔离，让维护更加轻松。\n - **3**、无侵入性，Mybatis和Ourbatis可同时使用，配置简洁。\n - **4**、灵活可控，通用模板可自定义及扩展。\n - **5**、部署快捷，只需要一个依赖，两个配置，即可直接运行。\n - **6**、多数据源，在多数据源环境下也可以照常使用。\n\n### 关于Ourbatis使用的一个小Demo\n环境：\n - Spring Boot 2.0.5.RELEASE\n - Ourbatis 1.0.5\n - JAVA 8\n - Mysql\n\n 以``Spring Boot 2.0.5.RELEASE``版本为例，在可以正常使用Mybatis的项目中，``pom.xml``添加如下依赖：\n```\n    <dependency>\n        \t<groupId>com.smallnico</groupId>\n        \t<artifactId>ourbatis-spring-boot-starter</artifactId>\n        \t<version>1.0.5</version>\n\t</dependency>\n```\n在配置文件中增加一下配置：\n```\nourbatis.domain-locations=实体类所在包名\n```\n接下来，Mapper接口只需要继承``SimpleMapper``即可：\n```\nimport org.nico.ourbatis.domain.User;\npublic interface UserMapper extends SimpleMapper<User, Integer>{\n}\n```\n至此，一个使用Ourbatis的简单应用已经部署起来了，之后，你就可以使用一些Ourbatis默认的通用操作方法：\n```\n\tpublic T selectById(K key);\n\t\n\tpublic T selectEntity(T condition);\n\t\n\tpublic List<T> selectList(T condition);\n\t\n\tpublic long selectCount(Object condition);\n\t\n\tpublic List<T> selectPage(Page<Object> page);\n\t\n\tdefault PageResult<T> selectPageResult(Page<Object> page){\n\t\tlong total = selectCount(page.getEntity());\n\t\tList<T> results = null;\n\t\tif(total > 0) {\n\t\t\tresults = selectPage(page);\n\t\t}\n\t\treturn new PageResult<>(total, results);\n\t}\n\t\n\tpublic K selectId(T condition);\n\t\n\tpublic List<K> selectIds(T condition);\n\t\n\tpublic int insert(T entity);\n\t\n\tpublic int insertSelective(T entity);\n\t\n\tpublic int insertBatch(List<T> list);\n\t\n\tpublic int update(T entity);\n\t\n\tpublic int updateSelective(T entity);\n\t\n\tpublic int updateBatch(List<T> list);\n\t\n\tpublic int delete(T condition);\n\t\n\tpublic int deleteById(K key);\n\t\n\tpublic int deleteBatch(List<K> list);\n\t\n```\n### Mapper自定义方法\n在很多场景中，我们使用以上的自带的通用方法远远不能满足我们的需求，我们往往需要额外扩展新的Mapper方法、XML标签，我们使用了Ourbatis之后该如何实现呢？\n\n首先看一下我们的需求，在上述Demo中，我们在UserMapper中增加一个方法``selectNameById``：\n```\nimport org.nico.ourbatis.domain.User;\npublic interface UserMapper extends SimpleMapper<User, Integer>{\n    public String selectNameById(Integer userId);\n}\n```\n和Mybatis一样，需要在``resources``资源目录下新建一个文件夹``ourbatis-mappers``，然后在其中新建一个XML文件，命名规则为：\n```\nDomainClassSimpleName + Mapper.xml\n```\n其中``DomainClassSimpleName``就是我们实体类的类名，这里是为``User``，那么新建的XML名为``UserMapper.xml``。\n```\nsrc/main/resources\n - ourbatis-mappers\n   - UserMapper.xml\n```\n之后，打开``UserMapper.xml``，开始编写Mapper中``selectNameById``方法对应的标签：\n```\n<select id=\"selectNameById\" resultType=\"java.lang.String\">\n    select name from user where id = #{userId}\n</select>\n```\n注意，整个文件中只需要写标签就行了，其他的什么都不需要，这是为什么呢？深入之后你就会明白，这里先不多说！\n\n接下来，就没有接下来了，可以直接使用``selectNameById``方法了。\n### 深入了解Ourbatis\n![ourbatis 流程图](https://user-gold-cdn.xitu.io/2018/10/18/1668605ac4cc678d?w=540&h=816&f=png&s=22436)\n\n当服务启动的时候，Ourbatis首先会扫描``ourbatis.domain-locations``配置包下的所有实体类，将之映射为与之对应的表结构数据：\n![ourbatis Mapping](https://user-gold-cdn.xitu.io/2018/10/18/166865c063369ef6?w=741&h=270&f=png&s=10672)\n\n然后通过``ourbatis.xml``的渲染，生成一个又一个的XML文件，最后将之重新Build到Mybatis容器中！\n\n整个过程分为两个核心点：\n - 1、映射实体类为元数据\n - 2、使用``ourbatis.xml``渲染元数据为XML文件\n\n我会一一介绍之~\n#### 映射实体类为元数据\n在映射时，我们要根据自己数据库字段命名的风格去调整映射规则，就需要在第1个核心点中去做处理，Ourbatis使用包装器来完成：\n```\npublic interface Wrapper<T> {\n\tpublic String wrapping(T value);\n}\n```\n对于需要映射的字段，如**表名**和**表字段名**，它们都将会经过一个包装器链条的处理之后再投入到``ourbatis.xml``中做渲染，这样就使得我们可以自定义包装器出更换映射的字段格式，具体方式可以参考官方Wiki：[Wrapper包装器](https://github.com/ainilili/ourbatis/wiki/Wrapper%E5%8C%85%E8%A3%85%E5%99%A8)\n\n#### 使用``ourbatis.xml``渲染元数据为XML文件\n而在于第2个核心点中，Ourbatis通过自定义标签做模板渲染，我们可以先看一下官方默认的``ourbatis.xml``内部构造：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"@{mapperClassName}\">\n\t<resultMap id=\"BaseResultMap\" type=\"@{domainClassName}\">\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t<id column=\"@{elem.jdbcName}\" property=\"@{elem.javaName}\" />\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<result column=\"@{elem.jdbcName}\" property=\"@{elem.javaName}\" />\n\t\t</ourbatis:foreach>\n\t</resultMap>\n\n\t<sql id=\"Base_Column_List\">\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t</sql>\n\n\t<select id=\"selectById\" parameterType=\"java.lang.Object\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<select id=\"selectEntity\" parameterType=\"@{domainClassName}\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectCount\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"long\">\n\t\tselect count(0)\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectPage\"\n\t\tparameterType=\"org.nico.ourbatis.entity.Page\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<if test=\"entity != null\">\n\t\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t\t<if test=\"entity.@{elem.javaName} != null\">\n\t\t\t\t\tand `@{elem.jdbcName}` = #{entity.@{elem.javaName}}\n\t\t\t\t</if>\n\t\t\t</ourbatis:foreach>\n\t\t</if>\n\t\t<if test=\"orderBy != null\">\n\t\t\torder by ${orderBy}\n\t\t</if>\n\t\t<if test=\"start != null and end != null\">\n\t\t\tlimit ${start},${end}\n\t\t</if>\n\t</select>\n\n\t<select id=\"selectList\" parameterType=\"@{domainClassName}\"\n\t\tresultMap=\"BaseResultMap\">\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<select id=\"selectId\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"java.lang.Object\">\n\t\tselect\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\tlimit 1\n\t</select>\n\n\t<select id=\"selectIds\" parameterType=\"@{domainClassName}\"\n\t\tresultType=\"java.lang.Object\">\n\t\tselect\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\tfrom @{tableName}\n\t\twhere 1 = 1\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</select>\n\n\t<delete id=\"deleteById\" parameterType=\"java.lang.Object\">\n\t\tdelete\n\t\tfrom @{tableName}\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</delete>\n\n\t<insert id=\"insert\" keyProperty=\"@{primaryColumns.0.jdbcName}\"\n\t\tuseGeneratedKeys=\"true\" parameterType=\"@{domainClassName}\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<include refid=\"Base_Column_List\" />\n\t\t)\n\t\tvalues (\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t#{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t\t)\n\t</insert>\n\n\t<insert id=\"insertSelective\"\n\t\tkeyProperty=\"@{primaryColumns.0.jdbcName}\" useGeneratedKeys=\"true\"\n\t\tparameterType=\"@{domainClassName}\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\tsplit=\",\">\n\t\t\t`@{elem.jdbcName}`\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t,`@{elem.jdbcName}`\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\t)\n\t\tvalues (\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t#{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t, #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t\t)\n\t</insert>\n\n\t<insert id=\"insertBatch\"\n\t\tkeyProperty=\"@{primaryColumns.0.jdbcName}\" useGeneratedKeys=\"true\"\n\t\tparameterType=\"java.util.List\">\n\t\tinsert into @{tableName}\n\t\t(\n\t\t<include refid=\"Base_Column_List\" />\n\t\t)\n\t\tvalues\n\t\t<foreach collection=\"list\" index=\"index\" item=\"item\"\n\t\t\tseparator=\",\">\n\t\t\t(\n\t\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t#{item.@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t\t)\n\t\t</foreach>\n\t</insert>\n\n\t<update id=\"update\" parameterType=\"@{domainClassName}\">\n\t\tupdate @{tableName}\n\t\t<set>\n\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t</set>\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</update>\n\n\t<update id=\"updateSelective\" parameterType=\"@{domainClassName}\">\n\t\tupdate @{tableName}\n\t\t<set>\n\t\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\"\n\t\t\t\tsplit=\",\">\n\t\t\t\t`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\">\n\t\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\t\t,`@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t\t</if>\n\t\t\t</ourbatis:foreach>\n\t\t</set>\n\t\twhere 1=1\n\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t</ourbatis:foreach>\n\t</update>\n\n\t<update id=\"updateBatch\" parameterType=\"java.util.List\">\n\t\t<foreach collection=\"list\" index=\"index\" item=\"item\"\n\t\t\tseparator=\";\">\n\t\t\tupdate @{tableName}\n\t\t\t<set>\n\t\t\t\t<ourbatis:foreach list=\"normalColumns\" var=\"elem\"\n\t\t\t\t\tsplit=\",\">\n\t\t\t\t\t`@{elem.jdbcName}` = #{item.@{elem.javaName}}\n\t\t\t\t</ourbatis:foreach>\n\t\t\t</set>\n\t\t\twhere 1=1\n\t\t\t<ourbatis:foreach list=\"primaryColumns\" var=\"elem\">\n\t\t\t\tand `@{elem.jdbcName}` = #{item.@{elem.javaName}}\n\t\t\t</ourbatis:foreach>\n\t\t</foreach>\n\t</update>\n\n\t<delete id=\"deleteBatch\" parameterType=\"java.util.List\">\n\t\tdelete from @{tableName} where @{primaryColumns.0.jdbcName} in\n\t\t<foreach close=\")\" collection=\"list\" index=\"index\" item=\"item\"\n\t\t\topen=\"(\" separator=\",\">\n\t\t\t#{item}\n\t\t</foreach>\n\t</delete>\n\n\t<delete id=\"delete\" parameterType=\"@{domainClassName}\">\n\t\tdelete from @{tableName} where 1 = 1\n\t\t<ourbatis:foreach list=\"allColumns\" var=\"elem\">\n\t\t\t<if test=\"@{elem.javaName} != null\">\n\t\t\t\tand `@{elem.jdbcName}` = #{@{elem.javaName}}\n\t\t\t</if>\n\t\t</ourbatis:foreach>\n\t</delete>\n\n\t<ourbatis:ref path=\"classpath:ourbatis-mappers/@{domainSimpleClassName}Mapper.xml\" />\n</mapper>\n```\n可以看出来，``ourbatis.xml``内容类似于原生的Mybatis的XML，不同的是，有两个陌生的标签：\n - ourbatis:foreach 对元数据中的列表进行循环渲染\n - ourbatis:ref 引入外界文件内容\n\n这是Ourbatis中独有的标签，Ourbatis也提供着对应的入口让我们去自定义标签：\n```\nClass: org.nico.ourbatis.Ourbatis\nField: \npublic static final Map<String, AssistAdapter> ASSIST_ADAPTERS = new HashMap<String, AssistAdapter>(){\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t{\n\t\t\tput(\"ourbatis:foreach\", new ForeachAdapter());\n\t\t\tput(\"ourbatis:ref\", new RefAdapter());\n\t\t}\n\t};\n```\n我们可以修改``org.nico.ourbatis.Ourbatis``类中的静态参数``ASSIST_ADAPTERS``去删除、更新和添加自定义标签，需要实现一个标签适配器，我们可以看一下最简单的``RefAdapter``适配器的实现：\n```\npublic class RefAdapter extends AssistAdapter{\n\t@Override\n\tpublic String adapter(Map<String, Object> datas, NoelRender render, Document document) {\n\t\tString path = render.rending(datas, document.getParameter(\"path\"), \"domainSimpleClassName\");\n\t\tString result =  StreamUtils.convertToString(path.replaceAll(\"classpath:\", \"\"));\n\t\treturn result == null ? \"\" : result.trim();\n\t}\n}\n```\nOurbatis中只定义了上述两个自定义标签已足够满足需求，通过``foreach``标签，将元数据中的集合遍历渲染，通过``ref``标签引入外界资源，也就是我们之前所说的对Mapper接口中方法的扩展！\n```\n<ourbatis:ref path=\"classpath:ourbatis-mappers/@{domainSimpleClassName}Mapper.xml\" />\n```\n其中的path就是当前项目classpath路径的相对路径，而``@{domainSimpleClassName}``就代表着实体类的类名，更多的系统参数可以参考Wiki：[元数据映射](https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84)\n\n通过这种模板渲染的机制，Ourbatis是相当灵活的，我们不仅可以通过引入外部文件进行扩展，当我们需要添加或修改通用方法时，我们可以可以自定义``ourbatis.xml``的内容，如何做到呢？复制一份将之放在资源目录下就可以了！\n\n看到这里，相信大家已经知道Ourbatis的基本原理已经使用方式，我就再次不多说了，更多细节可以去官方Wiki中阅读：[Ourbatis Wiki](https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84)","slug":"测试，hexo","published":1,"updated":"2018-11-06T06:28:12.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzn000a9ctpqv2kqlx7","content":"<h2 id=\"一-mybatis的不足之处\"><a class=\"header-anchor\" href=\"#一-mybatis的不足之处\">¶</a>一、Mybatis的不足之处</h2>\n<p>Mybatis是一款优秀的及其灵活的持久层框架，通过XML配置并映射到Mapper接口为Service层提供基础数据操作入口。</p>\n<p>这么优秀的框架竟然还有不足之处？</p>\n<p>俗话说人无完人，因为Mybatis实在是太灵活了，灵活到每个Mapper接口都需要定制对应的XML，所以就会引发一些问题。</p>\n<h3 id=\"问题一：配置文件繁多\"><a class=\"header-anchor\" href=\"#问题一：配置文件繁多\">¶</a>问题一：配置文件繁多</h3>\n<p>假如一个系统中DB中涉及100张表，我们就需要写<code>100</code>个Mapper接口，还没完，最可怕的是，我们要为这<code>100</code>个Mapper接口定制与之对应的<code>100</code>套XML。而每个Mapper都必不可少的需要增删改查功能，我们就要写<code>100</code>遍增删改查，作为高贵的Java开发工程师，这是不能容忍的，于是<code>Mybatis Generator</code>诞生了，然而又会引发另一个问题！</p>\n<h3 id=\"问题二：维护困难\"><a class=\"header-anchor\" href=\"#问题二：维护困难\">¶</a>问题二：维护困难</h3>\n<p>我们使用<code>Mybatis Generator</code>解决了问题一，再多的文件生成就是了，简单粗暴，貌似解决了所有的问题，Mybatis完美了！</p>\n<p>不要高兴的太早，在系统刚刚建立起来时，我们使用<code>Mybatis Generator</code>生成了一堆XML，在开发过程中，产品忽然提了一个新的需求，项目经理根据这个需求在某张表中增加或变动了一个字段，这时，我猜你的操作是这样：</p>\n<ul>\n<li>1、找到对应表的XML</li>\n<li>2、将该XML中自定义的一段标签复制出来，保存在本地</li>\n<li>3、使用<code>Mybatis Generator</code>重新生成该表的XML</li>\n<li>4、将之覆盖当前的XML</li>\n<li>5、将自定义的一段标签再粘贴进新的XML中</li>\n</ul>\n<p>在这个过程中，如果我们在第2步时漏复制了一段标签，等整个操作完成之后，又别是一番滋味在心头~</p>\n<h3 id=\"问题三：编写xml困难\"><a class=\"header-anchor\" href=\"#问题三：编写xml困难\">¶</a>问题三：编写XML困难</h3>\n<p>假如肝不错，问题二也是小CASE，那么问题又来了，我们如何在繁长的XML中去编写和修改我们的XML呢。</p>\n<p>当我们打开要编辑的XML，映入眼帘的就是1000多行的XML，其中900行都是通用的增删改查操作，要新增一个标签，我们需要拉至文件底部编写新的数据操作，要更新一个标签，我们需要通过<code>Ctrl + F</code>寻找目标标签再进行修改。</p>\n<p>如何避免这些问题呢？</p>\n<p>如何让Mybatis增强通用性又不失灵活呢？</p>\n<h2 id=\"二-使用ourbatis辅助mybatis\"><a class=\"header-anchor\" href=\"#二-使用ourbatis辅助mybatis\">¶</a>二、使用Ourbatis辅助Mybatis</h2>\n<p>Ourbatis是一款Mybatis开发增强工具，小巧简洁，项目地址：</p>\n<ul>\n<li>Github：<a href=\"https://github.com/ainilili/ourbatis\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis</a></li>\n<li>Gitee：<a href=\"https://gitee.com/ainilili/ourbatis\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ainilili/ourbatis</a></li>\n<li>Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis/wiki</a></li>\n<li>Demo：<a href=\"https://github.com/ainilili/ourbatis-simple\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis-simple</a></li>\n</ul>\n<p>特性：</p>\n<ul>\n<li><strong>1</strong>、简洁方便，可以让Mybatis无XML化开发。</li>\n<li><strong>2</strong>、优雅解耦，通用和自定义的SQL标签完全隔离，让维护更加轻松。</li>\n<li><strong>3</strong>、无侵入性，Mybatis和Ourbatis可同时使用，配置简洁。</li>\n<li><strong>4</strong>、灵活可控，通用模板可自定义及扩展。</li>\n<li><strong>5</strong>、部署快捷，只需要一个依赖，两个配置，即可直接运行。</li>\n<li><strong>6</strong>、多数据源，在多数据源环境下也可以照常使用。</li>\n</ul>\n<h3 id=\"关于ourbatis使用的一个小demo\"><a class=\"header-anchor\" href=\"#关于ourbatis使用的一个小demo\">¶</a>关于Ourbatis使用的一个小Demo</h3>\n<p>环境：</p>\n<ul>\n<li>Spring Boot 2.0.5.RELEASE</li>\n<li>Ourbatis 1.0.5</li>\n<li>JAVA 8</li>\n<li>Mysql</li>\n</ul>\n<p>以<code>Spring Boot 2.0.5.RELEASE</code>版本为例，在可以正常使用Mybatis的项目中，<code>pom.xml</code>添加如下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">       \t&lt;groupId&gt;com.smallnico&lt;/groupId&gt;</span><br><span class=\"line\">       \t&lt;artifactId&gt;ourbatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">       \t&lt;version&gt;1.0.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在配置文件中增加一下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ourbatis.domain-locations=实体类所在包名</span><br></pre></td></tr></table></figure>\n<p>接下来，Mapper接口只需要继承<code>SimpleMapper</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.nico.ourbatis.domain.User;</span><br><span class=\"line\">public interface UserMapper extends SimpleMapper&lt;User, Integer&gt;&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，一个使用Ourbatis的简单应用已经部署起来了，之后，你就可以使用一些Ourbatis默认的通用操作方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T selectById(K key);</span><br><span class=\"line\"></span><br><span class=\"line\">public T selectEntity(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;T&gt; selectList(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public long selectCount(Object condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;T&gt; selectPage(Page&lt;Object&gt; page);</span><br><span class=\"line\"></span><br><span class=\"line\">default PageResult&lt;T&gt; selectPageResult(Page&lt;Object&gt; page)&#123;</span><br><span class=\"line\">\tlong total = selectCount(page.getEntity());</span><br><span class=\"line\">\tList&lt;T&gt; results = null;</span><br><span class=\"line\">\tif(total &gt; 0) &#123;</span><br><span class=\"line\">\t\tresults = selectPage(page);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn new PageResult&lt;&gt;(total, results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public K selectId(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;K&gt; selectIds(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insert(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insertSelective(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insertBatch(List&lt;T&gt; list);</span><br><span class=\"line\"></span><br><span class=\"line\">public int update(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int updateSelective(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int updateBatch(List&lt;T&gt; list);</span><br><span class=\"line\"></span><br><span class=\"line\">public int delete(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public int deleteById(K key);</span><br><span class=\"line\"></span><br><span class=\"line\">public int deleteBatch(List&lt;K&gt; list);</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapper自定义方法\"><a class=\"header-anchor\" href=\"#mapper自定义方法\">¶</a>Mapper自定义方法</h3>\n<p>在很多场景中，我们使用以上的自带的通用方法远远不能满足我们的需求，我们往往需要额外扩展新的Mapper方法、XML标签，我们使用了Ourbatis之后该如何实现呢？</p>\n<p>首先看一下我们的需求，在上述Demo中，我们在UserMapper中增加一个方法<code>selectNameById</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.nico.ourbatis.domain.User;</span><br><span class=\"line\">public interface UserMapper extends SimpleMapper&lt;User, Integer&gt;&#123;</span><br><span class=\"line\">    public String selectNameById(Integer userId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和Mybatis一样，需要在<code>resources</code>资源目录下新建一个文件夹<code>ourbatis-mappers</code>，然后在其中新建一个XML文件，命名规则为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DomainClassSimpleName + Mapper.xml</span><br></pre></td></tr></table></figure>\n<p>其中<code>DomainClassSimpleName</code>就是我们实体类的类名，这里是为<code>User</code>，那么新建的XML名为<code>UserMapper.xml</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/main/resources</span><br><span class=\"line\"> - ourbatis-mappers</span><br><span class=\"line\">   - UserMapper.xml</span><br></pre></td></tr></table></figure>\n<p>之后，打开<code>UserMapper.xml</code>，开始编写Mapper中<code>selectNameById</code>方法对应的标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;selectNameById&quot; resultType=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    select name from user where id = #&#123;userId&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，整个文件中只需要写标签就行了，其他的什么都不需要，这是为什么呢？深入之后你就会明白，这里先不多说！</p>\n<p>接下来，就没有接下来了，可以直接使用<code>selectNameById</code>方法了。</p>\n<h3 id=\"深入了解ourbatis\"><a class=\"header-anchor\" href=\"#深入了解ourbatis\">¶</a>深入了解Ourbatis</h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/1668605ac4cc678d?w=540&amp;h=816&amp;f=png&amp;s=22436\" alt=\"ourbatis 流程图\"></p>\n<p>当服务启动的时候，Ourbatis首先会扫描<code>ourbatis.domain-locations</code>配置包下的所有实体类，将之映射为与之对应的表结构数据：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/10/18/166865c063369ef6?w=741&amp;h=270&amp;f=png&amp;s=10672\" alt=\"ourbatis Mapping\"></p>\n<p>然后通过<code>ourbatis.xml</code>的渲染，生成一个又一个的XML文件，最后将之重新Build到Mybatis容器中！</p>\n<p>整个过程分为两个核心点：</p>\n<ul>\n<li>1、映射实体类为元数据</li>\n<li>2、使用<code>ourbatis.xml</code>渲染元数据为XML文件</li>\n</ul>\n<p>我会一一介绍之~</p>\n<h4 id=\"映射实体类为元数据\"><a class=\"header-anchor\" href=\"#映射实体类为元数据\">¶</a>映射实体类为元数据</h4>\n<p>在映射时，我们要根据自己数据库字段命名的风格去调整映射规则，就需要在第1个核心点中去做处理，Ourbatis使用包装器来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Wrapper&lt;T&gt; &#123;</span><br><span class=\"line\">\tpublic String wrapping(T value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于需要映射的字段，如<strong>表名</strong>和<strong>表字段名</strong>，它们都将会经过一个包装器链条的处理之后再投入到<code>ourbatis.xml</code>中做渲染，这样就使得我们可以自定义包装器出更换映射的字段格式，具体方式可以参考官方Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki/Wrapper%E5%8C%85%E8%A3%85%E5%99%A8\" target=\"_blank\" rel=\"noopener\">Wrapper包装器</a></p>\n<h4 id=\"使用ourbatis-xml渲染元数据为xml文件\"><a class=\"header-anchor\" href=\"#使用ourbatis-xml渲染元数据为xml文件\">¶</a>使用<code>ourbatis.xml</code>渲染元数据为XML文件</h4>\n<p>而在于第2个核心点中，Ourbatis通过自定义标签做模板渲染，我们可以先看一下官方默认的<code>ourbatis.xml</code>内部构造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;@&#123;mapperClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;@&#123;elem.jdbcName&#125;&quot; property=&quot;@&#123;elem.javaName&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;@&#123;elem.jdbcName&#125;&quot; property=&quot;@&#123;elem.javaName&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/sql&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectById&quot; parameterType=&quot;java.lang.Object&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectEntity&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectCount&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;long&quot;&gt;</span><br><span class=\"line\">\t\tselect count(0)</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectPage&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;org.nico.ourbatis.entity.Page&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;if test=&quot;entity != null&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;if test=&quot;entity.@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;entity.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;if test=&quot;orderBy != null&quot;&gt;</span><br><span class=\"line\">\t\t\torder by $&#123;orderBy&#125;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;if test=&quot;start != null and end != null&quot;&gt;</span><br><span class=\"line\">\t\t\tlimit $&#123;start&#125;,$&#123;end&#125;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectList&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectId&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectIds&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;deleteById&quot; parameterType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tdelete</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insert&quot; keyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot;</span><br><span class=\"line\">\t\tuseGeneratedKeys=&quot;true&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues (</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insertSelective&quot;</span><br><span class=\"line\">\t\tkeyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t,`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues (</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t, #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insertBatch&quot;</span><br><span class=\"line\">\t\tkeyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues</span><br><span class=\"line\">\t\t&lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\tseparator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t(</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t#&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;update&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;updateSelective&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t,`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;updateBatch&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\t&lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\tseparator=&quot;;&quot;&gt;</span><br><span class=\"line\">\t\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\t\twhere 1=1</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;deleteBatch&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\tdelete from @&#123;tableName&#125; where @&#123;primaryColumns.0.jdbcName&#125; in</span><br><span class=\"line\">\t\t&lt;foreach close=&quot;)&quot; collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\topen=&quot;(&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;item&#125;</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;delete&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tdelete from @&#123;tableName&#125; where 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;ourbatis:ref path=&quot;classpath:ourbatis-mappers/@&#123;domainSimpleClassName&#125;Mapper.xml&quot; /&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，<code>ourbatis.xml</code>内容类似于原生的Mybatis的XML，不同的是，有两个陌生的标签：</p>\n<ul>\n<li>ourbatis:foreach 对元数据中的列表进行循环渲染</li>\n<li>ourbatis:ref 引入外界文件内容</li>\n</ul>\n<p>这是Ourbatis中独有的标签，Ourbatis也提供着对应的入口让我们去自定义标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class: org.nico.ourbatis.Ourbatis</span><br><span class=\"line\">Field: </span><br><span class=\"line\">public static final Map&lt;String, AssistAdapter&gt; ASSIST_ADAPTERS = new HashMap&lt;String, AssistAdapter&gt;()&#123;</span><br><span class=\"line\">\t\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tput(&quot;ourbatis:foreach&quot;, new ForeachAdapter());</span><br><span class=\"line\">\t\t\tput(&quot;ourbatis:ref&quot;, new RefAdapter());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们可以修改<code>org.nico.ourbatis.Ourbatis</code>类中的静态参数<code>ASSIST_ADAPTERS</code>去删除、更新和添加自定义标签，需要实现一个标签适配器，我们可以看一下最简单的<code>RefAdapter</code>适配器的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RefAdapter extends AssistAdapter&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String adapter(Map&lt;String, Object&gt; datas, NoelRender render, Document document) &#123;</span><br><span class=\"line\">\t\tString path = render.rending(datas, document.getParameter(&quot;path&quot;), &quot;domainSimpleClassName&quot;);</span><br><span class=\"line\">\t\tString result =  StreamUtils.convertToString(path.replaceAll(&quot;classpath:&quot;, &quot;&quot;));</span><br><span class=\"line\">\t\treturn result == null ? &quot;&quot; : result.trim();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ourbatis中只定义了上述两个自定义标签已足够满足需求，通过<code>foreach</code>标签，将元数据中的集合遍历渲染，通过<code>ref</code>标签引入外界资源，也就是我们之前所说的对Mapper接口中方法的扩展！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ourbatis:ref path=&quot;classpath:ourbatis-mappers/@&#123;domainSimpleClassName&#125;Mapper.xml&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的path就是当前项目classpath路径的相对路径，而<code>@{domainSimpleClassName}</code>就代表着实体类的类名，更多的系统参数可以参考Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener\">元数据映射</a></p>\n<p>通过这种模板渲染的机制，Ourbatis是相当灵活的，我们不仅可以通过引入外部文件进行扩展，当我们需要添加或修改通用方法时，我们可以可以自定义<code>ourbatis.xml</code>的内容，如何做到呢？复制一份将之放在资源目录下就可以了！</p>\n<p>看到这里，相信大家已经知道Ourbatis的基本原理已经使用方式，我就再次不多说了，更多细节可以去官方Wiki中阅读：<a href=\"https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener\">Ourbatis Wiki</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-mybatis的不足之处\"><a class=\"header-anchor\" href=\"#一-mybatis的不足之处\">¶</a>一、Mybatis的不足之处</h2>\n<p>Mybatis是一款优秀的及其灵活的持久层框架，通过XML配置并映射到Mapper接口为Service层提供基础数据操作入口。</p>\n<p>这么优秀的框架竟然还有不足之处？</p>\n<p>俗话说人无完人，因为Mybatis实在是太灵活了，灵活到每个Mapper接口都需要定制对应的XML，所以就会引发一些问题。</p>\n<h3 id=\"问题一：配置文件繁多\"><a class=\"header-anchor\" href=\"#问题一：配置文件繁多\">¶</a>问题一：配置文件繁多</h3>\n<p>假如一个系统中DB中涉及100张表，我们就需要写<code>100</code>个Mapper接口，还没完，最可怕的是，我们要为这<code>100</code>个Mapper接口定制与之对应的<code>100</code>套XML。而每个Mapper都必不可少的需要增删改查功能，我们就要写<code>100</code>遍增删改查，作为高贵的Java开发工程师，这是不能容忍的，于是<code>Mybatis Generator</code>诞生了，然而又会引发另一个问题！</p>\n<h3 id=\"问题二：维护困难\"><a class=\"header-anchor\" href=\"#问题二：维护困难\">¶</a>问题二：维护困难</h3>\n<p>我们使用<code>Mybatis Generator</code>解决了问题一，再多的文件生成就是了，简单粗暴，貌似解决了所有的问题，Mybatis完美了！</p>\n<p>不要高兴的太早，在系统刚刚建立起来时，我们使用<code>Mybatis Generator</code>生成了一堆XML，在开发过程中，产品忽然提了一个新的需求，项目经理根据这个需求在某张表中增加或变动了一个字段，这时，我猜你的操作是这样：</p>\n<ul>\n<li>1、找到对应表的XML</li>\n<li>2、将该XML中自定义的一段标签复制出来，保存在本地</li>\n<li>3、使用<code>Mybatis Generator</code>重新生成该表的XML</li>\n<li>4、将之覆盖当前的XML</li>\n<li>5、将自定义的一段标签再粘贴进新的XML中</li>\n</ul>\n<p>在这个过程中，如果我们在第2步时漏复制了一段标签，等整个操作完成之后，又别是一番滋味在心头~</p>\n<h3 id=\"问题三：编写xml困难\"><a class=\"header-anchor\" href=\"#问题三：编写xml困难\">¶</a>问题三：编写XML困难</h3>\n<p>假如肝不错，问题二也是小CASE，那么问题又来了，我们如何在繁长的XML中去编写和修改我们的XML呢。</p>\n<p>当我们打开要编辑的XML，映入眼帘的就是1000多行的XML，其中900行都是通用的增删改查操作，要新增一个标签，我们需要拉至文件底部编写新的数据操作，要更新一个标签，我们需要通过<code>Ctrl + F</code>寻找目标标签再进行修改。</p>\n<p>如何避免这些问题呢？</p>\n<p>如何让Mybatis增强通用性又不失灵活呢？</p>\n<h2 id=\"二-使用ourbatis辅助mybatis\"><a class=\"header-anchor\" href=\"#二-使用ourbatis辅助mybatis\">¶</a>二、使用Ourbatis辅助Mybatis</h2>\n<p>Ourbatis是一款Mybatis开发增强工具，小巧简洁，项目地址：</p>\n<ul>\n<li>Github：<a href=\"https://github.com/ainilili/ourbatis\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis</a></li>\n<li>Gitee：<a href=\"https://gitee.com/ainilili/ourbatis\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ainilili/ourbatis</a></li>\n<li>Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis/wiki</a></li>\n<li>Demo：<a href=\"https://github.com/ainilili/ourbatis-simple\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/ourbatis-simple</a></li>\n</ul>\n<p>特性：</p>\n<ul>\n<li><strong>1</strong>、简洁方便，可以让Mybatis无XML化开发。</li>\n<li><strong>2</strong>、优雅解耦，通用和自定义的SQL标签完全隔离，让维护更加轻松。</li>\n<li><strong>3</strong>、无侵入性，Mybatis和Ourbatis可同时使用，配置简洁。</li>\n<li><strong>4</strong>、灵活可控，通用模板可自定义及扩展。</li>\n<li><strong>5</strong>、部署快捷，只需要一个依赖，两个配置，即可直接运行。</li>\n<li><strong>6</strong>、多数据源，在多数据源环境下也可以照常使用。</li>\n</ul>\n<h3 id=\"关于ourbatis使用的一个小demo\"><a class=\"header-anchor\" href=\"#关于ourbatis使用的一个小demo\">¶</a>关于Ourbatis使用的一个小Demo</h3>\n<p>环境：</p>\n<ul>\n<li>Spring Boot 2.0.5.RELEASE</li>\n<li>Ourbatis 1.0.5</li>\n<li>JAVA 8</li>\n<li>Mysql</li>\n</ul>\n<p>以<code>Spring Boot 2.0.5.RELEASE</code>版本为例，在可以正常使用Mybatis的项目中，<code>pom.xml</code>添加如下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">       \t&lt;groupId&gt;com.smallnico&lt;/groupId&gt;</span><br><span class=\"line\">       \t&lt;artifactId&gt;ourbatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">       \t&lt;version&gt;1.0.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在配置文件中增加一下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ourbatis.domain-locations=实体类所在包名</span><br></pre></td></tr></table></figure>\n<p>接下来，Mapper接口只需要继承<code>SimpleMapper</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.nico.ourbatis.domain.User;</span><br><span class=\"line\">public interface UserMapper extends SimpleMapper&lt;User, Integer&gt;&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，一个使用Ourbatis的简单应用已经部署起来了，之后，你就可以使用一些Ourbatis默认的通用操作方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T selectById(K key);</span><br><span class=\"line\"></span><br><span class=\"line\">public T selectEntity(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;T&gt; selectList(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public long selectCount(Object condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;T&gt; selectPage(Page&lt;Object&gt; page);</span><br><span class=\"line\"></span><br><span class=\"line\">default PageResult&lt;T&gt; selectPageResult(Page&lt;Object&gt; page)&#123;</span><br><span class=\"line\">\tlong total = selectCount(page.getEntity());</span><br><span class=\"line\">\tList&lt;T&gt; results = null;</span><br><span class=\"line\">\tif(total &gt; 0) &#123;</span><br><span class=\"line\">\t\tresults = selectPage(page);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn new PageResult&lt;&gt;(total, results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public K selectId(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public List&lt;K&gt; selectIds(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insert(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insertSelective(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int insertBatch(List&lt;T&gt; list);</span><br><span class=\"line\"></span><br><span class=\"line\">public int update(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int updateSelective(T entity);</span><br><span class=\"line\"></span><br><span class=\"line\">public int updateBatch(List&lt;T&gt; list);</span><br><span class=\"line\"></span><br><span class=\"line\">public int delete(T condition);</span><br><span class=\"line\"></span><br><span class=\"line\">public int deleteById(K key);</span><br><span class=\"line\"></span><br><span class=\"line\">public int deleteBatch(List&lt;K&gt; list);</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapper自定义方法\"><a class=\"header-anchor\" href=\"#mapper自定义方法\">¶</a>Mapper自定义方法</h3>\n<p>在很多场景中，我们使用以上的自带的通用方法远远不能满足我们的需求，我们往往需要额外扩展新的Mapper方法、XML标签，我们使用了Ourbatis之后该如何实现呢？</p>\n<p>首先看一下我们的需求，在上述Demo中，我们在UserMapper中增加一个方法<code>selectNameById</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.nico.ourbatis.domain.User;</span><br><span class=\"line\">public interface UserMapper extends SimpleMapper&lt;User, Integer&gt;&#123;</span><br><span class=\"line\">    public String selectNameById(Integer userId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和Mybatis一样，需要在<code>resources</code>资源目录下新建一个文件夹<code>ourbatis-mappers</code>，然后在其中新建一个XML文件，命名规则为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DomainClassSimpleName + Mapper.xml</span><br></pre></td></tr></table></figure>\n<p>其中<code>DomainClassSimpleName</code>就是我们实体类的类名，这里是为<code>User</code>，那么新建的XML名为<code>UserMapper.xml</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/main/resources</span><br><span class=\"line\"> - ourbatis-mappers</span><br><span class=\"line\">   - UserMapper.xml</span><br></pre></td></tr></table></figure>\n<p>之后，打开<code>UserMapper.xml</code>，开始编写Mapper中<code>selectNameById</code>方法对应的标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;selectNameById&quot; resultType=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    select name from user where id = #&#123;userId&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，整个文件中只需要写标签就行了，其他的什么都不需要，这是为什么呢？深入之后你就会明白，这里先不多说！</p>\n<p>接下来，就没有接下来了，可以直接使用<code>selectNameById</code>方法了。</p>\n<h3 id=\"深入了解ourbatis\"><a class=\"header-anchor\" href=\"#深入了解ourbatis\">¶</a>深入了解Ourbatis</h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/1668605ac4cc678d?w=540&amp;h=816&amp;f=png&amp;s=22436\" alt=\"ourbatis 流程图\"></p>\n<p>当服务启动的时候，Ourbatis首先会扫描<code>ourbatis.domain-locations</code>配置包下的所有实体类，将之映射为与之对应的表结构数据：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/10/18/166865c063369ef6?w=741&amp;h=270&amp;f=png&amp;s=10672\" alt=\"ourbatis Mapping\"></p>\n<p>然后通过<code>ourbatis.xml</code>的渲染，生成一个又一个的XML文件，最后将之重新Build到Mybatis容器中！</p>\n<p>整个过程分为两个核心点：</p>\n<ul>\n<li>1、映射实体类为元数据</li>\n<li>2、使用<code>ourbatis.xml</code>渲染元数据为XML文件</li>\n</ul>\n<p>我会一一介绍之~</p>\n<h4 id=\"映射实体类为元数据\"><a class=\"header-anchor\" href=\"#映射实体类为元数据\">¶</a>映射实体类为元数据</h4>\n<p>在映射时，我们要根据自己数据库字段命名的风格去调整映射规则，就需要在第1个核心点中去做处理，Ourbatis使用包装器来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Wrapper&lt;T&gt; &#123;</span><br><span class=\"line\">\tpublic String wrapping(T value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于需要映射的字段，如<strong>表名</strong>和<strong>表字段名</strong>，它们都将会经过一个包装器链条的处理之后再投入到<code>ourbatis.xml</code>中做渲染，这样就使得我们可以自定义包装器出更换映射的字段格式，具体方式可以参考官方Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki/Wrapper%E5%8C%85%E8%A3%85%E5%99%A8\" target=\"_blank\" rel=\"noopener\">Wrapper包装器</a></p>\n<h4 id=\"使用ourbatis-xml渲染元数据为xml文件\"><a class=\"header-anchor\" href=\"#使用ourbatis-xml渲染元数据为xml文件\">¶</a>使用<code>ourbatis.xml</code>渲染元数据为XML文件</h4>\n<p>而在于第2个核心点中，Ourbatis通过自定义标签做模板渲染，我们可以先看一下官方默认的<code>ourbatis.xml</code>内部构造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;@&#123;mapperClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;@&#123;elem.jdbcName&#125;&quot; property=&quot;@&#123;elem.javaName&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;@&#123;elem.jdbcName&#125;&quot; property=&quot;@&#123;elem.javaName&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/sql&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectById&quot; parameterType=&quot;java.lang.Object&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectEntity&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectCount&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;long&quot;&gt;</span><br><span class=\"line\">\t\tselect count(0)</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectPage&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;org.nico.ourbatis.entity.Page&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;if test=&quot;entity != null&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;if test=&quot;entity.@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;entity.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;if test=&quot;orderBy != null&quot;&gt;</span><br><span class=\"line\">\t\t\torder by $&#123;orderBy&#125;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;if test=&quot;start != null and end != null&quot;&gt;</span><br><span class=\"line\">\t\t\tlimit $&#123;start&#125;,$&#123;end&#125;</span><br><span class=\"line\">\t\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectList&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectId&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tlimit 1</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;select id=&quot;selectIds&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;</span><br><span class=\"line\">\t\tresultType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tselect</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;deleteById&quot; parameterType=&quot;java.lang.Object&quot;&gt;</span><br><span class=\"line\">\t\tdelete</span><br><span class=\"line\">\t\tfrom @&#123;tableName&#125;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insert&quot; keyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot;</span><br><span class=\"line\">\t\tuseGeneratedKeys=&quot;true&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues (</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insertSelective&quot;</span><br><span class=\"line\">\t\tkeyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t,`@&#123;elem.jdbcName&#125;`</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues (</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t, #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;insert id=&quot;insertBatch&quot;</span><br><span class=\"line\">\t\tkeyProperty=&quot;@&#123;primaryColumns.0.jdbcName&#125;&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class=\"line\">\t\tparameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\tinsert into @&#123;tableName&#125;</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t&lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tvalues</span><br><span class=\"line\">\t\t&lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\tseparator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t(</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t#&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;update&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;updateSelective&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t,`@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\twhere 1=1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;update id=&quot;updateBatch&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\t&lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\tseparator=&quot;;&quot;&gt;</span><br><span class=\"line\">\t\t\tupdate @&#123;tableName&#125;</span><br><span class=\"line\">\t\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ourbatis:foreach list=&quot;normalColumns&quot; var=&quot;elem&quot;</span><br><span class=\"line\">\t\t\t\t\tsplit=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t`@&#123;elem.jdbcName&#125;` = #&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\t\twhere 1=1</span><br><span class=\"line\">\t\t\t&lt;ourbatis:foreach list=&quot;primaryColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;item.@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;deleteBatch&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class=\"line\">\t\tdelete from @&#123;tableName&#125; where @&#123;primaryColumns.0.jdbcName&#125; in</span><br><span class=\"line\">\t\t&lt;foreach close=&quot;)&quot; collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot;</span><br><span class=\"line\">\t\t\topen=&quot;(&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t\t#&#123;item&#125;</span><br><span class=\"line\">\t\t&lt;/foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;delete id=&quot;delete&quot; parameterType=&quot;@&#123;domainClassName&#125;&quot;&gt;</span><br><span class=\"line\">\t\tdelete from @&#123;tableName&#125; where 1 = 1</span><br><span class=\"line\">\t\t&lt;ourbatis:foreach list=&quot;allColumns&quot; var=&quot;elem&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;@&#123;elem.javaName&#125; != null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand `@&#123;elem.jdbcName&#125;` = #&#123;@&#123;elem.javaName&#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/ourbatis:foreach&gt;</span><br><span class=\"line\">\t&lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;ourbatis:ref path=&quot;classpath:ourbatis-mappers/@&#123;domainSimpleClassName&#125;Mapper.xml&quot; /&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，<code>ourbatis.xml</code>内容类似于原生的Mybatis的XML，不同的是，有两个陌生的标签：</p>\n<ul>\n<li>ourbatis:foreach 对元数据中的列表进行循环渲染</li>\n<li>ourbatis:ref 引入外界文件内容</li>\n</ul>\n<p>这是Ourbatis中独有的标签，Ourbatis也提供着对应的入口让我们去自定义标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class: org.nico.ourbatis.Ourbatis</span><br><span class=\"line\">Field: </span><br><span class=\"line\">public static final Map&lt;String, AssistAdapter&gt; ASSIST_ADAPTERS = new HashMap&lt;String, AssistAdapter&gt;()&#123;</span><br><span class=\"line\">\t\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tput(&quot;ourbatis:foreach&quot;, new ForeachAdapter());</span><br><span class=\"line\">\t\t\tput(&quot;ourbatis:ref&quot;, new RefAdapter());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们可以修改<code>org.nico.ourbatis.Ourbatis</code>类中的静态参数<code>ASSIST_ADAPTERS</code>去删除、更新和添加自定义标签，需要实现一个标签适配器，我们可以看一下最简单的<code>RefAdapter</code>适配器的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RefAdapter extends AssistAdapter&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String adapter(Map&lt;String, Object&gt; datas, NoelRender render, Document document) &#123;</span><br><span class=\"line\">\t\tString path = render.rending(datas, document.getParameter(&quot;path&quot;), &quot;domainSimpleClassName&quot;);</span><br><span class=\"line\">\t\tString result =  StreamUtils.convertToString(path.replaceAll(&quot;classpath:&quot;, &quot;&quot;));</span><br><span class=\"line\">\t\treturn result == null ? &quot;&quot; : result.trim();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ourbatis中只定义了上述两个自定义标签已足够满足需求，通过<code>foreach</code>标签，将元数据中的集合遍历渲染，通过<code>ref</code>标签引入外界资源，也就是我们之前所说的对Mapper接口中方法的扩展！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ourbatis:ref path=&quot;classpath:ourbatis-mappers/@&#123;domainSimpleClassName&#125;Mapper.xml&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的path就是当前项目classpath路径的相对路径，而<code>@{domainSimpleClassName}</code>就代表着实体类的类名，更多的系统参数可以参考Wiki：<a href=\"https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener\">元数据映射</a></p>\n<p>通过这种模板渲染的机制，Ourbatis是相当灵活的，我们不仅可以通过引入外部文件进行扩展，当我们需要添加或修改通用方法时，我们可以可以自定义<code>ourbatis.xml</code>的内容，如何做到呢？复制一份将之放在资源目录下就可以了！</p>\n<p>看到这里，相信大家已经知道Ourbatis的基本原理已经使用方式，我就再次不多说了，更多细节可以去官方Wiki中阅读：<a href=\"https://github.com/ainilili/ourbatis/wiki/%E5%85%83%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener\">Ourbatis Wiki</a></p>\n"},{"title":"深入浅说服务如何以Jar包的方式发布","author":"Nico","date":"2018-11-06T04:49:00.000Z","_content":"###### 序言 \n笔者前段时间在使用自研框架NF( [传送门](https://gitee.com/ainilili/No-Framework) )开发一个自动模板生成工具之后，想将他发布到Linux下，之前一直使用IDE直接``run as``运行，在遇到发布的时候考虑过发布为war或者jar，在一番抉择之后最终选择了jar（原因是NF自带服务容器，而war为tomcat而生，所以jar更适合NF），所以特意研究了一番如何将普通项目打包成jar发布。\n\n不出意外，最终我成功了，在兴奋之余，希望能够将自己实现的过程及遇到的坑记录下来，让看到有此需求的同学们少走一些弯路！\n\n#### 一、何为Jar\nJAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。\n\n更多详情通过 [传送门](https://www.ibm.com/developerworks/cn/java/j-jar/index.html) 查阅。\n#### 二、发布服务的几种方案\n在web开发完成之后，我们往往想要发布服务到外网服务器中，而外网服务器大多是都是Linux系统，这时我们不能已常规方式直接在IDE中运行，需要特定几种形式去发布。\n\n我们最初最常用的方式就是打包成``.war``的格式发布到Tomcat的服务容器中，这之后Tomcat会帮助我们解压war包，并加载``classes``文件夹下的``.class``到内存中，加载完毕之后，我们的服务就可以在服务器中正常运行，但是``.war``通常只适合配合Tomcat容器，对于其他服务容器，尤其是自研服务容器来讲，适用性非常差，而``Spring Boot``率先打破了常规。\n\nSpring Boot采用jar的方式发布，也就是说，我们可以使用Spring Boot提供的maven插件，通过``mvn package``指令将服务打包成jar的形式发布，这就意味着服务中涉及的所有资源（class文件、依赖jar包、静态资源文件）都将会打包在一个jar包之内，在启动这个层次来讲就异常的简单了，只需要通过``java -jar xxxx.jar``的方式就可以正常启动服务，这对于我们在自己的服务器中去启动服务来说非常的方便，而Spring Boot是怎么做到这一点的呢？\n\n我们来看一下Spring Boot的``pom.xml``依赖插件 ``spring-boot-maven-plugin ``，全配置如下\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <configuration>\n        <mainClass>${start-class}</mainClass>\n    </configuration>\n</plugin>\n```\n我们通过之前对Jar包的了解已经得知，一个可执行jar的必要因素就是需要一个主函数入口，在上述配置中，我们可以看到很明确的主函数配置``<mainClass>${start-class}</mainClass>``， 而占位符``${start-class}``的值就是我们平常开发中用来启动Spring Boot的主函数入口所在类，继续深入``spring-boot-maven-plugin``中，我们会看到这个插件内部依赖了更多maven自带的原生插件\n\n - maven-failsafe-plugin\n - maven-jar-plugin\n - maven-surefire-plugin\n - maven-war-plugin\n - maven-resources-plugin\n - maven-shade-plugin\n\n另外少部分插件如下\n\n - exec-maven-plugin\n - git-commit-id-plugin\n - spring-boot-maven-plugin 自依赖，为了支持自己的插件\n\n从以上插件列表分析，``spring-boot-maven-plugin``中包含了很多maven原生插件，支持``jar``和 ``war``的格式发布，我们只站在打包可执行jar的角度来分析以上插件的作用，可以这样理解\n\n- maven-jar-plugin \n > 设定``manifest``中的``Main-Class``参数\n\n- maven-shade-plugin \n > 用于把多个jar包，打成1个jar包\n\n- maven-resources-plugin \n > 处理将项目资源（``src/main/``和 ``src/test``）复制到输出目录的操作\n \n- maven-surefire-plugin 和 maven-failsafe-plugin\n> 执行测试用例\n\n依赖插件的同时，``spring-boot-maven-plugin``中还使用``<resources>``标签来重新定义jar包内部结构。\n\n以上信息是否满足将我们的服务打包成可执行jar呢？我们分析一下，如果达到我们想要的效果，我们需要\n\n 1. 自动配置主函数入口\n 2. 静态资源打包\n 3. 依赖打包\n \n对比上述插件，我们需要的功能都有，那么我们是否可以使用上方的插件及标签自己写个打包插件试试呢？ 当然！这里就不带着大家亲自尝试了，因为下面我要讲另一种Spring Boot没有用到的maven插件进行打包！\n\n#### 三、maven-assembly-plugin 插件打包Jar\n\n``maven-assembly-plugin``是一个超灵活maven项目打包工具，提供默认配置和自定义配置，同时提供``Main-Class``的配置、静态文件Copy及依赖打包的功能，这里是官方对于这款插件的介绍\n> The Assembly Plugin for Maven is primarily intended to allow users to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single distributable archive.\n> Your project can build distribution \"assemblies\" easily, using one of the convenient, prefabricated assembly descriptors. These descriptors handle many common operations, such as packaging a project's artifact along with generated documentation into a single zip archive. Alternatively, your project can provide its own descriptor and assume a much higher level of control over how dependencies, modules, file-sets, and individual files are packaged in the assembly.\n\n\n大概意思就是\n\nMaven的组装插件主要是允许用户将项目输出与它的依赖项、模块、站点文档和其他文件一起集成到一个可分发的归档文件中。您的项目可以使用一种方便的预制组装描述符轻松地构建分布“程序集”。这些描述符处理许多常见的操作，例如将项目的工件连同生成的文档打包到一个zip归档文件中。或者，您的项目可以提供自己的描述符，并对依赖项、模块、文件集和各个文件如何在程序集中打包具有更高的控制级别。\n\n通俗一点，你可以自定义你的项目打包格式，``maven-assembly-plugin``更像是多个打包插件的集成，并提供多种打包的文件格式，使用方面也很方便，最简单的一个使用如下\n\n```\n<plugin>\n\t   <artifactId> maven-assembly-plugin </artifactId>\n\t   <configuration>\n\t\t\t<descriptorRefs>\n\t\t\t\t <descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t</descriptorRefs>\n\t\t\t<archive>\n\t\t\t\t <manifest>\n\t\t\t\t\t  <mainClass>${main-class}</mainClass>\n\t\t\t\t </manifest>\n\t\t\t</archive>\n\t   </configuration>\n\t   <executions>\n\t\t\t<execution>\n\t\t\t\t <id>make-assembly</id>\n\t\t\t\t <phase>package</phase>\n\t\t\t\t <goals>\n\t\t\t\t\t  <goal>single</goal>\n\t\t\t\t </goals>\n\t\t\t</execution>\n\t   </executions>\n</plugin>\n```\n``descriptorRefs``标签内部可以配置使用官方定制好的打包方式，其中如下可选配置\n - bin\n - jar-with-dependencies\n - src\n - project\n不过官方定制好的有很大的局限性，我们可以将上述改成如下配置，来自定义打包方式\n```\n<plugin>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<configuration>\n\t\t<archive>\n\t\t\t<manifest>\n\t\t\t\t<mainClass>${main-class}</mainClass>\n\t\t\t</manifest>\n\t\t</archive>\n\t\t<descriptors>\n            <descriptor>src/main/resource/assembly-fat.xml</descriptor>\n        </descriptors>\n\t</configuration>\n\t<executions>\n         <execution>\n               <id>make-assembly</id>\n               <phase>package</phase>\n               <goals>\n                    <goal>single</goal>\n               </goals>\n          </execution>\n     </executions>\n</plugin>\n```\n可以看出，上述配置去掉了``<descriptorRefs>``标签，增加了``<descriptors>``配置，并且子标签中还指向了``src/main/resource/assembly-fat.xml``这个配置文件，如果你的思路跟着这篇文章走，一定可以猜得到，这个配置文件就是我们自定义打包方式的入口！它的格式如下\n```\n<assembly xmlns=\"http://maven.apache.org/ASSEMBLY/2.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\">\n  <id>distribution</id>\n  \n  <formats>\n    <format>jar</format>\n  </formats>\n  \n  <dependencySets>\n\t\t<dependencySet>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<useProjectArtifact>true</useProjectArtifact>\n\t\t\t<unpack>true</unpack>\n\t\t\t<scope>runtime</scope>\n\t\t</dependencySet>\n\t</dependencySets>\n\t\n  <includeBaseDirectory>false</includeBaseDirectory>\n  \n  <fileSets>\n    <fileSet>\n      <directory>${basedir}</directory>\n      <includes>\n        <include>*.txt</include>\n      </includes>\n      <excludes>\n        <exclude>README.txt</exclude>\n        <exclude>NOTICE.txt</exclude>\n      </excludes>\n    </fileSet>\n  </fileSets>\n  \n  <files>\n    <file>\n      <source>README.txt</source>\n      <outputDirectory>/</outputDirectory>\n      <filtered>true</filtered>\n    </file>\n    <file>\n      <source>NOTICE.txt</source>\n      <outputDirectory>/</outputDirectory>\n      <filtered>true</filtered>\n    </file>\n  </files>\n</assembly>\n```\n##### 下面是标签的相关介绍\n - ``<id>`` 生成文件的后缀，如果有，文件名将会是``${artifactId}-${id}.jar``\n - ``<formats>``生成文件的格式，可以同时生成多个格式的目标文件\n - ``dependencySets``依赖jar的打包方式\n - ``includeBaseDirectory``是否将项目目录引入进来，如果是**True**的话，生成的目标文件打开之后将会是项目主目录，我们打包的资源将会被放于这个主目录中（推荐**Fasle**，因为``Main-Class``路径通常直接是类路径）\n - ``<fileSets>``引入静态资源的配置（目录级）\n - ``files``引入静态资源的配置（文件级）\n\n以上是最常用的几种标签，更多的配置大家可以查阅官网 [传送门](maven.apache.org/components/plugins/maven-assembly-plugin/)\n\n配置完成之后可以通过``mvn assembly:assembly``或者``mvn package``指令打包。\n\n介绍完毕，下面会拉取笔者自己用[NF](https://gitee.com/ainilili/No-Framework)框架开发的模板工具来为大家演示一下``maven-assembly-plugin``在实战中的使用！\n\n#### 四、Jar方式发布服务实战\n首先是项目结构\n```\nProject\n│  LICENSE\n│  pom.xml\t\t\t\t\t\t\t\t=》pom文件\n│  README.md\n├─src\n│  └─main\n│      ├─java\t\t\t\t\t\t\t=》源码目录\n│      └─resource\t\t\t\t\t\t=》配置文件目录\n└─web\t\t\t\t\t\t\t\t\t=》UI静态资源\n```\n从结构中可以看出，我们需要手动配置的打包资源是``src/main/resource``和``web``这两个目录，所以我们需要所有配置，将上述两个目录随着我们的``.class``文件一起打包进jar中，首先在原pom.xml保持不变的基础上插入``maven-assembly-plugin``插件\n```\n<plugin>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<configuration>\n\t\t<source>1.8</source>\n\t\t<target>1.8</target>\n\t\t<archive>\n\t\t\t<manifest>\n\t\t\t\t<mainClass>org.nico.ct.CtApplication</mainClass>\n\t\t\t</manifest>\n\t\t</archive>\n\t\t<descriptors>\n\t\t\t<descriptor>src/main/resource/assembly-fat.xml</descriptor>\n\t\t</descriptors>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t <id>make-assembly</id>\n\t\t\t <phase>package</phase>\n\t\t\t <goals>\n\t\t\t\t  <goal>single</goal>\n\t\t\t </goals>\n\t\t</execution>\n   </executions>\n</plugin>\n```\n接下来编辑``src/main/resource/assembly-fat.xml``文件配置打包\n```\n<assembly\n\txmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd\">\n\t<id>RELEASE</id>\n\n\t<formats>\n\t\t<format>jar</format>\n\t</formats>\n\n\t<dependencySets>\n\t\t<dependencySet>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<useProjectArtifact>true</useProjectArtifact>\n\t\t\t<unpack>true</unpack>\n\t\t\t<scope>runtime</scope>\n\t\t</dependencySet>\n\t</dependencySets>\n\t\n\t<includeBaseDirectory>false</includeBaseDirectory>\n\t\n\t<fileSets>\n\t\t<fileSet>\n\t\t\t<directory>src/main/resource</directory>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<includes>\n\t\t\t\t<include>/**</include>\n\t\t\t</includes>\n\t\t</fileSet>\n\t\t<fileSet>\n\t\t\t<directory>web</directory>\n\t\t\t<outputDirectory>/web</outputDirectory>\n\t\t\t<includes>\n\t\t\t\t<include>/**</include>\n\t\t\t</includes>\n\t\t</fileSet>\n\t</fileSets>\n\n\n\t<files>\n\t\t<file>\n\t\t\t<source>README.md</source>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t</file>\n\t</files>\n\n</assembly>\n```\n然后运行``mvn assembly:assembly``，等待maven构建成功\n```\n...\n[INFO] META-INF/ already added, skipping\n[INFO] META-INF/MANIFEST.MF already added, skipping\n[INFO] org/ already added, skipping\n[INFO] org/nico/ already added, skipping\n[INFO] META-INF/maven/ already added, skipping\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 7.627 s\n[INFO] Finished at: 2018-06-30T15:39:47+08:00\n[INFO] Final Memory: 24M/269M\n[INFO] ------------------------------------------------------------------------\n```\n看到``BUILD SUCCESS``之后，你会发现项目target目录中会有两个jar\n\n - CoffeeTime-0.0.1-SNAPSHOT.jar\n - CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar\n\n文件名请忽略，后缀带``RELEASE``的jar就是``maven-assembly-plugin``插件生成的jar，解压看下目录\n```\n│  assembly-fat.xml\n│  cat-mysql-nico.xml\n│  cat-mysql.xml\n│  cat-redis-nico.xml\n│  cat-redis.xml\n│  cat.xml\n│  logno.properties\n│  module-info.class\n│  README.md\n├─com\n│  ├─mchange\n│  │ \n│  └─mysql  \n├─images\n├─META-INF\n│  ├─maven\n│  │ \n│  └─services\n├─net\n│  └─sf    \n├─org\n│  ├─apache\n│  │  \n│  ├─gjt\n│  │ \n│  ├─nico\n│  ├─objectweb\n│  └─slf4j\n│ \n├─redis\n│  └─clients\n│\n└─web\n    ├─images\n    ├─page \n    ├─plugins  \n    ├─script\n    ├─style\n    ├─video\n    └─videojs\n```    \n\n路径没问题，我们试下能不能运行，切到jar包所在的目录，执行``jar -jar CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar``运行之\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e78328722cfc4?w=1389&h=752&f=png&s=66225)\n\nSUCCESS !","source":"_posts/深入浅说服务如何以Jar包的方式发布.md","raw":"title: 深入浅说服务如何以Jar包的方式发布\nauthor: Nico\ntags:\n  - Java\n  - Maven\ncategories: []\ndate: 2018-11-06 12:49:00\n---\n###### 序言 \n笔者前段时间在使用自研框架NF( [传送门](https://gitee.com/ainilili/No-Framework) )开发一个自动模板生成工具之后，想将他发布到Linux下，之前一直使用IDE直接``run as``运行，在遇到发布的时候考虑过发布为war或者jar，在一番抉择之后最终选择了jar（原因是NF自带服务容器，而war为tomcat而生，所以jar更适合NF），所以特意研究了一番如何将普通项目打包成jar发布。\n\n不出意外，最终我成功了，在兴奋之余，希望能够将自己实现的过程及遇到的坑记录下来，让看到有此需求的同学们少走一些弯路！\n\n#### 一、何为Jar\nJAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。\n\n更多详情通过 [传送门](https://www.ibm.com/developerworks/cn/java/j-jar/index.html) 查阅。\n#### 二、发布服务的几种方案\n在web开发完成之后，我们往往想要发布服务到外网服务器中，而外网服务器大多是都是Linux系统，这时我们不能已常规方式直接在IDE中运行，需要特定几种形式去发布。\n\n我们最初最常用的方式就是打包成``.war``的格式发布到Tomcat的服务容器中，这之后Tomcat会帮助我们解压war包，并加载``classes``文件夹下的``.class``到内存中，加载完毕之后，我们的服务就可以在服务器中正常运行，但是``.war``通常只适合配合Tomcat容器，对于其他服务容器，尤其是自研服务容器来讲，适用性非常差，而``Spring Boot``率先打破了常规。\n\nSpring Boot采用jar的方式发布，也就是说，我们可以使用Spring Boot提供的maven插件，通过``mvn package``指令将服务打包成jar的形式发布，这就意味着服务中涉及的所有资源（class文件、依赖jar包、静态资源文件）都将会打包在一个jar包之内，在启动这个层次来讲就异常的简单了，只需要通过``java -jar xxxx.jar``的方式就可以正常启动服务，这对于我们在自己的服务器中去启动服务来说非常的方便，而Spring Boot是怎么做到这一点的呢？\n\n我们来看一下Spring Boot的``pom.xml``依赖插件 ``spring-boot-maven-plugin ``，全配置如下\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <configuration>\n        <mainClass>${start-class}</mainClass>\n    </configuration>\n</plugin>\n```\n我们通过之前对Jar包的了解已经得知，一个可执行jar的必要因素就是需要一个主函数入口，在上述配置中，我们可以看到很明确的主函数配置``<mainClass>${start-class}</mainClass>``， 而占位符``${start-class}``的值就是我们平常开发中用来启动Spring Boot的主函数入口所在类，继续深入``spring-boot-maven-plugin``中，我们会看到这个插件内部依赖了更多maven自带的原生插件\n\n - maven-failsafe-plugin\n - maven-jar-plugin\n - maven-surefire-plugin\n - maven-war-plugin\n - maven-resources-plugin\n - maven-shade-plugin\n\n另外少部分插件如下\n\n - exec-maven-plugin\n - git-commit-id-plugin\n - spring-boot-maven-plugin 自依赖，为了支持自己的插件\n\n从以上插件列表分析，``spring-boot-maven-plugin``中包含了很多maven原生插件，支持``jar``和 ``war``的格式发布，我们只站在打包可执行jar的角度来分析以上插件的作用，可以这样理解\n\n- maven-jar-plugin \n > 设定``manifest``中的``Main-Class``参数\n\n- maven-shade-plugin \n > 用于把多个jar包，打成1个jar包\n\n- maven-resources-plugin \n > 处理将项目资源（``src/main/``和 ``src/test``）复制到输出目录的操作\n \n- maven-surefire-plugin 和 maven-failsafe-plugin\n> 执行测试用例\n\n依赖插件的同时，``spring-boot-maven-plugin``中还使用``<resources>``标签来重新定义jar包内部结构。\n\n以上信息是否满足将我们的服务打包成可执行jar呢？我们分析一下，如果达到我们想要的效果，我们需要\n\n 1. 自动配置主函数入口\n 2. 静态资源打包\n 3. 依赖打包\n \n对比上述插件，我们需要的功能都有，那么我们是否可以使用上方的插件及标签自己写个打包插件试试呢？ 当然！这里就不带着大家亲自尝试了，因为下面我要讲另一种Spring Boot没有用到的maven插件进行打包！\n\n#### 三、maven-assembly-plugin 插件打包Jar\n\n``maven-assembly-plugin``是一个超灵活maven项目打包工具，提供默认配置和自定义配置，同时提供``Main-Class``的配置、静态文件Copy及依赖打包的功能，这里是官方对于这款插件的介绍\n> The Assembly Plugin for Maven is primarily intended to allow users to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single distributable archive.\n> Your project can build distribution \"assemblies\" easily, using one of the convenient, prefabricated assembly descriptors. These descriptors handle many common operations, such as packaging a project's artifact along with generated documentation into a single zip archive. Alternatively, your project can provide its own descriptor and assume a much higher level of control over how dependencies, modules, file-sets, and individual files are packaged in the assembly.\n\n\n大概意思就是\n\nMaven的组装插件主要是允许用户将项目输出与它的依赖项、模块、站点文档和其他文件一起集成到一个可分发的归档文件中。您的项目可以使用一种方便的预制组装描述符轻松地构建分布“程序集”。这些描述符处理许多常见的操作，例如将项目的工件连同生成的文档打包到一个zip归档文件中。或者，您的项目可以提供自己的描述符，并对依赖项、模块、文件集和各个文件如何在程序集中打包具有更高的控制级别。\n\n通俗一点，你可以自定义你的项目打包格式，``maven-assembly-plugin``更像是多个打包插件的集成，并提供多种打包的文件格式，使用方面也很方便，最简单的一个使用如下\n\n```\n<plugin>\n\t   <artifactId> maven-assembly-plugin </artifactId>\n\t   <configuration>\n\t\t\t<descriptorRefs>\n\t\t\t\t <descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t</descriptorRefs>\n\t\t\t<archive>\n\t\t\t\t <manifest>\n\t\t\t\t\t  <mainClass>${main-class}</mainClass>\n\t\t\t\t </manifest>\n\t\t\t</archive>\n\t   </configuration>\n\t   <executions>\n\t\t\t<execution>\n\t\t\t\t <id>make-assembly</id>\n\t\t\t\t <phase>package</phase>\n\t\t\t\t <goals>\n\t\t\t\t\t  <goal>single</goal>\n\t\t\t\t </goals>\n\t\t\t</execution>\n\t   </executions>\n</plugin>\n```\n``descriptorRefs``标签内部可以配置使用官方定制好的打包方式，其中如下可选配置\n - bin\n - jar-with-dependencies\n - src\n - project\n不过官方定制好的有很大的局限性，我们可以将上述改成如下配置，来自定义打包方式\n```\n<plugin>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<configuration>\n\t\t<archive>\n\t\t\t<manifest>\n\t\t\t\t<mainClass>${main-class}</mainClass>\n\t\t\t</manifest>\n\t\t</archive>\n\t\t<descriptors>\n            <descriptor>src/main/resource/assembly-fat.xml</descriptor>\n        </descriptors>\n\t</configuration>\n\t<executions>\n         <execution>\n               <id>make-assembly</id>\n               <phase>package</phase>\n               <goals>\n                    <goal>single</goal>\n               </goals>\n          </execution>\n     </executions>\n</plugin>\n```\n可以看出，上述配置去掉了``<descriptorRefs>``标签，增加了``<descriptors>``配置，并且子标签中还指向了``src/main/resource/assembly-fat.xml``这个配置文件，如果你的思路跟着这篇文章走，一定可以猜得到，这个配置文件就是我们自定义打包方式的入口！它的格式如下\n```\n<assembly xmlns=\"http://maven.apache.org/ASSEMBLY/2.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\">\n  <id>distribution</id>\n  \n  <formats>\n    <format>jar</format>\n  </formats>\n  \n  <dependencySets>\n\t\t<dependencySet>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<useProjectArtifact>true</useProjectArtifact>\n\t\t\t<unpack>true</unpack>\n\t\t\t<scope>runtime</scope>\n\t\t</dependencySet>\n\t</dependencySets>\n\t\n  <includeBaseDirectory>false</includeBaseDirectory>\n  \n  <fileSets>\n    <fileSet>\n      <directory>${basedir}</directory>\n      <includes>\n        <include>*.txt</include>\n      </includes>\n      <excludes>\n        <exclude>README.txt</exclude>\n        <exclude>NOTICE.txt</exclude>\n      </excludes>\n    </fileSet>\n  </fileSets>\n  \n  <files>\n    <file>\n      <source>README.txt</source>\n      <outputDirectory>/</outputDirectory>\n      <filtered>true</filtered>\n    </file>\n    <file>\n      <source>NOTICE.txt</source>\n      <outputDirectory>/</outputDirectory>\n      <filtered>true</filtered>\n    </file>\n  </files>\n</assembly>\n```\n##### 下面是标签的相关介绍\n - ``<id>`` 生成文件的后缀，如果有，文件名将会是``${artifactId}-${id}.jar``\n - ``<formats>``生成文件的格式，可以同时生成多个格式的目标文件\n - ``dependencySets``依赖jar的打包方式\n - ``includeBaseDirectory``是否将项目目录引入进来，如果是**True**的话，生成的目标文件打开之后将会是项目主目录，我们打包的资源将会被放于这个主目录中（推荐**Fasle**，因为``Main-Class``路径通常直接是类路径）\n - ``<fileSets>``引入静态资源的配置（目录级）\n - ``files``引入静态资源的配置（文件级）\n\n以上是最常用的几种标签，更多的配置大家可以查阅官网 [传送门](maven.apache.org/components/plugins/maven-assembly-plugin/)\n\n配置完成之后可以通过``mvn assembly:assembly``或者``mvn package``指令打包。\n\n介绍完毕，下面会拉取笔者自己用[NF](https://gitee.com/ainilili/No-Framework)框架开发的模板工具来为大家演示一下``maven-assembly-plugin``在实战中的使用！\n\n#### 四、Jar方式发布服务实战\n首先是项目结构\n```\nProject\n│  LICENSE\n│  pom.xml\t\t\t\t\t\t\t\t=》pom文件\n│  README.md\n├─src\n│  └─main\n│      ├─java\t\t\t\t\t\t\t=》源码目录\n│      └─resource\t\t\t\t\t\t=》配置文件目录\n└─web\t\t\t\t\t\t\t\t\t=》UI静态资源\n```\n从结构中可以看出，我们需要手动配置的打包资源是``src/main/resource``和``web``这两个目录，所以我们需要所有配置，将上述两个目录随着我们的``.class``文件一起打包进jar中，首先在原pom.xml保持不变的基础上插入``maven-assembly-plugin``插件\n```\n<plugin>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<configuration>\n\t\t<source>1.8</source>\n\t\t<target>1.8</target>\n\t\t<archive>\n\t\t\t<manifest>\n\t\t\t\t<mainClass>org.nico.ct.CtApplication</mainClass>\n\t\t\t</manifest>\n\t\t</archive>\n\t\t<descriptors>\n\t\t\t<descriptor>src/main/resource/assembly-fat.xml</descriptor>\n\t\t</descriptors>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t <id>make-assembly</id>\n\t\t\t <phase>package</phase>\n\t\t\t <goals>\n\t\t\t\t  <goal>single</goal>\n\t\t\t </goals>\n\t\t</execution>\n   </executions>\n</plugin>\n```\n接下来编辑``src/main/resource/assembly-fat.xml``文件配置打包\n```\n<assembly\n\txmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd\">\n\t<id>RELEASE</id>\n\n\t<formats>\n\t\t<format>jar</format>\n\t</formats>\n\n\t<dependencySets>\n\t\t<dependencySet>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<useProjectArtifact>true</useProjectArtifact>\n\t\t\t<unpack>true</unpack>\n\t\t\t<scope>runtime</scope>\n\t\t</dependencySet>\n\t</dependencySets>\n\t\n\t<includeBaseDirectory>false</includeBaseDirectory>\n\t\n\t<fileSets>\n\t\t<fileSet>\n\t\t\t<directory>src/main/resource</directory>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t\t<includes>\n\t\t\t\t<include>/**</include>\n\t\t\t</includes>\n\t\t</fileSet>\n\t\t<fileSet>\n\t\t\t<directory>web</directory>\n\t\t\t<outputDirectory>/web</outputDirectory>\n\t\t\t<includes>\n\t\t\t\t<include>/**</include>\n\t\t\t</includes>\n\t\t</fileSet>\n\t</fileSets>\n\n\n\t<files>\n\t\t<file>\n\t\t\t<source>README.md</source>\n\t\t\t<outputDirectory>/</outputDirectory>\n\t\t</file>\n\t</files>\n\n</assembly>\n```\n然后运行``mvn assembly:assembly``，等待maven构建成功\n```\n...\n[INFO] META-INF/ already added, skipping\n[INFO] META-INF/MANIFEST.MF already added, skipping\n[INFO] org/ already added, skipping\n[INFO] org/nico/ already added, skipping\n[INFO] META-INF/maven/ already added, skipping\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 7.627 s\n[INFO] Finished at: 2018-06-30T15:39:47+08:00\n[INFO] Final Memory: 24M/269M\n[INFO] ------------------------------------------------------------------------\n```\n看到``BUILD SUCCESS``之后，你会发现项目target目录中会有两个jar\n\n - CoffeeTime-0.0.1-SNAPSHOT.jar\n - CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar\n\n文件名请忽略，后缀带``RELEASE``的jar就是``maven-assembly-plugin``插件生成的jar，解压看下目录\n```\n│  assembly-fat.xml\n│  cat-mysql-nico.xml\n│  cat-mysql.xml\n│  cat-redis-nico.xml\n│  cat-redis.xml\n│  cat.xml\n│  logno.properties\n│  module-info.class\n│  README.md\n├─com\n│  ├─mchange\n│  │ \n│  └─mysql  \n├─images\n├─META-INF\n│  ├─maven\n│  │ \n│  └─services\n├─net\n│  └─sf    \n├─org\n│  ├─apache\n│  │  \n│  ├─gjt\n│  │ \n│  ├─nico\n│  ├─objectweb\n│  └─slf4j\n│ \n├─redis\n│  └─clients\n│\n└─web\n    ├─images\n    ├─page \n    ├─plugins  \n    ├─script\n    ├─style\n    ├─video\n    └─videojs\n```    \n\n路径没问题，我们试下能不能运行，切到jar包所在的目录，执行``jar -jar CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar``运行之\n![这里写图片描述](https://user-gold-cdn.xitu.io/2018/11/6/166e78328722cfc4?w=1389&h=752&f=png&s=66225)\n\nSUCCESS !","slug":"深入浅说服务如何以Jar包的方式发布","published":1,"updated":"2018-11-06T05:33:53.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq1n0kzp000c9ctplsnbe9fe","content":"<h6 id=\"序言\"><a class=\"header-anchor\" href=\"#序言\">¶</a>序言</h6>\n<p>笔者前段时间在使用自研框架NF( <a href=\"https://gitee.com/ainilili/No-Framework\" target=\"_blank\" rel=\"noopener\">传送门</a> )开发一个自动模板生成工具之后，想将他发布到Linux下，之前一直使用IDE直接<code>run as</code>运行，在遇到发布的时候考虑过发布为war或者jar，在一番抉择之后最终选择了jar（原因是NF自带服务容器，而war为tomcat而生，所以jar更适合NF），所以特意研究了一番如何将普通项目打包成jar发布。</p>\n<p>不出意外，最终我成功了，在兴奋之余，希望能够将自己实现的过程及遇到的坑记录下来，让看到有此需求的同学们少走一些弯路！</p>\n<h4 id=\"一-何为jar\"><a class=\"header-anchor\" href=\"#一-何为jar\">¶</a>一、何为Jar</h4>\n<p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。</p>\n<p>更多详情通过 <a href=\"https://www.ibm.com/developerworks/cn/java/j-jar/index.html\" target=\"_blank\" rel=\"noopener\">传送门</a> 查阅。</p>\n<h4 id=\"二-发布服务的几种方案\"><a class=\"header-anchor\" href=\"#二-发布服务的几种方案\">¶</a>二、发布服务的几种方案</h4>\n<p>在web开发完成之后，我们往往想要发布服务到外网服务器中，而外网服务器大多是都是Linux系统，这时我们不能已常规方式直接在IDE中运行，需要特定几种形式去发布。</p>\n<p>我们最初最常用的方式就是打包成<code>.war</code>的格式发布到Tomcat的服务容器中，这之后Tomcat会帮助我们解压war包，并加载<code>classes</code>文件夹下的<code>.class</code>到内存中，加载完毕之后，我们的服务就可以在服务器中正常运行，但是<code>.war</code>通常只适合配合Tomcat容器，对于其他服务容器，尤其是自研服务容器来讲，适用性非常差，而<code>Spring Boot</code>率先打破了常规。</p>\n<p>Spring Boot采用jar的方式发布，也就是说，我们可以使用Spring Boot提供的maven插件，通过<code>mvn package</code>指令将服务打包成jar的形式发布，这就意味着服务中涉及的所有资源（class文件、依赖jar包、静态资源文件）都将会打包在一个jar包之内，在启动这个层次来讲就异常的简单了，只需要通过<code>java -jar xxxx.jar</code>的方式就可以正常启动服务，这对于我们在自己的服务器中去启动服务来说非常的方便，而Spring Boot是怎么做到这一点的呢？</p>\n<p>我们来看一下Spring Boot的<code>pom.xml</code>依赖插件 <code>spring-boot-maven-plugin</code>，全配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;mainClass&gt;$&#123;start-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过之前对Jar包的了解已经得知，一个可执行jar的必要因素就是需要一个主函数入口，在上述配置中，我们可以看到很明确的主函数配置<code>&lt;mainClass&gt;${start-class}&lt;/mainClass&gt;</code>， 而占位符<code>${start-class}</code>的值就是我们平常开发中用来启动Spring Boot的主函数入口所在类，继续深入<code>spring-boot-maven-plugin</code>中，我们会看到这个插件内部依赖了更多maven自带的原生插件</p>\n<ul>\n<li>maven-failsafe-plugin</li>\n<li>maven-jar-plugin</li>\n<li>maven-surefire-plugin</li>\n<li>maven-war-plugin</li>\n<li>maven-resources-plugin</li>\n<li>maven-shade-plugin</li>\n</ul>\n<p>另外少部分插件如下</p>\n<ul>\n<li>exec-maven-plugin</li>\n<li>git-commit-id-plugin</li>\n<li>spring-boot-maven-plugin 自依赖，为了支持自己的插件</li>\n</ul>\n<p>从以上插件列表分析，<code>spring-boot-maven-plugin</code>中包含了很多maven原生插件，支持<code>jar</code>和 <code>war</code>的格式发布，我们只站在打包可执行jar的角度来分析以上插件的作用，可以这样理解</p>\n<ul>\n<li>maven-jar-plugin</li>\n</ul>\n<blockquote>\n<p>设定<code>manifest</code>中的<code>Main-Class</code>参数</p>\n</blockquote>\n<ul>\n<li>maven-shade-plugin</li>\n</ul>\n<blockquote>\n<p>用于把多个jar包，打成1个jar包</p>\n</blockquote>\n<ul>\n<li>maven-resources-plugin</li>\n</ul>\n<blockquote>\n<p>处理将项目资源（<code>src/main/</code>和 <code>src/test</code>）复制到输出目录的操作</p>\n</blockquote>\n<ul>\n<li>maven-surefire-plugin 和 maven-failsafe-plugin</li>\n</ul>\n<blockquote>\n<p>执行测试用例</p>\n</blockquote>\n<p>依赖插件的同时，<code>spring-boot-maven-plugin</code>中还使用<code>&lt;resources&gt;</code>标签来重新定义jar包内部结构。</p>\n<p>以上信息是否满足将我们的服务打包成可执行jar呢？我们分析一下，如果达到我们想要的效果，我们需要</p>\n<ol>\n<li>自动配置主函数入口</li>\n<li>静态资源打包</li>\n<li>依赖打包</li>\n</ol>\n<p>对比上述插件，我们需要的功能都有，那么我们是否可以使用上方的插件及标签自己写个打包插件试试呢？ 当然！这里就不带着大家亲自尝试了，因为下面我要讲另一种Spring Boot没有用到的maven插件进行打包！</p>\n<h4 id=\"三-maven-assembly-plugin-插件打包jar\"><a class=\"header-anchor\" href=\"#三-maven-assembly-plugin-插件打包jar\">¶</a>三、maven-assembly-plugin 插件打包Jar</h4>\n<p><code>maven-assembly-plugin</code>是一个超灵活maven项目打包工具，提供默认配置和自定义配置，同时提供<code>Main-Class</code>的配置、静态文件Copy及依赖打包的功能，这里是官方对于这款插件的介绍</p>\n<blockquote>\n<p>The Assembly Plugin for Maven is primarily intended to allow users to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single distributable archive.<br>\nYour project can build distribution “assemblies” easily, using one of the convenient, prefabricated assembly descriptors. These descriptors handle many common operations, such as packaging a project’s artifact along with generated documentation into a single zip archive. Alternatively, your project can provide its own descriptor and assume a much higher level of control over how dependencies, modules, file-sets, and individual files are packaged in the assembly.</p>\n</blockquote>\n<p>大概意思就是</p>\n<p>Maven的组装插件主要是允许用户将项目输出与它的依赖项、模块、站点文档和其他文件一起集成到一个可分发的归档文件中。您的项目可以使用一种方便的预制组装描述符轻松地构建分布“程序集”。这些描述符处理许多常见的操作，例如将项目的工件连同生成的文档打包到一个zip归档文件中。或者，您的项目可以提供自己的描述符，并对依赖项、模块、文件集和各个文件如何在程序集中打包具有更高的控制级别。</p>\n<p>通俗一点，你可以自定义你的项目打包格式，<code>maven-assembly-plugin</code>更像是多个打包插件的集成，并提供多种打包的文件格式，使用方面也很方便，最简单的一个使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t   &lt;artifactId&gt; maven-assembly-plugin &lt;/artifactId&gt;</span><br><span class=\"line\">\t   &lt;configuration&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptorRefs&gt;</span><br><span class=\"line\">\t\t\t\t &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class=\"line\">\t\t\t&lt;/descriptorRefs&gt;</span><br><span class=\"line\">\t\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t\t &lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t\t  &lt;mainClass&gt;$&#123;main-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t\t &lt;/manifest&gt;</span><br><span class=\"line\">\t\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t   &lt;/configuration&gt;</span><br><span class=\"line\">\t   &lt;executions&gt;</span><br><span class=\"line\">\t\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t\t &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t\t &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t\t &lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t  &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t\t &lt;/goals&gt;</span><br><span class=\"line\">\t\t\t&lt;/execution&gt;</span><br><span class=\"line\">\t   &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p><code>descriptorRefs</code>标签内部可以配置使用官方定制好的打包方式，其中如下可选配置</p>\n<ul>\n<li>bin</li>\n<li>jar-with-dependencies</li>\n<li>src</li>\n<li>project<br>\n不过官方定制好的有很大的局限性，我们可以将上述改成如下配置，来自定义打包方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t&lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t&lt;mainClass&gt;$&#123;main-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t&lt;/manifest&gt;</span><br><span class=\"line\">\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">            &lt;descriptor&gt;src/main/resource/assembly-fat.xml&lt;/descriptor&gt;</span><br><span class=\"line\">        &lt;/descriptors&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">         &lt;execution&gt;</span><br><span class=\"line\">               &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">               &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">               &lt;goals&gt;</span><br><span class=\"line\">                    &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">               &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">     &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看出，上述配置去掉了<code>&lt;descriptorRefs&gt;</code>标签，增加了<code>&lt;descriptors&gt;</code>配置，并且子标签中还指向了<code>src/main/resource/assembly-fat.xml</code>这个配置文件，如果你的思路跟着这篇文章走，一定可以猜得到，这个配置文件就是我们自定义打包方式的入口！它的格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;id&gt;distribution&lt;/id&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;formats&gt;</span><br><span class=\"line\">    &lt;format&gt;jar&lt;/format&gt;</span><br><span class=\"line\">  &lt;/formats&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;dependencySets&gt;</span><br><span class=\"line\">\t\t&lt;dependencySet&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class=\"line\">\t\t\t&lt;unpack&gt;true&lt;/unpack&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependencySet&gt;</span><br><span class=\"line\">\t&lt;/dependencySets&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;fileSets&gt;</span><br><span class=\"line\">    &lt;fileSet&gt;</span><br><span class=\"line\">      &lt;directory&gt;$&#123;basedir&#125;&lt;/directory&gt;</span><br><span class=\"line\">      &lt;includes&gt;</span><br><span class=\"line\">        &lt;include&gt;*.txt&lt;/include&gt;</span><br><span class=\"line\">      &lt;/includes&gt;</span><br><span class=\"line\">      &lt;excludes&gt;</span><br><span class=\"line\">        &lt;exclude&gt;README.txt&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude&gt;NOTICE.txt&lt;/exclude&gt;</span><br><span class=\"line\">      &lt;/excludes&gt;</span><br><span class=\"line\">    &lt;/fileSet&gt;</span><br><span class=\"line\">  &lt;/fileSets&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;files&gt;</span><br><span class=\"line\">    &lt;file&gt;</span><br><span class=\"line\">      &lt;source&gt;README.txt&lt;/source&gt;</span><br><span class=\"line\">      &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">      &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">    &lt;/file&gt;</span><br><span class=\"line\">    &lt;file&gt;</span><br><span class=\"line\">      &lt;source&gt;NOTICE.txt&lt;/source&gt;</span><br><span class=\"line\">      &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">      &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">    &lt;/file&gt;</span><br><span class=\"line\">  &lt;/files&gt;</span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"下面是标签的相关介绍\"><a class=\"header-anchor\" href=\"#下面是标签的相关介绍\">¶</a>下面是标签的相关介绍</h5>\n<ul>\n<li><code>&lt;id&gt;</code> 生成文件的后缀，如果有，文件名将会是<code>${artifactId}-${id}.jar</code></li>\n<li><code>&lt;formats&gt;</code>生成文件的格式，可以同时生成多个格式的目标文件</li>\n<li><code>dependencySets</code>依赖jar的打包方式</li>\n<li><code>includeBaseDirectory</code>是否将项目目录引入进来，如果是<strong>True</strong>的话，生成的目标文件打开之后将会是项目主目录，我们打包的资源将会被放于这个主目录中（推荐<strong>Fasle</strong>，因为<code>Main-Class</code>路径通常直接是类路径）</li>\n<li><code>&lt;fileSets&gt;</code>引入静态资源的配置（目录级）</li>\n<li><code>files</code>引入静态资源的配置（文件级）</li>\n</ul>\n<p>以上是最常用的几种标签，更多的配置大家可以查阅官网 <a href=\"maven.apache.org/components/plugins/maven-assembly-plugin/\">传送门</a></p>\n<p>配置完成之后可以通过<code>mvn assembly:assembly</code>或者<code>mvn package</code>指令打包。</p>\n<p>介绍完毕，下面会拉取笔者自己用<a href=\"https://gitee.com/ainilili/No-Framework\" target=\"_blank\" rel=\"noopener\">NF</a>框架开发的模板工具来为大家演示一下<code>maven-assembly-plugin</code>在实战中的使用！</p>\n<h4 id=\"四-jar方式发布服务实战\"><a class=\"header-anchor\" href=\"#四-jar方式发布服务实战\">¶</a>四、Jar方式发布服务实战</h4>\n<p>首先是项目结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project</span><br><span class=\"line\">│  LICENSE</span><br><span class=\"line\">│  pom.xml\t\t\t\t\t\t\t\t=》pom文件</span><br><span class=\"line\">│  README.md</span><br><span class=\"line\">├─src</span><br><span class=\"line\">│  └─main</span><br><span class=\"line\">│      ├─java\t\t\t\t\t\t\t=》源码目录</span><br><span class=\"line\">│      └─resource\t\t\t\t\t\t=》配置文件目录</span><br><span class=\"line\">└─web\t\t\t\t\t\t\t\t\t=》UI静态资源</span><br></pre></td></tr></table></figure>\n<p>从结构中可以看出，我们需要手动配置的打包资源是<code>src/main/resource</code>和<code>web</code>这两个目录，所以我们需要所有配置，将上述两个目录随着我们的<code>.class</code>文件一起打包进jar中，首先在原pom.xml保持不变的基础上插入<code>maven-assembly-plugin</code>插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">\t\t&lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t&lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t&lt;mainClass&gt;org.nico.ct.CtApplication&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t&lt;/manifest&gt;</span><br><span class=\"line\">\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptor&gt;src/main/resource/assembly-fat.xml&lt;/descriptor&gt;</span><br><span class=\"line\">\t\t&lt;/descriptors&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t &lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t  &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t &lt;/goals&gt;</span><br><span class=\"line\">\t\t&lt;/execution&gt;</span><br><span class=\"line\">   &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>接下来编辑<code>src/main/resource/assembly-fat.xml</code>文件配置打包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly</span><br><span class=\"line\">\txmlns=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;id&gt;RELEASE&lt;/id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;formats&gt;</span><br><span class=\"line\">\t\t&lt;format&gt;jar&lt;/format&gt;</span><br><span class=\"line\">\t&lt;/formats&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencySets&gt;</span><br><span class=\"line\">\t\t&lt;dependencySet&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class=\"line\">\t\t\t&lt;unpack&gt;true&lt;/unpack&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependencySet&gt;</span><br><span class=\"line\">\t&lt;/dependencySets&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;fileSets&gt;</span><br><span class=\"line\">\t\t&lt;fileSet&gt;</span><br><span class=\"line\">\t\t\t&lt;directory&gt;src/main/resource&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t&lt;include&gt;/**&lt;/include&gt;</span><br><span class=\"line\">\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t&lt;/fileSet&gt;</span><br><span class=\"line\">\t\t&lt;fileSet&gt;</span><br><span class=\"line\">\t\t\t&lt;directory&gt;web&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/web&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t&lt;include&gt;/**&lt;/include&gt;</span><br><span class=\"line\">\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t&lt;/fileSet&gt;</span><br><span class=\"line\">\t&lt;/fileSets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;files&gt;</span><br><span class=\"line\">\t\t&lt;file&gt;</span><br><span class=\"line\">\t\t\t&lt;source&gt;README.md&lt;/source&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t&lt;/file&gt;</span><br><span class=\"line\">\t&lt;/files&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>mvn assembly:assembly</code>，等待maven构建成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">[INFO] META-INF/ already added, skipping</span><br><span class=\"line\">[INFO] META-INF/MANIFEST.MF already added, skipping</span><br><span class=\"line\">[INFO] org/ already added, skipping</span><br><span class=\"line\">[INFO] org/nico/ already added, skipping</span><br><span class=\"line\">[INFO] META-INF/maven/ already added, skipping</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 7.627 s</span><br><span class=\"line\">[INFO] Finished at: 2018-06-30T15:39:47+08:00</span><br><span class=\"line\">[INFO] Final Memory: 24M/269M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>看到<code>BUILD SUCCESS</code>之后，你会发现项目target目录中会有两个jar</p>\n<ul>\n<li>CoffeeTime-0.0.1-SNAPSHOT.jar</li>\n<li>CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar</li>\n</ul>\n<p>文件名请忽略，后缀带<code>RELEASE</code>的jar就是<code>maven-assembly-plugin</code>插件生成的jar，解压看下目录</p>\n<pre><code>│  assembly-fat.xml\n│  cat-mysql-nico.xml\n│  cat-mysql.xml\n│  cat-redis-nico.xml\n│  cat-redis.xml\n│  cat.xml\n│  logno.properties\n│  module-info.class\n│  README.md\n├─com\n│  ├─mchange\n│  │ \n│  └─mysql  \n├─images\n├─META-INF\n│  ├─maven\n│  │ \n│  └─services\n├─net\n│  └─sf    \n├─org\n│  ├─apache\n│  │  \n│  ├─gjt\n│  │ \n│  ├─nico\n│  ├─objectweb\n│  └─slf4j\n│ \n├─redis\n│  └─clients\n│\n└─web\n    ├─images\n    ├─page \n    ├─plugins  \n    ├─script\n    ├─style\n    ├─video\n    └─videojs\n</code></pre>\n<p>路径没问题，我们试下能不能运行，切到jar包所在的目录，执行<code>jar -jar CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar</code>运行之<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e78328722cfc4?w=1389&amp;h=752&amp;f=png&amp;s=66225\" alt=\"这里写图片描述\"></p>\n<p>SUCCESS !</p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"序言\"><a class=\"header-anchor\" href=\"#序言\">¶</a>序言</h6>\n<p>笔者前段时间在使用自研框架NF( <a href=\"https://gitee.com/ainilili/No-Framework\" target=\"_blank\" rel=\"noopener\">传送门</a> )开发一个自动模板生成工具之后，想将他发布到Linux下，之前一直使用IDE直接<code>run as</code>运行，在遇到发布的时候考虑过发布为war或者jar，在一番抉择之后最终选择了jar（原因是NF自带服务容器，而war为tomcat而生，所以jar更适合NF），所以特意研究了一番如何将普通项目打包成jar发布。</p>\n<p>不出意外，最终我成功了，在兴奋之余，希望能够将自己实现的过程及遇到的坑记录下来，让看到有此需求的同学们少走一些弯路！</p>\n<h4 id=\"一-何为jar\"><a class=\"header-anchor\" href=\"#一-何为jar\">¶</a>一、何为Jar</h4>\n<p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。</p>\n<p>更多详情通过 <a href=\"https://www.ibm.com/developerworks/cn/java/j-jar/index.html\" target=\"_blank\" rel=\"noopener\">传送门</a> 查阅。</p>\n<h4 id=\"二-发布服务的几种方案\"><a class=\"header-anchor\" href=\"#二-发布服务的几种方案\">¶</a>二、发布服务的几种方案</h4>\n<p>在web开发完成之后，我们往往想要发布服务到外网服务器中，而外网服务器大多是都是Linux系统，这时我们不能已常规方式直接在IDE中运行，需要特定几种形式去发布。</p>\n<p>我们最初最常用的方式就是打包成<code>.war</code>的格式发布到Tomcat的服务容器中，这之后Tomcat会帮助我们解压war包，并加载<code>classes</code>文件夹下的<code>.class</code>到内存中，加载完毕之后，我们的服务就可以在服务器中正常运行，但是<code>.war</code>通常只适合配合Tomcat容器，对于其他服务容器，尤其是自研服务容器来讲，适用性非常差，而<code>Spring Boot</code>率先打破了常规。</p>\n<p>Spring Boot采用jar的方式发布，也就是说，我们可以使用Spring Boot提供的maven插件，通过<code>mvn package</code>指令将服务打包成jar的形式发布，这就意味着服务中涉及的所有资源（class文件、依赖jar包、静态资源文件）都将会打包在一个jar包之内，在启动这个层次来讲就异常的简单了，只需要通过<code>java -jar xxxx.jar</code>的方式就可以正常启动服务，这对于我们在自己的服务器中去启动服务来说非常的方便，而Spring Boot是怎么做到这一点的呢？</p>\n<p>我们来看一下Spring Boot的<code>pom.xml</code>依赖插件 <code>spring-boot-maven-plugin</code>，全配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;mainClass&gt;$&#123;start-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过之前对Jar包的了解已经得知，一个可执行jar的必要因素就是需要一个主函数入口，在上述配置中，我们可以看到很明确的主函数配置<code>&lt;mainClass&gt;${start-class}&lt;/mainClass&gt;</code>， 而占位符<code>${start-class}</code>的值就是我们平常开发中用来启动Spring Boot的主函数入口所在类，继续深入<code>spring-boot-maven-plugin</code>中，我们会看到这个插件内部依赖了更多maven自带的原生插件</p>\n<ul>\n<li>maven-failsafe-plugin</li>\n<li>maven-jar-plugin</li>\n<li>maven-surefire-plugin</li>\n<li>maven-war-plugin</li>\n<li>maven-resources-plugin</li>\n<li>maven-shade-plugin</li>\n</ul>\n<p>另外少部分插件如下</p>\n<ul>\n<li>exec-maven-plugin</li>\n<li>git-commit-id-plugin</li>\n<li>spring-boot-maven-plugin 自依赖，为了支持自己的插件</li>\n</ul>\n<p>从以上插件列表分析，<code>spring-boot-maven-plugin</code>中包含了很多maven原生插件，支持<code>jar</code>和 <code>war</code>的格式发布，我们只站在打包可执行jar的角度来分析以上插件的作用，可以这样理解</p>\n<ul>\n<li>maven-jar-plugin</li>\n</ul>\n<blockquote>\n<p>设定<code>manifest</code>中的<code>Main-Class</code>参数</p>\n</blockquote>\n<ul>\n<li>maven-shade-plugin</li>\n</ul>\n<blockquote>\n<p>用于把多个jar包，打成1个jar包</p>\n</blockquote>\n<ul>\n<li>maven-resources-plugin</li>\n</ul>\n<blockquote>\n<p>处理将项目资源（<code>src/main/</code>和 <code>src/test</code>）复制到输出目录的操作</p>\n</blockquote>\n<ul>\n<li>maven-surefire-plugin 和 maven-failsafe-plugin</li>\n</ul>\n<blockquote>\n<p>执行测试用例</p>\n</blockquote>\n<p>依赖插件的同时，<code>spring-boot-maven-plugin</code>中还使用<code>&lt;resources&gt;</code>标签来重新定义jar包内部结构。</p>\n<p>以上信息是否满足将我们的服务打包成可执行jar呢？我们分析一下，如果达到我们想要的效果，我们需要</p>\n<ol>\n<li>自动配置主函数入口</li>\n<li>静态资源打包</li>\n<li>依赖打包</li>\n</ol>\n<p>对比上述插件，我们需要的功能都有，那么我们是否可以使用上方的插件及标签自己写个打包插件试试呢？ 当然！这里就不带着大家亲自尝试了，因为下面我要讲另一种Spring Boot没有用到的maven插件进行打包！</p>\n<h4 id=\"三-maven-assembly-plugin-插件打包jar\"><a class=\"header-anchor\" href=\"#三-maven-assembly-plugin-插件打包jar\">¶</a>三、maven-assembly-plugin 插件打包Jar</h4>\n<p><code>maven-assembly-plugin</code>是一个超灵活maven项目打包工具，提供默认配置和自定义配置，同时提供<code>Main-Class</code>的配置、静态文件Copy及依赖打包的功能，这里是官方对于这款插件的介绍</p>\n<blockquote>\n<p>The Assembly Plugin for Maven is primarily intended to allow users to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single distributable archive.<br>\nYour project can build distribution “assemblies” easily, using one of the convenient, prefabricated assembly descriptors. These descriptors handle many common operations, such as packaging a project’s artifact along with generated documentation into a single zip archive. Alternatively, your project can provide its own descriptor and assume a much higher level of control over how dependencies, modules, file-sets, and individual files are packaged in the assembly.</p>\n</blockquote>\n<p>大概意思就是</p>\n<p>Maven的组装插件主要是允许用户将项目输出与它的依赖项、模块、站点文档和其他文件一起集成到一个可分发的归档文件中。您的项目可以使用一种方便的预制组装描述符轻松地构建分布“程序集”。这些描述符处理许多常见的操作，例如将项目的工件连同生成的文档打包到一个zip归档文件中。或者，您的项目可以提供自己的描述符，并对依赖项、模块、文件集和各个文件如何在程序集中打包具有更高的控制级别。</p>\n<p>通俗一点，你可以自定义你的项目打包格式，<code>maven-assembly-plugin</code>更像是多个打包插件的集成，并提供多种打包的文件格式，使用方面也很方便，最简单的一个使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t   &lt;artifactId&gt; maven-assembly-plugin &lt;/artifactId&gt;</span><br><span class=\"line\">\t   &lt;configuration&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptorRefs&gt;</span><br><span class=\"line\">\t\t\t\t &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class=\"line\">\t\t\t&lt;/descriptorRefs&gt;</span><br><span class=\"line\">\t\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t\t &lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t\t  &lt;mainClass&gt;$&#123;main-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t\t &lt;/manifest&gt;</span><br><span class=\"line\">\t\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t   &lt;/configuration&gt;</span><br><span class=\"line\">\t   &lt;executions&gt;</span><br><span class=\"line\">\t\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t\t &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t\t &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t\t &lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t  &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t\t &lt;/goals&gt;</span><br><span class=\"line\">\t\t\t&lt;/execution&gt;</span><br><span class=\"line\">\t   &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p><code>descriptorRefs</code>标签内部可以配置使用官方定制好的打包方式，其中如下可选配置</p>\n<ul>\n<li>bin</li>\n<li>jar-with-dependencies</li>\n<li>src</li>\n<li>project<br>\n不过官方定制好的有很大的局限性，我们可以将上述改成如下配置，来自定义打包方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t&lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t&lt;mainClass&gt;$&#123;main-class&#125;&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t&lt;/manifest&gt;</span><br><span class=\"line\">\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">            &lt;descriptor&gt;src/main/resource/assembly-fat.xml&lt;/descriptor&gt;</span><br><span class=\"line\">        &lt;/descriptors&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">         &lt;execution&gt;</span><br><span class=\"line\">               &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">               &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">               &lt;goals&gt;</span><br><span class=\"line\">                    &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">               &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">     &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看出，上述配置去掉了<code>&lt;descriptorRefs&gt;</code>标签，增加了<code>&lt;descriptors&gt;</code>配置，并且子标签中还指向了<code>src/main/resource/assembly-fat.xml</code>这个配置文件，如果你的思路跟着这篇文章走，一定可以猜得到，这个配置文件就是我们自定义打包方式的入口！它的格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;id&gt;distribution&lt;/id&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;formats&gt;</span><br><span class=\"line\">    &lt;format&gt;jar&lt;/format&gt;</span><br><span class=\"line\">  &lt;/formats&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;dependencySets&gt;</span><br><span class=\"line\">\t\t&lt;dependencySet&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class=\"line\">\t\t\t&lt;unpack&gt;true&lt;/unpack&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependencySet&gt;</span><br><span class=\"line\">\t&lt;/dependencySets&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;fileSets&gt;</span><br><span class=\"line\">    &lt;fileSet&gt;</span><br><span class=\"line\">      &lt;directory&gt;$&#123;basedir&#125;&lt;/directory&gt;</span><br><span class=\"line\">      &lt;includes&gt;</span><br><span class=\"line\">        &lt;include&gt;*.txt&lt;/include&gt;</span><br><span class=\"line\">      &lt;/includes&gt;</span><br><span class=\"line\">      &lt;excludes&gt;</span><br><span class=\"line\">        &lt;exclude&gt;README.txt&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude&gt;NOTICE.txt&lt;/exclude&gt;</span><br><span class=\"line\">      &lt;/excludes&gt;</span><br><span class=\"line\">    &lt;/fileSet&gt;</span><br><span class=\"line\">  &lt;/fileSets&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;files&gt;</span><br><span class=\"line\">    &lt;file&gt;</span><br><span class=\"line\">      &lt;source&gt;README.txt&lt;/source&gt;</span><br><span class=\"line\">      &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">      &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">    &lt;/file&gt;</span><br><span class=\"line\">    &lt;file&gt;</span><br><span class=\"line\">      &lt;source&gt;NOTICE.txt&lt;/source&gt;</span><br><span class=\"line\">      &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">      &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">    &lt;/file&gt;</span><br><span class=\"line\">  &lt;/files&gt;</span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"下面是标签的相关介绍\"><a class=\"header-anchor\" href=\"#下面是标签的相关介绍\">¶</a>下面是标签的相关介绍</h5>\n<ul>\n<li><code>&lt;id&gt;</code> 生成文件的后缀，如果有，文件名将会是<code>${artifactId}-${id}.jar</code></li>\n<li><code>&lt;formats&gt;</code>生成文件的格式，可以同时生成多个格式的目标文件</li>\n<li><code>dependencySets</code>依赖jar的打包方式</li>\n<li><code>includeBaseDirectory</code>是否将项目目录引入进来，如果是<strong>True</strong>的话，生成的目标文件打开之后将会是项目主目录，我们打包的资源将会被放于这个主目录中（推荐<strong>Fasle</strong>，因为<code>Main-Class</code>路径通常直接是类路径）</li>\n<li><code>&lt;fileSets&gt;</code>引入静态资源的配置（目录级）</li>\n<li><code>files</code>引入静态资源的配置（文件级）</li>\n</ul>\n<p>以上是最常用的几种标签，更多的配置大家可以查阅官网 <a href=\"maven.apache.org/components/plugins/maven-assembly-plugin/\">传送门</a></p>\n<p>配置完成之后可以通过<code>mvn assembly:assembly</code>或者<code>mvn package</code>指令打包。</p>\n<p>介绍完毕，下面会拉取笔者自己用<a href=\"https://gitee.com/ainilili/No-Framework\" target=\"_blank\" rel=\"noopener\">NF</a>框架开发的模板工具来为大家演示一下<code>maven-assembly-plugin</code>在实战中的使用！</p>\n<h4 id=\"四-jar方式发布服务实战\"><a class=\"header-anchor\" href=\"#四-jar方式发布服务实战\">¶</a>四、Jar方式发布服务实战</h4>\n<p>首先是项目结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project</span><br><span class=\"line\">│  LICENSE</span><br><span class=\"line\">│  pom.xml\t\t\t\t\t\t\t\t=》pom文件</span><br><span class=\"line\">│  README.md</span><br><span class=\"line\">├─src</span><br><span class=\"line\">│  └─main</span><br><span class=\"line\">│      ├─java\t\t\t\t\t\t\t=》源码目录</span><br><span class=\"line\">│      └─resource\t\t\t\t\t\t=》配置文件目录</span><br><span class=\"line\">└─web\t\t\t\t\t\t\t\t\t=》UI静态资源</span><br></pre></td></tr></table></figure>\n<p>从结构中可以看出，我们需要手动配置的打包资源是<code>src/main/resource</code>和<code>web</code>这两个目录，所以我们需要所有配置，将上述两个目录随着我们的<code>.class</code>文件一起打包进jar中，首先在原pom.xml保持不变的基础上插入<code>maven-assembly-plugin</code>插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">\t\t&lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">\t\t&lt;archive&gt;</span><br><span class=\"line\">\t\t\t&lt;manifest&gt;</span><br><span class=\"line\">\t\t\t\t&lt;mainClass&gt;org.nico.ct.CtApplication&lt;/mainClass&gt;</span><br><span class=\"line\">\t\t\t&lt;/manifest&gt;</span><br><span class=\"line\">\t\t&lt;/archive&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptor&gt;src/main/resource/assembly-fat.xml&lt;/descriptor&gt;</span><br><span class=\"line\">\t\t&lt;/descriptors&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t &lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t  &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t &lt;/goals&gt;</span><br><span class=\"line\">\t\t&lt;/execution&gt;</span><br><span class=\"line\">   &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>接下来编辑<code>src/main/resource/assembly-fat.xml</code>文件配置打包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly</span><br><span class=\"line\">\txmlns=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;id&gt;RELEASE&lt;/id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;formats&gt;</span><br><span class=\"line\">\t\t&lt;format&gt;jar&lt;/format&gt;</span><br><span class=\"line\">\t&lt;/formats&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencySets&gt;</span><br><span class=\"line\">\t\t&lt;dependencySet&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class=\"line\">\t\t\t&lt;unpack&gt;true&lt;/unpack&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependencySet&gt;</span><br><span class=\"line\">\t&lt;/dependencySets&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;fileSets&gt;</span><br><span class=\"line\">\t\t&lt;fileSet&gt;</span><br><span class=\"line\">\t\t\t&lt;directory&gt;src/main/resource&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t&lt;include&gt;/**&lt;/include&gt;</span><br><span class=\"line\">\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t&lt;/fileSet&gt;</span><br><span class=\"line\">\t\t&lt;fileSet&gt;</span><br><span class=\"line\">\t\t\t&lt;directory&gt;web&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/web&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t&lt;include&gt;/**&lt;/include&gt;</span><br><span class=\"line\">\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t&lt;/fileSet&gt;</span><br><span class=\"line\">\t&lt;/fileSets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;files&gt;</span><br><span class=\"line\">\t\t&lt;file&gt;</span><br><span class=\"line\">\t\t\t&lt;source&gt;README.md&lt;/source&gt;</span><br><span class=\"line\">\t\t\t&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;</span><br><span class=\"line\">\t\t&lt;/file&gt;</span><br><span class=\"line\">\t&lt;/files&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>mvn assembly:assembly</code>，等待maven构建成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">[INFO] META-INF/ already added, skipping</span><br><span class=\"line\">[INFO] META-INF/MANIFEST.MF already added, skipping</span><br><span class=\"line\">[INFO] org/ already added, skipping</span><br><span class=\"line\">[INFO] org/nico/ already added, skipping</span><br><span class=\"line\">[INFO] META-INF/maven/ already added, skipping</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 7.627 s</span><br><span class=\"line\">[INFO] Finished at: 2018-06-30T15:39:47+08:00</span><br><span class=\"line\">[INFO] Final Memory: 24M/269M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>看到<code>BUILD SUCCESS</code>之后，你会发现项目target目录中会有两个jar</p>\n<ul>\n<li>CoffeeTime-0.0.1-SNAPSHOT.jar</li>\n<li>CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar</li>\n</ul>\n<p>文件名请忽略，后缀带<code>RELEASE</code>的jar就是<code>maven-assembly-plugin</code>插件生成的jar，解压看下目录</p>\n<pre><code>│  assembly-fat.xml\n│  cat-mysql-nico.xml\n│  cat-mysql.xml\n│  cat-redis-nico.xml\n│  cat-redis.xml\n│  cat.xml\n│  logno.properties\n│  module-info.class\n│  README.md\n├─com\n│  ├─mchange\n│  │ \n│  └─mysql  \n├─images\n├─META-INF\n│  ├─maven\n│  │ \n│  └─services\n├─net\n│  └─sf    \n├─org\n│  ├─apache\n│  │  \n│  ├─gjt\n│  │ \n│  ├─nico\n│  ├─objectweb\n│  └─slf4j\n│ \n├─redis\n│  └─clients\n│\n└─web\n    ├─images\n    ├─page \n    ├─plugins  \n    ├─script\n    ├─style\n    ├─video\n    └─videojs\n</code></pre>\n<p>路径没问题，我们试下能不能运行，切到jar包所在的目录，执行<code>jar -jar CoffeeTime-0.0.1-SNAPSHOT-RELEASE.jar</code>运行之<br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/6/166e78328722cfc4?w=1389&amp;h=752&amp;f=png&amp;s=66225\" alt=\"这里写图片描述\"></p>\n<p>SUCCESS !</p>\n"},{"title":"设计模式一：单例模式","author":"Nico","date":"2018-12-24T01:33:00.000Z","_content":"## 什么是单例模式\n单例是最常用的设计模式之一，其表达的最主要的意思是一个对象在整个jvm堆内存中只有一个实例，这样可以保证无论从任何代码块获取的单例实例都是唯一的。\n\n**单例的优缺点也很明显，优点有以下这些：**\n - 在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例\n - 单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。\n - 提供了对唯一实例的受控访问。\n - 由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。\n - 允许可变数目的实例。\n - 避免对共享资源的多重占用。\n\n**缺点：**\n - 不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。\n - 由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。\n - 单例类的职责过重，在一定程度上违背了“单一职责原则”。\n - 滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。\n\n**在很多场景单例模式是很有用的，例如配置容器，连接池等，在Java中获取编写一个单例也很简单（暂时屏蔽细节）：**\n - 第一步：私有化类构造\n - 第二步：内部定义一个类型为类本身的静态私有变量\n - 第三步：提供一个静态共有方法获取这个私有变量（获取之前赋值）\n\n**尤其是第三步，我们在获取这个私有变量的时候要对其进行赋值，那么就有两个阶段可以做这件事，**\n - 定义静态私有变量的时候直接赋值\n - 调用公有静态方法的时候再赋值\n\n这就引出了两种实现模式：``饿汉模式``和``懒汉模式``。\n## 饿汉模式\n饿汉从字面上的意思我们可以想到一个特别饥饿的大汉，而对于单例来讲则是形容以``迫不及待``的方式去将私有实例赋值，代码实现如下：\n```\npublic class Single {\n\tprivate static Single instance = new Single();\n\tprivate Single() {}\n\tpublic static Single getInstance() {\n\t\treturn instance;\n\t}\n}\n```\n这种模式的好处是不会存在并发下安全隐患，但是坏处也可想而知，对于jvm加载的过程就会将``instance``变量赋值，也就意味着我们即使没有用到这个单例对象也会将其实例``new``出来，可想而知，我们的永久带将会为其分配内存，带来的后果是永久带内存变少。\n\n## 懒汉模式\n懒汉模式则是在调用公有静态方法时才会为私有变量赋值：\n```\npublic class Single {\n\tprivate volatile static Single instance = null;// 1\n\tprivate Single() {}\n\tpublic static Single getInstance() {\n\t\tif(instance == null) { //2\n\t\t\tsynchronized (Single.class) { //3\n\t\t\t\tif(instance == null) { //4\n\t\t\t\t\tinstance = new Single(); // 5\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n相比之前的饿汉模式，我们有以下几个改动：\n - 标记1：增加volatile关键字保证``5``时不会指令重排\n - 标记2：是为了提高程序的效率，当Single对象被创建以后，再获取Single对象时就不用去验证同步代码块的锁及后面的代码，直接返回Single对象\n - 标记3：防止多线程下的重复执行\n - 标记4：同``3``，当多个线程同时调用``getInstance``方法，此时``instance``为空，两个线程可以轻松越过``2``，来到``3``抢锁，一个线程率先抢占到并且为``instance``赋值后，如果没有``4``的``if``判断，第二个线程也会重复去为``instance``赋值，这就会导致创建多个实例。\n\n而我们使用``volatile``则是因为在标记``5``赋值的时候会发生指令重排的问题！\n> 在Java中看似顺序的代码在JVM中，可能会出现编译器或者CPU对这些操作指令进行了重新排序；在特定情况下，指令重排将会给我们的程序带来不确定的结果.....\n\n对于``instance = new Single()``这一行代码，JVM执行的指令有多行：\n```\nmemory = allocate(); //1：分配对象的内存空间\nctorInstance(memory); //2：初始化对象\ninstance = memory; //3：设置instance指向刚分配的内存地址\n```\n经重排后如下：\n```\nmemory = allocate(); //1：分配对象的内存空间\ninstance = memory; //3：设置instance指向刚分配的内存地址，此时对象还没被初始化\nctorInstance(memory); //2：初始化对象\n```\n若有A线程进行完重排后的第二步，且未执行初始化对象。此时B线程来取instance时，发现instance不为空，于是便返回该值，但由于没有初始化完该对象，此时返回的对象是有问题的。\n","source":"_posts/设计模式一：单例模式.md","raw":"title: 设计模式一：单例模式\nauthor: Nico\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\ndate: 2018-12-24 09:33:00\n---\n## 什么是单例模式\n单例是最常用的设计模式之一，其表达的最主要的意思是一个对象在整个jvm堆内存中只有一个实例，这样可以保证无论从任何代码块获取的单例实例都是唯一的。\n\n**单例的优缺点也很明显，优点有以下这些：**\n - 在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例\n - 单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。\n - 提供了对唯一实例的受控访问。\n - 由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。\n - 允许可变数目的实例。\n - 避免对共享资源的多重占用。\n\n**缺点：**\n - 不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。\n - 由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。\n - 单例类的职责过重，在一定程度上违背了“单一职责原则”。\n - 滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。\n\n**在很多场景单例模式是很有用的，例如配置容器，连接池等，在Java中获取编写一个单例也很简单（暂时屏蔽细节）：**\n - 第一步：私有化类构造\n - 第二步：内部定义一个类型为类本身的静态私有变量\n - 第三步：提供一个静态共有方法获取这个私有变量（获取之前赋值）\n\n**尤其是第三步，我们在获取这个私有变量的时候要对其进行赋值，那么就有两个阶段可以做这件事，**\n - 定义静态私有变量的时候直接赋值\n - 调用公有静态方法的时候再赋值\n\n这就引出了两种实现模式：``饿汉模式``和``懒汉模式``。\n## 饿汉模式\n饿汉从字面上的意思我们可以想到一个特别饥饿的大汉，而对于单例来讲则是形容以``迫不及待``的方式去将私有实例赋值，代码实现如下：\n```\npublic class Single {\n\tprivate static Single instance = new Single();\n\tprivate Single() {}\n\tpublic static Single getInstance() {\n\t\treturn instance;\n\t}\n}\n```\n这种模式的好处是不会存在并发下安全隐患，但是坏处也可想而知，对于jvm加载的过程就会将``instance``变量赋值，也就意味着我们即使没有用到这个单例对象也会将其实例``new``出来，可想而知，我们的永久带将会为其分配内存，带来的后果是永久带内存变少。\n\n## 懒汉模式\n懒汉模式则是在调用公有静态方法时才会为私有变量赋值：\n```\npublic class Single {\n\tprivate volatile static Single instance = null;// 1\n\tprivate Single() {}\n\tpublic static Single getInstance() {\n\t\tif(instance == null) { //2\n\t\t\tsynchronized (Single.class) { //3\n\t\t\t\tif(instance == null) { //4\n\t\t\t\t\tinstance = new Single(); // 5\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n相比之前的饿汉模式，我们有以下几个改动：\n - 标记1：增加volatile关键字保证``5``时不会指令重排\n - 标记2：是为了提高程序的效率，当Single对象被创建以后，再获取Single对象时就不用去验证同步代码块的锁及后面的代码，直接返回Single对象\n - 标记3：防止多线程下的重复执行\n - 标记4：同``3``，当多个线程同时调用``getInstance``方法，此时``instance``为空，两个线程可以轻松越过``2``，来到``3``抢锁，一个线程率先抢占到并且为``instance``赋值后，如果没有``4``的``if``判断，第二个线程也会重复去为``instance``赋值，这就会导致创建多个实例。\n\n而我们使用``volatile``则是因为在标记``5``赋值的时候会发生指令重排的问题！\n> 在Java中看似顺序的代码在JVM中，可能会出现编译器或者CPU对这些操作指令进行了重新排序；在特定情况下，指令重排将会给我们的程序带来不确定的结果.....\n\n对于``instance = new Single()``这一行代码，JVM执行的指令有多行：\n```\nmemory = allocate(); //1：分配对象的内存空间\nctorInstance(memory); //2：初始化对象\ninstance = memory; //3：设置instance指向刚分配的内存地址\n```\n经重排后如下：\n```\nmemory = allocate(); //1：分配对象的内存空间\ninstance = memory; //3：设置instance指向刚分配的内存地址，此时对象还没被初始化\nctorInstance(memory); //2：初始化对象\n```\n若有A线程进行完重排后的第二步，且未执行初始化对象。此时B线程来取instance时，发现instance不为空，于是便返回该值，但由于没有初始化完该对象，此时返回的对象是有问题的。\n","slug":"设计模式一：单例模式","published":1,"updated":"2018-12-24T01:34:43.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq37ngv100000gtpwto9nccq","content":"<h2 id=\"什么是单例模式\"><a class=\"header-anchor\" href=\"#什么是单例模式\">¶</a>什么是单例模式</h2>\n<p>单例是最常用的设计模式之一，其表达的最主要的意思是一个对象在整个jvm堆内存中只有一个实例，这样可以保证无论从任何代码块获取的单例实例都是唯一的。</p>\n<p><strong>单例的优缺点也很明显，优点有以下这些：</strong></p>\n<ul>\n<li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li>\n<li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li>\n<li>提供了对唯一实例的受控访问。</li>\n<li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li>\n<li>允许可变数目的实例。</li>\n<li>避免对共享资源的多重占用。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li>\n<li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li>\n<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li>\n<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li>\n</ul>\n<p><strong>在很多场景单例模式是很有用的，例如配置容器，连接池等，在Java中获取编写一个单例也很简单（暂时屏蔽细节）：</strong></p>\n<ul>\n<li>第一步：私有化类构造</li>\n<li>第二步：内部定义一个类型为类本身的静态私有变量</li>\n<li>第三步：提供一个静态共有方法获取这个私有变量（获取之前赋值）</li>\n</ul>\n<p><strong>尤其是第三步，我们在获取这个私有变量的时候要对其进行赋值，那么就有两个阶段可以做这件事，</strong></p>\n<ul>\n<li>定义静态私有变量的时候直接赋值</li>\n<li>调用公有静态方法的时候再赋值</li>\n</ul>\n<p>这就引出了两种实现模式：<code>饿汉模式</code>和<code>懒汉模式</code>。</p>\n<h2 id=\"饿汉模式\"><a class=\"header-anchor\" href=\"#饿汉模式\">¶</a>饿汉模式</h2>\n<p>饿汉从字面上的意思我们可以想到一个特别饥饿的大汉，而对于单例来讲则是形容以<code>迫不及待</code>的方式去将私有实例赋值，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Single &#123;</span><br><span class=\"line\">\tprivate static Single instance = new Single();</span><br><span class=\"line\">\tprivate Single() &#123;&#125;</span><br><span class=\"line\">\tpublic static Single getInstance() &#123;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种模式的好处是不会存在并发下安全隐患，但是坏处也可想而知，对于jvm加载的过程就会将<code>instance</code>变量赋值，也就意味着我们即使没有用到这个单例对象也会将其实例<code>new</code>出来，可想而知，我们的永久带将会为其分配内存，带来的后果是永久带内存变少。</p>\n<h2 id=\"懒汉模式\"><a class=\"header-anchor\" href=\"#懒汉模式\">¶</a>懒汉模式</h2>\n<p>懒汉模式则是在调用公有静态方法时才会为私有变量赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Single &#123;</span><br><span class=\"line\">\tprivate volatile static Single instance = null;// 1</span><br><span class=\"line\">\tprivate Single() &#123;&#125;</span><br><span class=\"line\">\tpublic static Single getInstance() &#123;</span><br><span class=\"line\">\t\tif(instance == null) &#123; //2</span><br><span class=\"line\">\t\t\tsynchronized (Single.class) &#123; //3</span><br><span class=\"line\">\t\t\t\tif(instance == null) &#123; //4</span><br><span class=\"line\">\t\t\t\t\tinstance = new Single(); // 5</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之前的饿汉模式，我们有以下几个改动：</p>\n<ul>\n<li>标记1：增加volatile关键字保证<code>5</code>时不会指令重排</li>\n<li>标记2：是为了提高程序的效率，当Single对象被创建以后，再获取Single对象时就不用去验证同步代码块的锁及后面的代码，直接返回Single对象</li>\n<li>标记3：防止多线程下的重复执行</li>\n<li>标记4：同<code>3</code>，当多个线程同时调用<code>getInstance</code>方法，此时<code>instance</code>为空，两个线程可以轻松越过<code>2</code>，来到<code>3</code>抢锁，一个线程率先抢占到并且为<code>instance</code>赋值后，如果没有<code>4</code>的<code>if</code>判断，第二个线程也会重复去为<code>instance</code>赋值，这就会导致创建多个实例。</li>\n</ul>\n<p>而我们使用<code>volatile</code>则是因为在标记<code>5</code>赋值的时候会发生指令重排的问题！</p>\n<blockquote>\n<p>在Java中看似顺序的代码在JVM中，可能会出现编译器或者CPU对这些操作指令进行了重新排序；在特定情况下，指令重排将会给我们的程序带来不确定的结果…</p>\n</blockquote>\n<p>对于<code>instance = new Single()</code>这一行代码，JVM执行的指令有多行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1：分配对象的内存空间</span><br><span class=\"line\">ctorInstance(memory); //2：初始化对象</span><br><span class=\"line\">instance = memory; //3：设置instance指向刚分配的内存地址</span><br></pre></td></tr></table></figure>\n<p>经重排后如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1：分配对象的内存空间</span><br><span class=\"line\">instance = memory; //3：设置instance指向刚分配的内存地址，此时对象还没被初始化</span><br><span class=\"line\">ctorInstance(memory); //2：初始化对象</span><br></pre></td></tr></table></figure>\n<p>若有A线程进行完重排后的第二步，且未执行初始化对象。此时B线程来取instance时，发现instance不为空，于是便返回该值，但由于没有初始化完该对象，此时返回的对象是有问题的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是单例模式\"><a class=\"header-anchor\" href=\"#什么是单例模式\">¶</a>什么是单例模式</h2>\n<p>单例是最常用的设计模式之一，其表达的最主要的意思是一个对象在整个jvm堆内存中只有一个实例，这样可以保证无论从任何代码块获取的单例实例都是唯一的。</p>\n<p><strong>单例的优缺点也很明显，优点有以下这些：</strong></p>\n<ul>\n<li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li>\n<li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li>\n<li>提供了对唯一实例的受控访问。</li>\n<li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li>\n<li>允许可变数目的实例。</li>\n<li>避免对共享资源的多重占用。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li>\n<li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li>\n<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li>\n<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li>\n</ul>\n<p><strong>在很多场景单例模式是很有用的，例如配置容器，连接池等，在Java中获取编写一个单例也很简单（暂时屏蔽细节）：</strong></p>\n<ul>\n<li>第一步：私有化类构造</li>\n<li>第二步：内部定义一个类型为类本身的静态私有变量</li>\n<li>第三步：提供一个静态共有方法获取这个私有变量（获取之前赋值）</li>\n</ul>\n<p><strong>尤其是第三步，我们在获取这个私有变量的时候要对其进行赋值，那么就有两个阶段可以做这件事，</strong></p>\n<ul>\n<li>定义静态私有变量的时候直接赋值</li>\n<li>调用公有静态方法的时候再赋值</li>\n</ul>\n<p>这就引出了两种实现模式：<code>饿汉模式</code>和<code>懒汉模式</code>。</p>\n<h2 id=\"饿汉模式\"><a class=\"header-anchor\" href=\"#饿汉模式\">¶</a>饿汉模式</h2>\n<p>饿汉从字面上的意思我们可以想到一个特别饥饿的大汉，而对于单例来讲则是形容以<code>迫不及待</code>的方式去将私有实例赋值，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Single &#123;</span><br><span class=\"line\">\tprivate static Single instance = new Single();</span><br><span class=\"line\">\tprivate Single() &#123;&#125;</span><br><span class=\"line\">\tpublic static Single getInstance() &#123;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种模式的好处是不会存在并发下安全隐患，但是坏处也可想而知，对于jvm加载的过程就会将<code>instance</code>变量赋值，也就意味着我们即使没有用到这个单例对象也会将其实例<code>new</code>出来，可想而知，我们的永久带将会为其分配内存，带来的后果是永久带内存变少。</p>\n<h2 id=\"懒汉模式\"><a class=\"header-anchor\" href=\"#懒汉模式\">¶</a>懒汉模式</h2>\n<p>懒汉模式则是在调用公有静态方法时才会为私有变量赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Single &#123;</span><br><span class=\"line\">\tprivate volatile static Single instance = null;// 1</span><br><span class=\"line\">\tprivate Single() &#123;&#125;</span><br><span class=\"line\">\tpublic static Single getInstance() &#123;</span><br><span class=\"line\">\t\tif(instance == null) &#123; //2</span><br><span class=\"line\">\t\t\tsynchronized (Single.class) &#123; //3</span><br><span class=\"line\">\t\t\t\tif(instance == null) &#123; //4</span><br><span class=\"line\">\t\t\t\t\tinstance = new Single(); // 5</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之前的饿汉模式，我们有以下几个改动：</p>\n<ul>\n<li>标记1：增加volatile关键字保证<code>5</code>时不会指令重排</li>\n<li>标记2：是为了提高程序的效率，当Single对象被创建以后，再获取Single对象时就不用去验证同步代码块的锁及后面的代码，直接返回Single对象</li>\n<li>标记3：防止多线程下的重复执行</li>\n<li>标记4：同<code>3</code>，当多个线程同时调用<code>getInstance</code>方法，此时<code>instance</code>为空，两个线程可以轻松越过<code>2</code>，来到<code>3</code>抢锁，一个线程率先抢占到并且为<code>instance</code>赋值后，如果没有<code>4</code>的<code>if</code>判断，第二个线程也会重复去为<code>instance</code>赋值，这就会导致创建多个实例。</li>\n</ul>\n<p>而我们使用<code>volatile</code>则是因为在标记<code>5</code>赋值的时候会发生指令重排的问题！</p>\n<blockquote>\n<p>在Java中看似顺序的代码在JVM中，可能会出现编译器或者CPU对这些操作指令进行了重新排序；在特定情况下，指令重排将会给我们的程序带来不确定的结果…</p>\n</blockquote>\n<p>对于<code>instance = new Single()</code>这一行代码，JVM执行的指令有多行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1：分配对象的内存空间</span><br><span class=\"line\">ctorInstance(memory); //2：初始化对象</span><br><span class=\"line\">instance = memory; //3：设置instance指向刚分配的内存地址</span><br></pre></td></tr></table></figure>\n<p>经重排后如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1：分配对象的内存空间</span><br><span class=\"line\">instance = memory; //3：设置instance指向刚分配的内存地址，此时对象还没被初始化</span><br><span class=\"line\">ctorInstance(memory); //2：初始化对象</span><br></pre></td></tr></table></figure>\n<p>若有A线程进行完重排后的第二步，且未执行初始化对象。此时B线程来取instance时，发现instance不为空，于是便返回该值，但由于没有初始化完该对象，此时返回的对象是有问题的。</p>\n"},{"title":"深入JAVA8的HashMap实现原理","author":"Nico","date":"2018-12-25T11:42:00.000Z","_content":"## 引导\n在了解``HashMap``之前，我们应该先明白两个概念：``Hash``和``Map``，这可以帮助我们更容易了解``HashMap``的运行原理。\n\n那么何为``Hash``，又何为``Map``呢？\n\n### Hash\n之前写过一篇关于Hash的文章 [Hash](/zh-cn/java/data-structure/hash.md)\n\n### Map\nMap是一种``K-V``形式的数据结构，一个唯一的key，会唯一对应一个value。也就是说，在Map容器里不允许两个一模一样的key。\n\n一个简单的Map结构如下：\n```\n{\n  \"key1\":\"value1\",\n  \"key2\":\"value2\",\n  \"key3\":\"value3\"\n}\n```\n对于这种数据结构，并且Map会对外提供一些方法来实现对内部数据的操作：\n```\nV put(K key, V value)\nV get(Object key)\nV remove(Object key)\nboolean containsKey(Object key)\n```\n可见Map对于我们操作``K-V``形式的数据非常方便，实现的方式有很多，最简单粗暴的实现方式是使用``List``来存储每一个``K-V``组对，对于每种方法的实现只需要暴力循环碰撞即可，对于少量数据这种做法未必不可，如果数据量庞大之千万，我们就要换一种更加高效，速度更快的实现方式：``HashMap``。\n## HashMap\nMap在Java中的实现有很多，``HashMap``便是其中之一，在``JDK``漫长的版本更新中，``HashMap``的实现也是在不断的更新着：\n - **<=JDK1.7**：Table数组 + Entry链表\n - **>=JDK1.8**：Table数组 + Entry链表/红黑树\n\n本文我们跳过JDK1.7的实现，来看一下1.8中``HashMap``源码所带来的魅力冲击！\n### 实现原理\n对于各个版本的``HashMap``实现原理，主线流程都是一成不变的：\n\n![hashmap原理流程图](https://github.com/ainilili/snail/blob/master/docs/images/hashmap-1.8-1-1.jpg?raw=true)\n\n这里有两个数据结构需要我们知道：\n - **Table**：哈希表，存放Node元素。\n - **Node**：结点元素，存放``K-V``组对信息，其结构是一个链表/红黑树。\n\n另外，在HashMap内部有一些关键属性我们也要了解一下：\n - **DEFAULT_INITIAL_CAPACITY**：Table数组初始长度，默认为``1 << 4``，``2^4`` = 16。\n - **MAXIMUM_CAPACITY**：Table数组最高长度，默认为``1 << 30``，``2^30`` = 1073741824。\n - **DEFAULT_LOAD_FACTOR**：负载因子，当总元素数 > 数组长度 * 负载因子时，Table数组将会扩容，默认为0.75。\n - **TREEIFY_THRESHOLD**：树化阈值，当单个Table内Node数量超过该值，则会将链表转化为红黑树，默认为8。\n - **UNTREEIFY_THRESHOLD**：链化阈值，当扩容期间单个Table内Entry数量小于该值，则将红黑树转化为链表，默认为6。\n - **MIN_TREEIFY_CAPACITY**：最小树化阈值，当Table所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突）。\n - **size**：Table数组当前所有元素数。\n - **threshold**：下次扩容的阈值（数组长度 * 负载因子）\n\nHashMap的内部有着一个Table数组，而这个数组的初始长度为``DEFAULT_INITIAL_CAPACITY``参数值，Table数组存放的元素类型就是Node，它是一个单向链表：\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n  final int hash; //key的hash值\n  final K key;  //key\n  V value;  //value\n  Node<K,V> next; //下一个结点\n}\n```\n每个Table中存的Node元素相当于链表的``header``，``next``指向下一个结点，而这种链式结构的存在正是为了解决``hash冲突``：\n> **hash冲突**：两个元素的经过Hash散列之后分在同一个组内，我们将之解释为Hash冲突\n\n在JDK1.7之前的版本，hash冲突的解决方法是将被冲突的Node结点放于一个链表中，而Table中的元素则是链头，当然在JDK1.8中，当Table中链长超过``TREEIFY_THRESHOLD``阈值后，将会将链表转变为红黑树的实现``TreeNode``：\n```\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n  TreeNode<K,V> parent;  // red-black tree links\n  TreeNode<K,V> left;\n  TreeNode<K,V> right;\n  TreeNode<K,V> prev;    // needed to unlink next upon deletion\n  boolean red;\n}\n```\n当发生hash冲突的Node不断变多，那么这个链将会越来越长，那么遍历碰撞key时的耗时就会不断增加，这也就直接导致了性能的不足，从JDK1.8开始，HashMap对于单个Table中的Node超出某个阈值时，将会开始树化操作（链表转化为红黑树），这对于搜索的性能将会有很大的提升，而插入和删除的操作所带来的性能影响微乎其微。\n\n### put方法\n在``HashMap``的内部会有一个Table数组，这个数组的当前长度就是我们要实现映射的目标范围，当我们执行``put``方法时，``key``和``value``要经历这些事情：\n - 通过``Hash``散列获取到对应的Table\n - 遍历Table下的Node结点，做更新/添加操作\n - 扩容检测\n\n具体实现我们可以根据源码来详细了解一下：\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        // HashMap的懒加载策略，当执行put操作时检测Table数组初始化。\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        //通过``Hash``函数获取到对应的Table，如果当前Table为空，则直接初始化一个新的Node并放入该Table中。\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            //输入的key命中了当前Table的首元素，直接更新。\n            e = p;\n        else if (p instanceof TreeNode)\n            //如果当前Node类型为TreeNode，调用``putTreeVal``方法。\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            //如果不是TreeNode，则就是链表，遍历并与输入key做命中碰撞。\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    //如果当前Table中不存在当前key，则添加。\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        //超过了``TREEIFY_THRESHOLD``则转化为红黑树。\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    //做命中碰撞，使用hash、内存和equals同时判断（不同的元素hash可能会一致）。\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) {\n            //如果命中不为空，更新操作。\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        //扩容检测。\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n对于其过程中的关于Node链表和红黑树的转换过程我们可以暂时屏蔽掉，那么整个流程并不是很绕，那么我们继续深入的来看一下HashMap的扩容实现。\n\n### resize方法\nHashMap的扩容大致的实现是将老Table数组中所有的Entry取出来，重新对其hashcode做``Hash``散列到新的新的Table之中，也就是一个``re-put``的过程，具体还是通过源码来讲解：\n```Java\nfinal Node<K,V>[] resize() {\n    //保留老的hash表\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    //如果之前的容量大于0\n    if (oldCap > 0) {\n        //如果超出最大容量\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            //扩容阈值为int最大值\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        //否则计算扩容后的阈值\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0)\n        // 如果之前的容量等于0，并且之前的阈值大于零，则新的hash表长度就等于它\n        newCap = oldThr;\n    else {              \n        // 初始阈值为零表示使用默认值\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    //如果新的阈值为 0 ，就得用 新容量*加载因子 重计算一次\n    if (newThr == 0) {\n\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    //常见扩容后的hash表\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab; //A\n    if (oldTab != null) {\n        //遍历旧的hash表，将之内部元素转移到新的hash表\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    //如果当前Table内只有一个元素，重新做hash散列并赋值\n                    newTab[e.hash & (newCap - 1)] = e; //B\n                else if (e instanceof TreeNode)\n                    //如果旧哈希表中这个位置的桶是树形结构，就要把新哈希表里当前桶也变成树形结构\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { //保留旧哈希表桶中链表的顺序\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {  //遍历当前Table内的Node，赋值给新的Table\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n### get方法\n在我们看完HashMap对于put方法的实现之后，get方法则显得简单易懂，其代码与put相近无几，主要差别是没有了扩容和添加/更新的操作：\n```java\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    //判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash &&\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            // 检测第一个Node，命中则不需要在做do...while...循环\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                //如果Table内是树形结构，则使用对应的检索方法\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do { //如果是链表，则做while循环，直到命中或者遍历结束\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n### containsKey方法\n根据get方法的结果是否为空就可以直到是否包含该key：\n```\npublic boolean containsKey(Object key) {\n    return getNode(hash(key), key) != null;\n}\n```\n### remove方法\n同样类似于put操作，首先会查找对应的key所在位置，如果为空，则不操作，反之，将之移除：\n```java\nfinal Node<K,V> removeNode(int hash, Object key, Object value,\n                               boolean matchValue, boolean movable) {\n    Node<K,V>[] tab; Node<K,V> p; int n, index;\n    //判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (p = tab[index = (n - 1) & hash]) != null) {\n        Node<K,V> node = null, e; K k; V v;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            // 第一个Node命中\n            node = p;\n        else if ((e = p.next) != null) {\n            if (p instanceof TreeNode)\n                //如果Table内是树形结构，则使用对应的检索方法\n                node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n            else {\n                do { //如果是链表，则做while循环，直到命中或者遍历结束\n                    if (e.hash == hash &&\n                        ((k = e.key) == key ||\n                         (key != null && key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n        if (node != null && (!matchValue || (v = node.value) == value ||\n                             (value != null && value.equals(v)))) {\n            //如果命中到了对应的Node，则根据Node结构进行对应的移除操作\n            if (node instanceof TreeNode)\n                ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n            ++modCount;\n            //修改hash表元素数\n            --size;\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n```\n## 为何线程不安全？\n看完了HashMap的实现之后，就该谈一谈它为什么存在线程安全问题！\n\n### 数据丢失\n首先，我们将目光放在put方法的实现中，假设有两个线程在同时进行put操作，对应的数据分别为：\n```\nthread-1： put(1, 'abc');\nthread-2： put(1, 'efg');\n```\n假设此时Hash表的长度为10，且已经有两个元素在，负载因子为默认值0.75f，那么操作过程一定不会扩容，并且两个线程put的key都是1，那么它们将会分配到同一个table中，下方代码为put方法中的其中一段，其主要作用是遍历当前表内Node，寻找与当前key一样的Node结点，之后再做添加/更新操作。\n```java\nfor (int binCount = 0; ; ++binCount) {\n   if ((e = p.next) == null) {\n       p.next = newNode(hash, key, value, null); // A\n       if (binCount >= TREEIFY_THRESHOLD - 1)\n           treeifyBin(tab, hash);\n       break;\n   }\n   if (e.hash == hash &&\n       ((k = e.key) == key || (key != null && key.equals(k))))\n       break;\n   p = e;\n}\n```\n假设两个线程同时执行到了``A``这个位置，此时获取到的``p``是统一个对象，下一刻，cpu运转，两个线程同时运行，那么``p.next``的值将会是最后一个线程put的value值，而前一个则会丢失，这就会导致丢数据的情况！\n\n当然该情景同样会发生于``resize``和``remove``操作，至于为什么，大家可以思考一下！\n### size不准确\n这个就很简单了，为什么不准确呢，来看一下size变量在HashMap内部的定义：\n```\ntransient int size;\n```\n内存不可见并且增减操作未加锁，多线程操作下属于非原子操作！\n### 闭环死锁\n这个问题在JDK1.8版本的HashMap中已经不存在了，至于为啥，我要先讲一下在1.8之前的HashMap为什么会存在闭环死锁问题！\n\n从``闭环``这个名词上我们分析一下是什么问题，什么是闭环的，如果链表形成了一个环会不会就是闭环呢？而链表如何才会形成环？带着这些问题，我们在脑海中抽象出一个模型：\n```\ngraph LR\nA-->B\nB-->A\n```\n假设某一个Table中的Node链表发生了上述问题，那么我们在遍历时进行``do{ }while ((e = e.next) != null);``操作就会发生死锁的问题，那么看来我们的猜想方向是正确的，那么我们就具体分析一下HashMap在什么操作之中会产生闭环的问题，不过在此之前，我们要明白因果：\n```\n因：???\n果：闭环\n```\n我们知道，只有当两个结点内部的``next``相互引用对方的时候才会死锁，这种场景只能在两个已经存在同一个链上的结点同时以``相反的方向``被操作``next``引用的时候才会发生，而在HashMap内部，符合这种场景的只有一个方法：``resize``，那我们就来看一下JDK1.7的``resize``方法实现：\n```java\nvoid resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    Entry[] newTable = new Entry[newCapacity];\n    boolean oldAltHashing = useAltHashing;\n    useAltHashing |= sun.misc.VM.isBooted() &&\n            (newCapacity >= Holder.ALTERNATIVE_HASHING_THRESHOLD);\n    boolean rehash = oldAltHashing ^ useAltHashing;\n    //fu\n    transfer(newTable, rehash);\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\n进入``transfer``方法中，其内部实现了扩容过程：\n```java\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    for (Entry<K,V> e : table) { // A\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n我们发现，在JDK1.7的HashMap的扩容实现中，老的Table中的Node链的顺序赋值给新的Table中时的操作是反置的：\n```java\ne.next = newTable[i];\nnewTable[i] = e;\ne = next;\n```\n上述操作是将当前Node的next指针指向当前Table的头结点，之后当前Node又变为了Table的头结点，此时假设A、B两个线程同时执行到了``transfer``方法中的``A``位置，并且此时的``oldTable``和``newTable``的结构是这样的：\n```\noldTable[]\ntable-1: a -> b -> c -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: null\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n如果很巧，两个线程在同一个CPU上执行，那么就会存在一个抢占时间片的场景，假设A先抢到了时间片，然后执行一番操作之后，``oldTable``和``newTable``的结构如下：\n```\noldTable[]\ntable-1: a -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: c -> b -> a\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n之后还没等它做``oldTable = newTable``操作，B抢到了时间片，并也做了同样一番操作，``oldTable``和``newTable``的结构如下：\n```\noldTable[]\ntable-1: a -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: a -> c -> b -> a\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n此时A或者B谁先``oldTable = newTable``已经无所谓了，因为``newTable``中已经产生了闭环，之后在进行get或者put操作时，如果不小心触发到了while循环，那将会一直死循环：\n```java\ndo{\n  //do some thing\n}while ((e = e.next) != null);  //e = e.next将会永不为空\n```\n从上述场景产生的过程中我们发现，``a -> c -> b -> a``这种闭环问题的罪魁祸首是因为1.7中的HashMap在扩容时为了免去再次遍历链表，很聪明的将当前结点作为新链表的头结点，这就会导致顺序反转，所以无序化导致了闭环的产生，而这种问题不仅仅是在HashMap中体现，Mysql的死锁问题的原因常常也是因为反序加行锁导致的！\n\n而在开头说过，JDK1.8已经避免了这个问题，这是为什么呢？看下代码就知道了：\n```java\nelse { // preserve order\n   Node<K,V> loHead = null, loTail = null;\n   Node<K,V> hiHead = null, hiTail = null;\n   Node<K,V> next;\n   do {\n       next = e.next;\n       if ((e.hash & oldCap) == 0) {\n           if (loTail == null)\n               loHead = e;\n           else\n               loTail.next = e;\n           loTail = e;\n       }\n       else {\n           if (hiTail == null)\n               hiHead = e;\n           else\n               hiTail.next = e;\n           hiTail = e;\n       }\n   } while ((e = next) != null);\n   if (loTail != null) {\n       loTail.next = null;\n       newTab[j] = loHead;  //A\n   }\n   if (hiTail != null) {\n       hiTail.next = null;\n       newTab[j + oldCap] = hiHead; //B\n   }\n}\n```\n同样是扩容的操作，JDK1.8中的HashMap通过两个链分别去存储头结点和尾结点以保证它有序，并且不会频繁的去赋值``newTable``，而是在循环之后直接赋值（请注意A、B标记处），这样就非常简单的避免了产生闭环的陷阱！\n","source":"_posts/深入JAVA8的HashMap实现原理.md","raw":"title: 深入JAVA8的HashMap实现原理\nauthor: Nico\ntags: []\ncategories:\n  - 数据结构\ndate: 2018-12-25 19:42:00\n---\n## 引导\n在了解``HashMap``之前，我们应该先明白两个概念：``Hash``和``Map``，这可以帮助我们更容易了解``HashMap``的运行原理。\n\n那么何为``Hash``，又何为``Map``呢？\n\n### Hash\n之前写过一篇关于Hash的文章 [Hash](/zh-cn/java/data-structure/hash.md)\n\n### Map\nMap是一种``K-V``形式的数据结构，一个唯一的key，会唯一对应一个value。也就是说，在Map容器里不允许两个一模一样的key。\n\n一个简单的Map结构如下：\n```\n{\n  \"key1\":\"value1\",\n  \"key2\":\"value2\",\n  \"key3\":\"value3\"\n}\n```\n对于这种数据结构，并且Map会对外提供一些方法来实现对内部数据的操作：\n```\nV put(K key, V value)\nV get(Object key)\nV remove(Object key)\nboolean containsKey(Object key)\n```\n可见Map对于我们操作``K-V``形式的数据非常方便，实现的方式有很多，最简单粗暴的实现方式是使用``List``来存储每一个``K-V``组对，对于每种方法的实现只需要暴力循环碰撞即可，对于少量数据这种做法未必不可，如果数据量庞大之千万，我们就要换一种更加高效，速度更快的实现方式：``HashMap``。\n## HashMap\nMap在Java中的实现有很多，``HashMap``便是其中之一，在``JDK``漫长的版本更新中，``HashMap``的实现也是在不断的更新着：\n - **<=JDK1.7**：Table数组 + Entry链表\n - **>=JDK1.8**：Table数组 + Entry链表/红黑树\n\n本文我们跳过JDK1.7的实现，来看一下1.8中``HashMap``源码所带来的魅力冲击！\n### 实现原理\n对于各个版本的``HashMap``实现原理，主线流程都是一成不变的：\n\n![hashmap原理流程图](https://github.com/ainilili/snail/blob/master/docs/images/hashmap-1.8-1-1.jpg?raw=true)\n\n这里有两个数据结构需要我们知道：\n - **Table**：哈希表，存放Node元素。\n - **Node**：结点元素，存放``K-V``组对信息，其结构是一个链表/红黑树。\n\n另外，在HashMap内部有一些关键属性我们也要了解一下：\n - **DEFAULT_INITIAL_CAPACITY**：Table数组初始长度，默认为``1 << 4``，``2^4`` = 16。\n - **MAXIMUM_CAPACITY**：Table数组最高长度，默认为``1 << 30``，``2^30`` = 1073741824。\n - **DEFAULT_LOAD_FACTOR**：负载因子，当总元素数 > 数组长度 * 负载因子时，Table数组将会扩容，默认为0.75。\n - **TREEIFY_THRESHOLD**：树化阈值，当单个Table内Node数量超过该值，则会将链表转化为红黑树，默认为8。\n - **UNTREEIFY_THRESHOLD**：链化阈值，当扩容期间单个Table内Entry数量小于该值，则将红黑树转化为链表，默认为6。\n - **MIN_TREEIFY_CAPACITY**：最小树化阈值，当Table所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突）。\n - **size**：Table数组当前所有元素数。\n - **threshold**：下次扩容的阈值（数组长度 * 负载因子）\n\nHashMap的内部有着一个Table数组，而这个数组的初始长度为``DEFAULT_INITIAL_CAPACITY``参数值，Table数组存放的元素类型就是Node，它是一个单向链表：\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n  final int hash; //key的hash值\n  final K key;  //key\n  V value;  //value\n  Node<K,V> next; //下一个结点\n}\n```\n每个Table中存的Node元素相当于链表的``header``，``next``指向下一个结点，而这种链式结构的存在正是为了解决``hash冲突``：\n> **hash冲突**：两个元素的经过Hash散列之后分在同一个组内，我们将之解释为Hash冲突\n\n在JDK1.7之前的版本，hash冲突的解决方法是将被冲突的Node结点放于一个链表中，而Table中的元素则是链头，当然在JDK1.8中，当Table中链长超过``TREEIFY_THRESHOLD``阈值后，将会将链表转变为红黑树的实现``TreeNode``：\n```\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n  TreeNode<K,V> parent;  // red-black tree links\n  TreeNode<K,V> left;\n  TreeNode<K,V> right;\n  TreeNode<K,V> prev;    // needed to unlink next upon deletion\n  boolean red;\n}\n```\n当发生hash冲突的Node不断变多，那么这个链将会越来越长，那么遍历碰撞key时的耗时就会不断增加，这也就直接导致了性能的不足，从JDK1.8开始，HashMap对于单个Table中的Node超出某个阈值时，将会开始树化操作（链表转化为红黑树），这对于搜索的性能将会有很大的提升，而插入和删除的操作所带来的性能影响微乎其微。\n\n### put方法\n在``HashMap``的内部会有一个Table数组，这个数组的当前长度就是我们要实现映射的目标范围，当我们执行``put``方法时，``key``和``value``要经历这些事情：\n - 通过``Hash``散列获取到对应的Table\n - 遍历Table下的Node结点，做更新/添加操作\n - 扩容检测\n\n具体实现我们可以根据源码来详细了解一下：\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        // HashMap的懒加载策略，当执行put操作时检测Table数组初始化。\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        //通过``Hash``函数获取到对应的Table，如果当前Table为空，则直接初始化一个新的Node并放入该Table中。\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            //输入的key命中了当前Table的首元素，直接更新。\n            e = p;\n        else if (p instanceof TreeNode)\n            //如果当前Node类型为TreeNode，调用``putTreeVal``方法。\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            //如果不是TreeNode，则就是链表，遍历并与输入key做命中碰撞。\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    //如果当前Table中不存在当前key，则添加。\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        //超过了``TREEIFY_THRESHOLD``则转化为红黑树。\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    //做命中碰撞，使用hash、内存和equals同时判断（不同的元素hash可能会一致）。\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) {\n            //如果命中不为空，更新操作。\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        //扩容检测。\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n对于其过程中的关于Node链表和红黑树的转换过程我们可以暂时屏蔽掉，那么整个流程并不是很绕，那么我们继续深入的来看一下HashMap的扩容实现。\n\n### resize方法\nHashMap的扩容大致的实现是将老Table数组中所有的Entry取出来，重新对其hashcode做``Hash``散列到新的新的Table之中，也就是一个``re-put``的过程，具体还是通过源码来讲解：\n```Java\nfinal Node<K,V>[] resize() {\n    //保留老的hash表\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    //如果之前的容量大于0\n    if (oldCap > 0) {\n        //如果超出最大容量\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            //扩容阈值为int最大值\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        //否则计算扩容后的阈值\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0)\n        // 如果之前的容量等于0，并且之前的阈值大于零，则新的hash表长度就等于它\n        newCap = oldThr;\n    else {              \n        // 初始阈值为零表示使用默认值\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    //如果新的阈值为 0 ，就得用 新容量*加载因子 重计算一次\n    if (newThr == 0) {\n\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    //常见扩容后的hash表\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab; //A\n    if (oldTab != null) {\n        //遍历旧的hash表，将之内部元素转移到新的hash表\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    //如果当前Table内只有一个元素，重新做hash散列并赋值\n                    newTab[e.hash & (newCap - 1)] = e; //B\n                else if (e instanceof TreeNode)\n                    //如果旧哈希表中这个位置的桶是树形结构，就要把新哈希表里当前桶也变成树形结构\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { //保留旧哈希表桶中链表的顺序\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {  //遍历当前Table内的Node，赋值给新的Table\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n### get方法\n在我们看完HashMap对于put方法的实现之后，get方法则显得简单易懂，其代码与put相近无几，主要差别是没有了扩容和添加/更新的操作：\n```java\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    //判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash &&\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            // 检测第一个Node，命中则不需要在做do...while...循环\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                //如果Table内是树形结构，则使用对应的检索方法\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do { //如果是链表，则做while循环，直到命中或者遍历结束\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n### containsKey方法\n根据get方法的结果是否为空就可以直到是否包含该key：\n```\npublic boolean containsKey(Object key) {\n    return getNode(hash(key), key) != null;\n}\n```\n### remove方法\n同样类似于put操作，首先会查找对应的key所在位置，如果为空，则不操作，反之，将之移除：\n```java\nfinal Node<K,V> removeNode(int hash, Object key, Object value,\n                               boolean matchValue, boolean movable) {\n    Node<K,V>[] tab; Node<K,V> p; int n, index;\n    //判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (p = tab[index = (n - 1) & hash]) != null) {\n        Node<K,V> node = null, e; K k; V v;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            // 第一个Node命中\n            node = p;\n        else if ((e = p.next) != null) {\n            if (p instanceof TreeNode)\n                //如果Table内是树形结构，则使用对应的检索方法\n                node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n            else {\n                do { //如果是链表，则做while循环，直到命中或者遍历结束\n                    if (e.hash == hash &&\n                        ((k = e.key) == key ||\n                         (key != null && key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n        if (node != null && (!matchValue || (v = node.value) == value ||\n                             (value != null && value.equals(v)))) {\n            //如果命中到了对应的Node，则根据Node结构进行对应的移除操作\n            if (node instanceof TreeNode)\n                ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n            ++modCount;\n            //修改hash表元素数\n            --size;\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n```\n## 为何线程不安全？\n看完了HashMap的实现之后，就该谈一谈它为什么存在线程安全问题！\n\n### 数据丢失\n首先，我们将目光放在put方法的实现中，假设有两个线程在同时进行put操作，对应的数据分别为：\n```\nthread-1： put(1, 'abc');\nthread-2： put(1, 'efg');\n```\n假设此时Hash表的长度为10，且已经有两个元素在，负载因子为默认值0.75f，那么操作过程一定不会扩容，并且两个线程put的key都是1，那么它们将会分配到同一个table中，下方代码为put方法中的其中一段，其主要作用是遍历当前表内Node，寻找与当前key一样的Node结点，之后再做添加/更新操作。\n```java\nfor (int binCount = 0; ; ++binCount) {\n   if ((e = p.next) == null) {\n       p.next = newNode(hash, key, value, null); // A\n       if (binCount >= TREEIFY_THRESHOLD - 1)\n           treeifyBin(tab, hash);\n       break;\n   }\n   if (e.hash == hash &&\n       ((k = e.key) == key || (key != null && key.equals(k))))\n       break;\n   p = e;\n}\n```\n假设两个线程同时执行到了``A``这个位置，此时获取到的``p``是统一个对象，下一刻，cpu运转，两个线程同时运行，那么``p.next``的值将会是最后一个线程put的value值，而前一个则会丢失，这就会导致丢数据的情况！\n\n当然该情景同样会发生于``resize``和``remove``操作，至于为什么，大家可以思考一下！\n### size不准确\n这个就很简单了，为什么不准确呢，来看一下size变量在HashMap内部的定义：\n```\ntransient int size;\n```\n内存不可见并且增减操作未加锁，多线程操作下属于非原子操作！\n### 闭环死锁\n这个问题在JDK1.8版本的HashMap中已经不存在了，至于为啥，我要先讲一下在1.8之前的HashMap为什么会存在闭环死锁问题！\n\n从``闭环``这个名词上我们分析一下是什么问题，什么是闭环的，如果链表形成了一个环会不会就是闭环呢？而链表如何才会形成环？带着这些问题，我们在脑海中抽象出一个模型：\n```\ngraph LR\nA-->B\nB-->A\n```\n假设某一个Table中的Node链表发生了上述问题，那么我们在遍历时进行``do{ }while ((e = e.next) != null);``操作就会发生死锁的问题，那么看来我们的猜想方向是正确的，那么我们就具体分析一下HashMap在什么操作之中会产生闭环的问题，不过在此之前，我们要明白因果：\n```\n因：???\n果：闭环\n```\n我们知道，只有当两个结点内部的``next``相互引用对方的时候才会死锁，这种场景只能在两个已经存在同一个链上的结点同时以``相反的方向``被操作``next``引用的时候才会发生，而在HashMap内部，符合这种场景的只有一个方法：``resize``，那我们就来看一下JDK1.7的``resize``方法实现：\n```java\nvoid resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    Entry[] newTable = new Entry[newCapacity];\n    boolean oldAltHashing = useAltHashing;\n    useAltHashing |= sun.misc.VM.isBooted() &&\n            (newCapacity >= Holder.ALTERNATIVE_HASHING_THRESHOLD);\n    boolean rehash = oldAltHashing ^ useAltHashing;\n    //fu\n    transfer(newTable, rehash);\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\n进入``transfer``方法中，其内部实现了扩容过程：\n```java\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    for (Entry<K,V> e : table) { // A\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n我们发现，在JDK1.7的HashMap的扩容实现中，老的Table中的Node链的顺序赋值给新的Table中时的操作是反置的：\n```java\ne.next = newTable[i];\nnewTable[i] = e;\ne = next;\n```\n上述操作是将当前Node的next指针指向当前Table的头结点，之后当前Node又变为了Table的头结点，此时假设A、B两个线程同时执行到了``transfer``方法中的``A``位置，并且此时的``oldTable``和``newTable``的结构是这样的：\n```\noldTable[]\ntable-1: a -> b -> c -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: null\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n如果很巧，两个线程在同一个CPU上执行，那么就会存在一个抢占时间片的场景，假设A先抢到了时间片，然后执行一番操作之后，``oldTable``和``newTable``的结构如下：\n```\noldTable[]\ntable-1: a -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: c -> b -> a\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n之后还没等它做``oldTable = newTable``操作，B抢到了时间片，并也做了同样一番操作，``oldTable``和``newTable``的结构如下：\n```\noldTable[]\ntable-1: a -> null\ntable-2: null\ntable-3: null\n\nnewTable[]\ntable-1: null\ntable-2: a -> c -> b -> a\ntable-3: null\ntable-4: null\ntable-5: null\ntable-6: null\n```\n此时A或者B谁先``oldTable = newTable``已经无所谓了，因为``newTable``中已经产生了闭环，之后在进行get或者put操作时，如果不小心触发到了while循环，那将会一直死循环：\n```java\ndo{\n  //do some thing\n}while ((e = e.next) != null);  //e = e.next将会永不为空\n```\n从上述场景产生的过程中我们发现，``a -> c -> b -> a``这种闭环问题的罪魁祸首是因为1.7中的HashMap在扩容时为了免去再次遍历链表，很聪明的将当前结点作为新链表的头结点，这就会导致顺序反转，所以无序化导致了闭环的产生，而这种问题不仅仅是在HashMap中体现，Mysql的死锁问题的原因常常也是因为反序加行锁导致的！\n\n而在开头说过，JDK1.8已经避免了这个问题，这是为什么呢？看下代码就知道了：\n```java\nelse { // preserve order\n   Node<K,V> loHead = null, loTail = null;\n   Node<K,V> hiHead = null, hiTail = null;\n   Node<K,V> next;\n   do {\n       next = e.next;\n       if ((e.hash & oldCap) == 0) {\n           if (loTail == null)\n               loHead = e;\n           else\n               loTail.next = e;\n           loTail = e;\n       }\n       else {\n           if (hiTail == null)\n               hiHead = e;\n           else\n               hiTail.next = e;\n           hiTail = e;\n       }\n   } while ((e = next) != null);\n   if (loTail != null) {\n       loTail.next = null;\n       newTab[j] = loHead;  //A\n   }\n   if (hiTail != null) {\n       hiTail.next = null;\n       newTab[j + oldCap] = hiHead; //B\n   }\n}\n```\n同样是扩容的操作，JDK1.8中的HashMap通过两个链分别去存储头结点和尾结点以保证它有序，并且不会频繁的去赋值``newTable``，而是在循环之后直接赋值（请注意A、B标记处），这样就非常简单的避免了产生闭环的陷阱！\n","slug":"深入JAVA8的HashMap实现原理","published":1,"updated":"2018-12-25T11:42:47.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt3yd1pp0000e3tpcacxg3lp","content":"<h2 id=\"引导\"><a class=\"header-anchor\" href=\"#引导\">¶</a>引导</h2>\n<p>在了解<code>HashMap</code>之前，我们应该先明白两个概念：<code>Hash</code>和<code>Map</code>，这可以帮助我们更容易了解<code>HashMap</code>的运行原理。</p>\n<p>那么何为<code>Hash</code>，又何为<code>Map</code>呢？</p>\n<h3 id=\"hash\"><a class=\"header-anchor\" href=\"#hash\">¶</a>Hash</h3>\n<p>之前写过一篇关于Hash的文章 <a href=\"/zh-cn/java/data-structure/hash.md\">Hash</a></p>\n<h3 id=\"map\"><a class=\"header-anchor\" href=\"#map\">¶</a>Map</h3>\n<p>Map是一种<code>K-V</code>形式的数据结构，一个唯一的key，会唯一对应一个value。也就是说，在Map容器里不允许两个一模一样的key。</p>\n<p>一个简单的Map结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;key1&quot;:&quot;value1&quot;,</span><br><span class=\"line\">  &quot;key2&quot;:&quot;value2&quot;,</span><br><span class=\"line\">  &quot;key3&quot;:&quot;value3&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这种数据结构，并且Map会对外提供一些方法来实现对内部数据的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V put(K key, V value)</span><br><span class=\"line\">V get(Object key)</span><br><span class=\"line\">V remove(Object key)</span><br><span class=\"line\">boolean containsKey(Object key)</span><br></pre></td></tr></table></figure>\n<p>可见Map对于我们操作<code>K-V</code>形式的数据非常方便，实现的方式有很多，最简单粗暴的实现方式是使用<code>List</code>来存储每一个<code>K-V</code>组对，对于每种方法的实现只需要暴力循环碰撞即可，对于少量数据这种做法未必不可，如果数据量庞大之千万，我们就要换一种更加高效，速度更快的实现方式：<code>HashMap</code>。</p>\n<h2 id=\"hashmap\"><a class=\"header-anchor\" href=\"#hashmap\">¶</a>HashMap</h2>\n<p>Map在Java中的实现有很多，<code>HashMap</code>便是其中之一，在<code>JDK</code>漫长的版本更新中，<code>HashMap</code>的实现也是在不断的更新着：</p>\n<ul>\n<li><strong>&lt;=JDK1.7</strong>：Table数组 + Entry链表</li>\n<li><strong>&gt;=JDK1.8</strong>：Table数组 + Entry链表/红黑树</li>\n</ul>\n<p>本文我们跳过JDK1.7的实现，来看一下1.8中<code>HashMap</code>源码所带来的魅力冲击！</p>\n<h3 id=\"实现原理\"><a class=\"header-anchor\" href=\"#实现原理\">¶</a>实现原理</h3>\n<p>对于各个版本的<code>HashMap</code>实现原理，主线流程都是一成不变的：</p>\n<p><img src=\"https://github.com/ainilili/snail/blob/master/docs/images/hashmap-1.8-1-1.jpg?raw=true\" alt=\"hashmap原理流程图\"></p>\n<p>这里有两个数据结构需要我们知道：</p>\n<ul>\n<li><strong>Table</strong>：哈希表，存放Node元素。</li>\n<li><strong>Node</strong>：结点元素，存放<code>K-V</code>组对信息，其结构是一个链表/红黑树。</li>\n</ul>\n<p>另外，在HashMap内部有一些关键属性我们也要了解一下：</p>\n<ul>\n<li><strong>DEFAULT_INITIAL_CAPACITY</strong>：Table数组初始长度，默认为<code>1 &lt;&lt; 4</code>，<code>2^4</code> = 16。</li>\n<li><strong>MAXIMUM_CAPACITY</strong>：Table数组最高长度，默认为<code>1 &lt;&lt; 30</code>，<code>2^30</code> = 1073741824。</li>\n<li><strong>DEFAULT_LOAD_FACTOR</strong>：负载因子，当总元素数 &gt; 数组长度 * 负载因子时，Table数组将会扩容，默认为0.75。</li>\n<li><strong>TREEIFY_THRESHOLD</strong>：树化阈值，当单个Table内Node数量超过该值，则会将链表转化为红黑树，默认为8。</li>\n<li><strong>UNTREEIFY_THRESHOLD</strong>：链化阈值，当扩容期间单个Table内Entry数量小于该值，则将红黑树转化为链表，默认为6。</li>\n<li><strong>MIN_TREEIFY_CAPACITY</strong>：最小树化阈值，当Table所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突）。</li>\n<li><strong>size</strong>：Table数组当前所有元素数。</li>\n<li><strong>threshold</strong>：下次扩容的阈值（数组长度 * 负载因子）</li>\n</ul>\n<p>HashMap的内部有着一个Table数组，而这个数组的初始长度为<code>DEFAULT_INITIAL_CAPACITY</code>参数值，Table数组存放的元素类型就是Node，它是一个单向链表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">//key的hash值</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> K key;  <span class=\"comment\">//key</span></span><br><span class=\"line\">  V value;  <span class=\"comment\">//value</span></span><br><span class=\"line\">  Node&lt;K,V&gt; next; <span class=\"comment\">//下一个结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个Table中存的Node元素相当于链表的<code>header</code>，<code>next</code>指向下一个结点，而这种链式结构的存在正是为了解决<code>hash冲突</code>：</p>\n<blockquote>\n<p><strong>hash冲突</strong>：两个元素的经过Hash散列之后分在同一个组内，我们将之解释为Hash冲突</p>\n</blockquote>\n<p>在JDK1.7之前的版本，hash冲突的解决方法是将被冲突的Node结点放于一个链表中，而Table中的元素则是链头，当然在JDK1.8中，当Table中链长超过<code>TREEIFY_THRESHOLD</code>阈值后，将会将链表转变为红黑树的实现<code>TreeNode</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class=\"line\">  boolean red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当发生hash冲突的Node不断变多，那么这个链将会越来越长，那么遍历碰撞key时的耗时就会不断增加，这也就直接导致了性能的不足，从JDK1.8开始，HashMap对于单个Table中的Node超出某个阈值时，将会开始树化操作（链表转化为红黑树），这对于搜索的性能将会有很大的提升，而插入和删除的操作所带来的性能影响微乎其微。</p>\n<h3 id=\"put方法\"><a class=\"header-anchor\" href=\"#put方法\">¶</a>put方法</h3>\n<p>在<code>HashMap</code>的内部会有一个Table数组，这个数组的当前长度就是我们要实现映射的目标范围，当我们执行<code>put</code>方法时，<code>key</code>和<code>value</code>要经历这些事情：</p>\n<ul>\n<li>通过<code>Hash</code>散列获取到对应的Table</li>\n<li>遍历Table下的Node结点，做更新/添加操作</li>\n<li>扩容检测</li>\n</ul>\n<p>具体实现我们可以根据源码来详细了解一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// HashMap的懒加载策略，当执行put操作时检测Table数组初始化。</span></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//通过``Hash``函数获取到对应的Table，如果当前Table为空，则直接初始化一个新的Node并放入该Table中。</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">//输入的key命中了当前Table的首元素，直接更新。</span></span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            <span class=\"comment\">//如果当前Node类型为TreeNode，调用``putTreeVal``方法。</span></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是TreeNode，则就是链表，遍历并与输入key做命中碰撞。</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前Table中不存在当前key，则添加。</span></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        <span class=\"comment\">//超过了``TREEIFY_THRESHOLD``则转化为红黑树。</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"comment\">//做命中碰撞，使用hash、内存和equals同时判断（不同的元素hash可能会一致）。</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果命中不为空，更新操作。</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        <span class=\"comment\">//扩容检测。</span></span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于其过程中的关于Node链表和红黑树的转换过程我们可以暂时屏蔽掉，那么整个流程并不是很绕，那么我们继续深入的来看一下HashMap的扩容实现。</p>\n<h3 id=\"resize方法\"><a class=\"header-anchor\" href=\"#resize方法\">¶</a>resize方法</h3>\n<p>HashMap的扩容大致的实现是将老Table数组中所有的Entry取出来，重新对其hashcode做<code>Hash</code>散列到新的新的Table之中，也就是一个<code>re-put</code>的过程，具体还是通过源码来讲解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//保留老的hash表</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果之前的容量大于0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果超出最大容量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//扩容阈值为int最大值</span></span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//否则计算扩容后的阈值</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前的容量等于0，并且之前的阈值大于零，则新的hash表长度就等于它</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;              </span><br><span class=\"line\">        <span class=\"comment\">// 初始阈值为零表示使用默认值</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新的阈值为 0 ，就得用 新容量*加载因子 重计算一次</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"comment\">//常见扩容后的hash表</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab; <span class=\"comment\">//A</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历旧的hash表，将之内部元素转移到新的hash表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前Table内只有一个元素，重新做hash散列并赋值</span></span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e; <span class=\"comment\">//B</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    <span class=\"comment\">//如果旧哈希表中这个位置的桶是树形结构，就要把新哈希表里当前桶也变成树形结构</span></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//保留旧哈希表桶中链表的顺序</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;  <span class=\"comment\">//遍历当前Table内的Node，赋值给新的Table</span></span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a class=\"header-anchor\" href=\"#get方法\">¶</a>get方法</h3>\n<p>在我们看完HashMap对于put方法的实现之后，get方法则显得简单易懂，其代码与put相近无几，主要差别是没有了扩容和添加/更新的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">//判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">// 检测第一个Node，命中则不需要在做do...while...循环</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">//如果Table内是树形结构，则使用对应的检索方法</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//如果是链表，则做while循环，直到命中或者遍历结束</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"containskey方法\"><a class=\"header-anchor\" href=\"#containskey方法\">¶</a>containsKey方法</h3>\n<p>根据get方法的结果是否为空就可以直到是否包含该key：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean containsKey(Object key) &#123;</span><br><span class=\"line\">    return getNode(hash(key), key) != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove方法\"><a class=\"header-anchor\" href=\"#remove方法\">¶</a>remove方法</h3>\n<p>同样类似于put操作，首先会查找对应的key所在位置，如果为空，则不操作，反之，将之移除：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">removeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key, Object value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">boolean</span> matchValue, <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">    <span class=\"comment\">//判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (p = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; node = <span class=\"keyword\">null</span>, e; K k; V v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">// 第一个Node命中</span></span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = p.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">//如果Table内是树形结构，则使用对应的检索方法</span></span><br><span class=\"line\">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//如果是链表，则做while循环，直到命中或者遍历结束</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key ||</span><br><span class=\"line\">                         (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                             (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果命中到了对应的Node，则根据Node结构进行对应的移除操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class=\"keyword\">this</span>, tab, movable);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == p)</span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            <span class=\"comment\">//修改hash表元素数</span></span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为何线程不安全？\"><a class=\"header-anchor\" href=\"#为何线程不安全？\">¶</a>为何线程不安全？</h2>\n<p>看完了HashMap的实现之后，就该谈一谈它为什么存在线程安全问题！</p>\n<h3 id=\"数据丢失\"><a class=\"header-anchor\" href=\"#数据丢失\">¶</a>数据丢失</h3>\n<p>首先，我们将目光放在put方法的实现中，假设有两个线程在同时进行put操作，对应的数据分别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread-1： put(1, &apos;abc&apos;);</span><br><span class=\"line\">thread-2： put(1, &apos;efg&apos;);</span><br></pre></td></tr></table></figure>\n<p>假设此时Hash表的长度为10，且已经有两个元素在，负载因子为默认值0.75f，那么操作过程一定不会扩容，并且两个线程put的key都是1，那么它们将会分配到同一个table中，下方代码为put方法中的其中一段，其主要作用是遍历当前表内Node，寻找与当前key一样的Node结点，之后再做添加/更新操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>); <span class=\"comment\">// A</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</span><br><span class=\"line\">           treeifyBin(tab, hash);</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   p = e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设两个线程同时执行到了<code>A</code>这个位置，此时获取到的<code>p</code>是统一个对象，下一刻，cpu运转，两个线程同时运行，那么<code>p.next</code>的值将会是最后一个线程put的value值，而前一个则会丢失，这就会导致丢数据的情况！</p>\n<p>当然该情景同样会发生于<code>resize</code>和<code>remove</code>操作，至于为什么，大家可以思考一下！</p>\n<h3 id=\"size不准确\"><a class=\"header-anchor\" href=\"#size不准确\">¶</a>size不准确</h3>\n<p>这个就很简单了，为什么不准确呢，来看一下size变量在HashMap内部的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transient int size;</span><br></pre></td></tr></table></figure>\n<p>内存不可见并且增减操作未加锁，多线程操作下属于非原子操作！</p>\n<h3 id=\"闭环死锁\"><a class=\"header-anchor\" href=\"#闭环死锁\">¶</a>闭环死锁</h3>\n<p>这个问题在JDK1.8版本的HashMap中已经不存在了，至于为啥，我要先讲一下在1.8之前的HashMap为什么会存在闭环死锁问题！</p>\n<p>从<code>闭环</code>这个名词上我们分析一下是什么问题，什么是闭环的，如果链表形成了一个环会不会就是闭环呢？而链表如何才会形成环？带着这些问题，我们在脑海中抽象出一个模型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A--&gt;B</span><br><span class=\"line\">B--&gt;A</span><br></pre></td></tr></table></figure>\n<p>假设某一个Table中的Node链表发生了上述问题，那么我们在遍历时进行<code>do{ }while ((e = e.next) != null);</code>操作就会发生死锁的问题，那么看来我们的猜想方向是正确的，那么我们就具体分析一下HashMap在什么操作之中会产生闭环的问题，不过在此之前，我们要明白因果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因：???</span><br><span class=\"line\">果：闭环</span><br></pre></td></tr></table></figure>\n<p>我们知道，只有当两个结点内部的<code>next</code>相互引用对方的时候才会死锁，这种场景只能在两个已经存在同一个链上的结点同时以<code>相反的方向</code>被操作<code>next</code>引用的时候才会发生，而在HashMap内部，符合这种场景的只有一个方法：<code>resize</code>，那我们就来看一下JDK1.7的<code>resize</code>方法实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    Entry[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> oldAltHashing = useAltHashing;</span><br><span class=\"line\">    useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;</span><br><span class=\"line\">            (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> rehash = oldAltHashing ^ useAltHashing;</span><br><span class=\"line\">    <span class=\"comment\">//fu</span></span><br><span class=\"line\">    transfer(newTable, rehash);</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    threshold = (<span class=\"keyword\">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入<code>transfer</code>方法中，其内部实现了扩容过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry[] newTable, <span class=\"keyword\">boolean</span> rehash)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = newTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e : table) &#123; <span class=\"comment\">// A</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">null</span> != e) &#123;</span><br><span class=\"line\">            Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rehash) &#123;</span><br><span class=\"line\">                e.hash = <span class=\"keyword\">null</span> == e.key ? <span class=\"number\">0</span> : hash(e.key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class=\"line\">            e.next = newTable[i];</span><br><span class=\"line\">            newTable[i] = e;</span><br><span class=\"line\">            e = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现，在JDK1.7的HashMap的扩容实现中，老的Table中的Node链的顺序赋值给新的Table中时的操作是反置的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.next = newTable[i];</span><br><span class=\"line\">newTable[i] = e;</span><br><span class=\"line\">e = next;</span><br></pre></td></tr></table></figure>\n<p>上述操作是将当前Node的next指针指向当前Table的头结点，之后当前Node又变为了Table的头结点，此时假设A、B两个线程同时执行到了<code>transfer</code>方法中的<code>A</code>位置，并且此时的<code>oldTable</code>和<code>newTable</code>的结构是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; b -&gt; c -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>如果很巧，两个线程在同一个CPU上执行，那么就会存在一个抢占时间片的场景，假设A先抢到了时间片，然后执行一番操作之后，<code>oldTable</code>和<code>newTable</code>的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: c -&gt; b -&gt; a</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>之后还没等它做<code>oldTable = newTable</code>操作，B抢到了时间片，并也做了同样一番操作，<code>oldTable</code>和<code>newTable</code>的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: a -&gt; c -&gt; b -&gt; a</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>此时A或者B谁先<code>oldTable = newTable</code>已经无所谓了，因为<code>newTable</code>中已经产生了闭环，之后在进行get或者put操作时，如果不小心触发到了while循环，那将会一直死循环：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);  <span class=\"comment\">//e = e.next将会永不为空</span></span><br></pre></td></tr></table></figure>\n<p>从上述场景产生的过程中我们发现，<code>a -&gt; c -&gt; b -&gt; a</code>这种闭环问题的罪魁祸首是因为1.7中的HashMap在扩容时为了免去再次遍历链表，很聪明的将当前结点作为新链表的头结点，这就会导致顺序反转，所以无序化导致了闭环的产生，而这种问题不仅仅是在HashMap中体现，Mysql的死锁问题的原因常常也是因为反序加行锁导致的！</p>\n<p>而在开头说过，JDK1.8已经避免了这个问题，这是为什么呢？看下代码就知道了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">   Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   Node&lt;K,V&gt; next;</span><br><span class=\"line\">   <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       next = e.next;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               loHead = e;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               loTail.next = e;</span><br><span class=\"line\">           loTail = e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               hiHead = e;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               hiTail.next = e;</span><br><span class=\"line\">           hiTail = e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       newTab[j] = loHead;  <span class=\"comment\">//A</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       newTab[j + oldCap] = hiHead; <span class=\"comment\">//B</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样是扩容的操作，JDK1.8中的HashMap通过两个链分别去存储头结点和尾结点以保证它有序，并且不会频繁的去赋值<code>newTable</code>，而是在循环之后直接赋值（请注意A、B标记处），这样就非常简单的避免了产生闭环的陷阱！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引导\"><a class=\"header-anchor\" href=\"#引导\">¶</a>引导</h2>\n<p>在了解<code>HashMap</code>之前，我们应该先明白两个概念：<code>Hash</code>和<code>Map</code>，这可以帮助我们更容易了解<code>HashMap</code>的运行原理。</p>\n<p>那么何为<code>Hash</code>，又何为<code>Map</code>呢？</p>\n<h3 id=\"hash\"><a class=\"header-anchor\" href=\"#hash\">¶</a>Hash</h3>\n<p>之前写过一篇关于Hash的文章 <a href=\"/zh-cn/java/data-structure/hash.md\">Hash</a></p>\n<h3 id=\"map\"><a class=\"header-anchor\" href=\"#map\">¶</a>Map</h3>\n<p>Map是一种<code>K-V</code>形式的数据结构，一个唯一的key，会唯一对应一个value。也就是说，在Map容器里不允许两个一模一样的key。</p>\n<p>一个简单的Map结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;key1&quot;:&quot;value1&quot;,</span><br><span class=\"line\">  &quot;key2&quot;:&quot;value2&quot;,</span><br><span class=\"line\">  &quot;key3&quot;:&quot;value3&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这种数据结构，并且Map会对外提供一些方法来实现对内部数据的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V put(K key, V value)</span><br><span class=\"line\">V get(Object key)</span><br><span class=\"line\">V remove(Object key)</span><br><span class=\"line\">boolean containsKey(Object key)</span><br></pre></td></tr></table></figure>\n<p>可见Map对于我们操作<code>K-V</code>形式的数据非常方便，实现的方式有很多，最简单粗暴的实现方式是使用<code>List</code>来存储每一个<code>K-V</code>组对，对于每种方法的实现只需要暴力循环碰撞即可，对于少量数据这种做法未必不可，如果数据量庞大之千万，我们就要换一种更加高效，速度更快的实现方式：<code>HashMap</code>。</p>\n<h2 id=\"hashmap\"><a class=\"header-anchor\" href=\"#hashmap\">¶</a>HashMap</h2>\n<p>Map在Java中的实现有很多，<code>HashMap</code>便是其中之一，在<code>JDK</code>漫长的版本更新中，<code>HashMap</code>的实现也是在不断的更新着：</p>\n<ul>\n<li><strong>&lt;=JDK1.7</strong>：Table数组 + Entry链表</li>\n<li><strong>&gt;=JDK1.8</strong>：Table数组 + Entry链表/红黑树</li>\n</ul>\n<p>本文我们跳过JDK1.7的实现，来看一下1.8中<code>HashMap</code>源码所带来的魅力冲击！</p>\n<h3 id=\"实现原理\"><a class=\"header-anchor\" href=\"#实现原理\">¶</a>实现原理</h3>\n<p>对于各个版本的<code>HashMap</code>实现原理，主线流程都是一成不变的：</p>\n<p><img src=\"https://github.com/ainilili/snail/blob/master/docs/images/hashmap-1.8-1-1.jpg?raw=true\" alt=\"hashmap原理流程图\"></p>\n<p>这里有两个数据结构需要我们知道：</p>\n<ul>\n<li><strong>Table</strong>：哈希表，存放Node元素。</li>\n<li><strong>Node</strong>：结点元素，存放<code>K-V</code>组对信息，其结构是一个链表/红黑树。</li>\n</ul>\n<p>另外，在HashMap内部有一些关键属性我们也要了解一下：</p>\n<ul>\n<li><strong>DEFAULT_INITIAL_CAPACITY</strong>：Table数组初始长度，默认为<code>1 &lt;&lt; 4</code>，<code>2^4</code> = 16。</li>\n<li><strong>MAXIMUM_CAPACITY</strong>：Table数组最高长度，默认为<code>1 &lt;&lt; 30</code>，<code>2^30</code> = 1073741824。</li>\n<li><strong>DEFAULT_LOAD_FACTOR</strong>：负载因子，当总元素数 &gt; 数组长度 * 负载因子时，Table数组将会扩容，默认为0.75。</li>\n<li><strong>TREEIFY_THRESHOLD</strong>：树化阈值，当单个Table内Node数量超过该值，则会将链表转化为红黑树，默认为8。</li>\n<li><strong>UNTREEIFY_THRESHOLD</strong>：链化阈值，当扩容期间单个Table内Entry数量小于该值，则将红黑树转化为链表，默认为6。</li>\n<li><strong>MIN_TREEIFY_CAPACITY</strong>：最小树化阈值，当Table所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突）。</li>\n<li><strong>size</strong>：Table数组当前所有元素数。</li>\n<li><strong>threshold</strong>：下次扩容的阈值（数组长度 * 负载因子）</li>\n</ul>\n<p>HashMap的内部有着一个Table数组，而这个数组的初始长度为<code>DEFAULT_INITIAL_CAPACITY</code>参数值，Table数组存放的元素类型就是Node，它是一个单向链表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">//key的hash值</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> K key;  <span class=\"comment\">//key</span></span><br><span class=\"line\">  V value;  <span class=\"comment\">//value</span></span><br><span class=\"line\">  Node&lt;K,V&gt; next; <span class=\"comment\">//下一个结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个Table中存的Node元素相当于链表的<code>header</code>，<code>next</code>指向下一个结点，而这种链式结构的存在正是为了解决<code>hash冲突</code>：</p>\n<blockquote>\n<p><strong>hash冲突</strong>：两个元素的经过Hash散列之后分在同一个组内，我们将之解释为Hash冲突</p>\n</blockquote>\n<p>在JDK1.7之前的版本，hash冲突的解决方法是将被冲突的Node结点放于一个链表中，而Table中的元素则是链头，当然在JDK1.8中，当Table中链长超过<code>TREEIFY_THRESHOLD</code>阈值后，将会将链表转变为红黑树的实现<code>TreeNode</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">  TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class=\"line\">  boolean red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当发生hash冲突的Node不断变多，那么这个链将会越来越长，那么遍历碰撞key时的耗时就会不断增加，这也就直接导致了性能的不足，从JDK1.8开始，HashMap对于单个Table中的Node超出某个阈值时，将会开始树化操作（链表转化为红黑树），这对于搜索的性能将会有很大的提升，而插入和删除的操作所带来的性能影响微乎其微。</p>\n<h3 id=\"put方法\"><a class=\"header-anchor\" href=\"#put方法\">¶</a>put方法</h3>\n<p>在<code>HashMap</code>的内部会有一个Table数组，这个数组的当前长度就是我们要实现映射的目标范围，当我们执行<code>put</code>方法时，<code>key</code>和<code>value</code>要经历这些事情：</p>\n<ul>\n<li>通过<code>Hash</code>散列获取到对应的Table</li>\n<li>遍历Table下的Node结点，做更新/添加操作</li>\n<li>扩容检测</li>\n</ul>\n<p>具体实现我们可以根据源码来详细了解一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// HashMap的懒加载策略，当执行put操作时检测Table数组初始化。</span></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//通过``Hash``函数获取到对应的Table，如果当前Table为空，则直接初始化一个新的Node并放入该Table中。</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">//输入的key命中了当前Table的首元素，直接更新。</span></span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            <span class=\"comment\">//如果当前Node类型为TreeNode，调用``putTreeVal``方法。</span></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是TreeNode，则就是链表，遍历并与输入key做命中碰撞。</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前Table中不存在当前key，则添加。</span></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        <span class=\"comment\">//超过了``TREEIFY_THRESHOLD``则转化为红黑树。</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"comment\">//做命中碰撞，使用hash、内存和equals同时判断（不同的元素hash可能会一致）。</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果命中不为空，更新操作。</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        <span class=\"comment\">//扩容检测。</span></span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于其过程中的关于Node链表和红黑树的转换过程我们可以暂时屏蔽掉，那么整个流程并不是很绕，那么我们继续深入的来看一下HashMap的扩容实现。</p>\n<h3 id=\"resize方法\"><a class=\"header-anchor\" href=\"#resize方法\">¶</a>resize方法</h3>\n<p>HashMap的扩容大致的实现是将老Table数组中所有的Entry取出来，重新对其hashcode做<code>Hash</code>散列到新的新的Table之中，也就是一个<code>re-put</code>的过程，具体还是通过源码来讲解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//保留老的hash表</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果之前的容量大于0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果超出最大容量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//扩容阈值为int最大值</span></span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//否则计算扩容后的阈值</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前的容量等于0，并且之前的阈值大于零，则新的hash表长度就等于它</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;              </span><br><span class=\"line\">        <span class=\"comment\">// 初始阈值为零表示使用默认值</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新的阈值为 0 ，就得用 新容量*加载因子 重计算一次</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"comment\">//常见扩容后的hash表</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab; <span class=\"comment\">//A</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历旧的hash表，将之内部元素转移到新的hash表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前Table内只有一个元素，重新做hash散列并赋值</span></span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e; <span class=\"comment\">//B</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    <span class=\"comment\">//如果旧哈希表中这个位置的桶是树形结构，就要把新哈希表里当前桶也变成树形结构</span></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//保留旧哈希表桶中链表的顺序</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;  <span class=\"comment\">//遍历当前Table内的Node，赋值给新的Table</span></span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a class=\"header-anchor\" href=\"#get方法\">¶</a>get方法</h3>\n<p>在我们看完HashMap对于put方法的实现之后，get方法则显得简单易懂，其代码与put相近无几，主要差别是没有了扩容和添加/更新的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">//判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">// 检测第一个Node，命中则不需要在做do...while...循环</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">//如果Table内是树形结构，则使用对应的检索方法</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//如果是链表，则做while循环，直到命中或者遍历结束</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"containskey方法\"><a class=\"header-anchor\" href=\"#containskey方法\">¶</a>containsKey方法</h3>\n<p>根据get方法的结果是否为空就可以直到是否包含该key：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean containsKey(Object key) &#123;</span><br><span class=\"line\">    return getNode(hash(key), key) != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove方法\"><a class=\"header-anchor\" href=\"#remove方法\">¶</a>remove方法</h3>\n<p>同样类似于put操作，首先会查找对应的key所在位置，如果为空，则不操作，反之，将之移除：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">removeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key, Object value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">boolean</span> matchValue, <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">    <span class=\"comment\">//判断hash表是否为空，表重读是否大于零并且当前key对应分布的表内是否有Node存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (p = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; node = <span class=\"keyword\">null</span>, e; K k; V v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"comment\">// 第一个Node命中</span></span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = p.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">//如果Table内是树形结构，则使用对应的检索方法</span></span><br><span class=\"line\">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//如果是链表，则做while循环，直到命中或者遍历结束</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key ||</span><br><span class=\"line\">                         (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                             (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果命中到了对应的Node，则根据Node结构进行对应的移除操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class=\"keyword\">this</span>, tab, movable);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == p)</span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            <span class=\"comment\">//修改hash表元素数</span></span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为何线程不安全？\"><a class=\"header-anchor\" href=\"#为何线程不安全？\">¶</a>为何线程不安全？</h2>\n<p>看完了HashMap的实现之后，就该谈一谈它为什么存在线程安全问题！</p>\n<h3 id=\"数据丢失\"><a class=\"header-anchor\" href=\"#数据丢失\">¶</a>数据丢失</h3>\n<p>首先，我们将目光放在put方法的实现中，假设有两个线程在同时进行put操作，对应的数据分别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread-1： put(1, &apos;abc&apos;);</span><br><span class=\"line\">thread-2： put(1, &apos;efg&apos;);</span><br></pre></td></tr></table></figure>\n<p>假设此时Hash表的长度为10，且已经有两个元素在，负载因子为默认值0.75f，那么操作过程一定不会扩容，并且两个线程put的key都是1，那么它们将会分配到同一个table中，下方代码为put方法中的其中一段，其主要作用是遍历当前表内Node，寻找与当前key一样的Node结点，之后再做添加/更新操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>); <span class=\"comment\">// A</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</span><br><span class=\"line\">           treeifyBin(tab, hash);</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">       ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   p = e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设两个线程同时执行到了<code>A</code>这个位置，此时获取到的<code>p</code>是统一个对象，下一刻，cpu运转，两个线程同时运行，那么<code>p.next</code>的值将会是最后一个线程put的value值，而前一个则会丢失，这就会导致丢数据的情况！</p>\n<p>当然该情景同样会发生于<code>resize</code>和<code>remove</code>操作，至于为什么，大家可以思考一下！</p>\n<h3 id=\"size不准确\"><a class=\"header-anchor\" href=\"#size不准确\">¶</a>size不准确</h3>\n<p>这个就很简单了，为什么不准确呢，来看一下size变量在HashMap内部的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transient int size;</span><br></pre></td></tr></table></figure>\n<p>内存不可见并且增减操作未加锁，多线程操作下属于非原子操作！</p>\n<h3 id=\"闭环死锁\"><a class=\"header-anchor\" href=\"#闭环死锁\">¶</a>闭环死锁</h3>\n<p>这个问题在JDK1.8版本的HashMap中已经不存在了，至于为啥，我要先讲一下在1.8之前的HashMap为什么会存在闭环死锁问题！</p>\n<p>从<code>闭环</code>这个名词上我们分析一下是什么问题，什么是闭环的，如果链表形成了一个环会不会就是闭环呢？而链表如何才会形成环？带着这些问题，我们在脑海中抽象出一个模型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A--&gt;B</span><br><span class=\"line\">B--&gt;A</span><br></pre></td></tr></table></figure>\n<p>假设某一个Table中的Node链表发生了上述问题，那么我们在遍历时进行<code>do{ }while ((e = e.next) != null);</code>操作就会发生死锁的问题，那么看来我们的猜想方向是正确的，那么我们就具体分析一下HashMap在什么操作之中会产生闭环的问题，不过在此之前，我们要明白因果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因：???</span><br><span class=\"line\">果：闭环</span><br></pre></td></tr></table></figure>\n<p>我们知道，只有当两个结点内部的<code>next</code>相互引用对方的时候才会死锁，这种场景只能在两个已经存在同一个链上的结点同时以<code>相反的方向</code>被操作<code>next</code>引用的时候才会发生，而在HashMap内部，符合这种场景的只有一个方法：<code>resize</code>，那我们就来看一下JDK1.7的<code>resize</code>方法实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    Entry[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> oldAltHashing = useAltHashing;</span><br><span class=\"line\">    useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;</span><br><span class=\"line\">            (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> rehash = oldAltHashing ^ useAltHashing;</span><br><span class=\"line\">    <span class=\"comment\">//fu</span></span><br><span class=\"line\">    transfer(newTable, rehash);</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    threshold = (<span class=\"keyword\">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入<code>transfer</code>方法中，其内部实现了扩容过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry[] newTable, <span class=\"keyword\">boolean</span> rehash)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = newTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e : table) &#123; <span class=\"comment\">// A</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">null</span> != e) &#123;</span><br><span class=\"line\">            Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rehash) &#123;</span><br><span class=\"line\">                e.hash = <span class=\"keyword\">null</span> == e.key ? <span class=\"number\">0</span> : hash(e.key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class=\"line\">            e.next = newTable[i];</span><br><span class=\"line\">            newTable[i] = e;</span><br><span class=\"line\">            e = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现，在JDK1.7的HashMap的扩容实现中，老的Table中的Node链的顺序赋值给新的Table中时的操作是反置的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.next = newTable[i];</span><br><span class=\"line\">newTable[i] = e;</span><br><span class=\"line\">e = next;</span><br></pre></td></tr></table></figure>\n<p>上述操作是将当前Node的next指针指向当前Table的头结点，之后当前Node又变为了Table的头结点，此时假设A、B两个线程同时执行到了<code>transfer</code>方法中的<code>A</code>位置，并且此时的<code>oldTable</code>和<code>newTable</code>的结构是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; b -&gt; c -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>如果很巧，两个线程在同一个CPU上执行，那么就会存在一个抢占时间片的场景，假设A先抢到了时间片，然后执行一番操作之后，<code>oldTable</code>和<code>newTable</code>的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: c -&gt; b -&gt; a</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>之后还没等它做<code>oldTable = newTable</code>操作，B抢到了时间片，并也做了同样一番操作，<code>oldTable</code>和<code>newTable</code>的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldTable[]</span><br><span class=\"line\">table-1: a -&gt; null</span><br><span class=\"line\">table-2: null</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\"></span><br><span class=\"line\">newTable[]</span><br><span class=\"line\">table-1: null</span><br><span class=\"line\">table-2: a -&gt; c -&gt; b -&gt; a</span><br><span class=\"line\">table-3: null</span><br><span class=\"line\">table-4: null</span><br><span class=\"line\">table-5: null</span><br><span class=\"line\">table-6: null</span><br></pre></td></tr></table></figure>\n<p>此时A或者B谁先<code>oldTable = newTable</code>已经无所谓了，因为<code>newTable</code>中已经产生了闭环，之后在进行get或者put操作时，如果不小心触发到了while循环，那将会一直死循环：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);  <span class=\"comment\">//e = e.next将会永不为空</span></span><br></pre></td></tr></table></figure>\n<p>从上述场景产生的过程中我们发现，<code>a -&gt; c -&gt; b -&gt; a</code>这种闭环问题的罪魁祸首是因为1.7中的HashMap在扩容时为了免去再次遍历链表，很聪明的将当前结点作为新链表的头结点，这就会导致顺序反转，所以无序化导致了闭环的产生，而这种问题不仅仅是在HashMap中体现，Mysql的死锁问题的原因常常也是因为反序加行锁导致的！</p>\n<p>而在开头说过，JDK1.8已经避免了这个问题，这是为什么呢？看下代码就知道了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">   Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   Node&lt;K,V&gt; next;</span><br><span class=\"line\">   <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       next = e.next;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               loHead = e;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               loTail.next = e;</span><br><span class=\"line\">           loTail = e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               hiHead = e;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               hiTail.next = e;</span><br><span class=\"line\">           hiTail = e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       newTab[j] = loHead;  <span class=\"comment\">//A</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       newTab[j + oldCap] = hiHead; <span class=\"comment\">//B</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样是扩容的操作，JDK1.8中的HashMap通过两个链分别去存储头结点和尾结点以保证它有序，并且不会频繁的去赋值<code>newTable</code>，而是在循环之后直接赋值（请注意A、B标记处），这样就非常简单的避免了产生闭环的陷阱！</p>\n"},{"title":"如何设计并实现一个db连接池？","author":"Nico","date":"2019-05-26T05:42:00.000Z","_content":"## 连接池的使命！\n无论是线程池还是db连接池，他们都有一个共同的特性：**资源复用**，在普通的场景中，我们使用一个连接，它的生命周期可能是这样的：\n![](https://user-gold-cdn.xitu.io/2019/5/24/16ae8d822d4ac11e?w=637&h=168&f=png&s=4758)\n一个连接，从创建完毕到销毁，期间只被使用了一次（这里的一次是指在单个作用域内的使用），当周期结束，另外一个调用者仍然需要这个连接去做事，就要重复去经历这种生命周期。因为创建和销毁都是需要对应的服务消耗时间以及系统资源去处理的，这样不仅浪费了大量的系统资源，而且导致业务响应过程中都要花费部分时间去重复的创建和销毁，得不偿失，而连接池便被赋予了解决这种问题的使命！\n## 连接池需要做什么？\n顾名思义，连接池中的**池**字已经很生动形象的阐明了它的用意，它用将所有连接放入一个``\"池子\"``中统一的去控制连接的创建和销毁，和原始生命周期去对比，连接池多了以下特性：\n - 创建并不是真的创建，而是从池子中选出空闲连接。\n - 销毁并不是真的销毁，而是将使用中的连接放回池中（逻辑关闭）。\n - 真正的创建和销毁由线程池的特性机制来决定。\n\n因此，当使用连接池后，我们使用一个连接的生命周期将会演变成这样：\n![](https://user-gold-cdn.xitu.io/2019/5/24/16ae8fb43b0a3d13?w=588&h=377&f=png&s=13088)\n## 分析计划\n通灵之术 - 传送门：[https://github.com/ainilili/honeycomb](https://github.com/ainilili/honeycomb)，DEMO为Java语言实现！\n\n事前，我们需要点支烟分析一下时间一个连接池需要做哪些事情：\n - 保存连接的容器是必不可少的，另外，该容器也要支持连接的添加和移除功能，并保证线程安全。\n - 我们需要因为要对连接的销毁做逻辑调整，我们需要重写它的``close``以及``isClosed``方法。\n - 我们需要有个入口对连接池做管理，例如回收空闲连接。\n\n连接池不仅仅只是对``Connection``生命周期的控制，还应该加入一些特色，例如初始连接数，最大连接数，最小连接数、最大空闲时长以及获取连接的等待时长，这些我们也简单支持一下。\n\n目标以明确，开始动工。\n### 连接池容器选型\n要保证线程安全，我们可以将目标瞄准在``JUC``包下的神通们，设我们想要的容器为``x``，那么``x``不仅需要满足基本的增删改查功能，而且也要提供获取超时功能，这是为了保证当池内长时间没有空闲连接时不会导致业务阻塞，即刻熔断。另外，``x``需要满足双向操作，这是为了连接池可以识别出饱和的空闲连接，方便回收操作。\n\n综上所述，``LinkedBlockingDeque``是最合适的选择，它使用``InterruptibleReentrantLock``来保证线程安全，使用``Condition``来做获取元素的阻塞，另外支持双向操作。\n\n另外，我们可以将连接池拆分为3个类型：\n - **工作池**：存放正在被使用的连接。\n - **空闲池**：存放空闲连接。\n - **回收池**：已经被回收（物理关闭）的连接。\n\n其中，**工作池**和**回收池**大可不必用双向对列，或许用单向队列或者``Set``都可以代替之：\n```java\nprivate LinkedBlockingQueue<HoneycombConnection> workQueue;\nprivate LinkedBlockingDeque<HoneycombConnection> idleQueue;\nprivate LinkedBlockingQueue<HoneycombConnection> freezeQueue;\n```\n### Connection的装饰\n连接池的输出是``Connection``，它代表着一个db连接，上游服务使用它做完操作后，会直接调用它的``close``方法来释放连接，而我们必须做的是在调用者无感知的情况下改变它的关闭逻辑，当调用``close``的方法时，我们将它放回空闲队列中，保证其的可复用性！\n\n因此，我们需要对原来的``Connection``做装饰，其做法很简单，但是很累，这里新建一个类来实现``Connection``接口，通过重写所有的方法来实现一个**\"可编辑\"**的``Connection``，我们称之为``Connection``的装饰者：\n```java\npublic class HoneycombConnectionDecorator implements Connection{\n\n    protected Connection connection;\n    \n    protected HoneycombConnectionDecorator(Connection connection) {\n        this.connection = connection;\n    }\n    \n    此处省略对方法实现的三百行代码...\n}\n```\n之后，我们需要新建一个自己的``Connection``来继承这个装饰者，并重写相应的方法：\n```java\npublic class HoneycombConnection extends HoneycombConnectionDecorator implements HoneycombConnectionSwitcher{\n    @Override\n    public void close() { do some things }\n\n    @Override\n    public boolean isClosed() throws SQLException { do some things }    \n    \n    省略...\n}\n```\n### DataSource的重写\n``DataSource``是JDK为了更好的统合和管理数据源而定义出的一个规范，获取连接的入口，方便我们在这一层更好的扩展数据源（例如增加特殊属性），使我们的连接池的功能更加丰富，我们需要实现一个自己的``DataSource``能：\n```java\npublic class HoneycombWrapperDatasource implements DataSource{\n    protected HoneycombDatasourceConfig config;\n    省略其它方法的实现...\n    @Override\n    public Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());\n    }\n\n    @Override\n    public Connection getConnection(String username, String password) throws SQLException {\n        return DriverManager.getConnection(config.getUrl(), username, password);\n    }\n    省略其它方法的实现...\n}\n```\n我们完成了对数据源的实现，但是这里获取连接的方式是物理创建，我们需要满足池化的目的，需要重写``HoneycombWrapperDatasource``中的连接获取逻辑，做法是创建一个新的类对父类方法重写：\n```java\npublic class HoneycombDataSource extends HoneycombWrapperDatasource{\n    private HoneycombConnectionPool pool;\n    @Override\n    public Connection getConnection() throws SQLException {\n        这里实现从pool中取出连接的逻辑\n    }\n    省略...\n}\n```\n### 特性扩展\n在当前结构体系下，我们的连接池逐渐浮现出了雏形，但远远不够的是，我们需要在此结构下可以做自由的扩展，使连接池对连接的控制更加灵活，因此我们可以引入**特性**这个概念，它允许我们在其内部访问连接池，并对连接池做一系列的扩展操作：\n```java\npublic abstract class AbstractFeature{\n    public abstract void doing(HoneycombConnectionPool pool);\n}\n```\n``AbstractFeature``抽象父类需要实现``doing``方法，我们可以在方法内部实现对连接池的控制，其中一个典型的例子就是对池中空闲连接左回收：\n```java\npublic class CleanerFeature extends AbstractFeature{\n    @Override\n    public void doing(HoneycombConnectionPool pool) {\n        这里做空闲连接的回收\n    }\n}\n```\n## 落实计划\n经过上述分析，要完成一个连接池，需要这些模块的配合，总体流程如下：\n![](https://user-gold-cdn.xitu.io/2019/5/26/16af28f6f668a3e6?w=754&h=845&f=png&s=66582)\n\n### 第一步：设置数据源属性\n在初始化``DataSource``之前，我们需要将各属性设置进去，这里使用``HoneycombWrapperDatasource``中的``HoneycombDatasourceConfig``来承载各属性：\n```java\npublic class HoneycombDatasourceConfig {\n\n    //db url\n    private String url;\n\n    //db user\n    private String user;\n\n    //db password\n    private String password;\n\n    //driver驱动\n    private String driver;\n\n    //初始化连接数，默认为2\n    private int initialPoolSize = 2;\n\n    //最大连接数，默认为10\n    private int maxPoolSize = 10;\n\n    //最小连接数，默认为2\n    private int minPoolSize = 2;\n    \n    //获取连接时，最大等待时长，默认为60s\n    private long maxWaitTime = 60 * 1000;\n\n    //最大空闲时长，超出要被回收，默认为20s\n    private long maxIdleTime = 20 * 1000;\n    \n    //特性列表\n    private List<AbstractFeature> features;\n    \n    public HoneycombDatasourceConfig() {\n        features = new ArrayList<AbstractFeature>(5);\n    }\n    \n    省略getter、setter....\n```\n### 第二步：初始化连接池\n设置好属性之后，我们需要完成连接池的初始化工作，在``HoneycombDataSource``的``init``方法中实现：\n```java\nprivate void init() throws ClassNotFoundException, SQLException {\n    //阻塞其他线程初始化操作，等待初始化完成\n    if(initialStarted || ! (initialStarted = ! initialStarted)) {\n        if(! initialFinished) {\n            try {\n                INITIAL_LOCK.lock();\n                INITIAL_CONDITION.await();\n            } catch (InterruptedException e) {\n            } finally {\n                INITIAL_LOCK.unlock();\n            }\n        }\n        return;\n    }\n    \n    //config参数校验\n    config.assertSelf();\n    \n    Class.forName(getDriver());\n    \n    //实例化线程池\n    pool = new HoneycombConnectionPool(config);\n    \n    //初始化最小连接\n    Integer index = null;\n    for(int i = 0; i < config.getInitialPoolSize(); i ++) {\n        if((index =  pool.applyIndex()) != null) {\n            pool.putLeisureConnection(createNativeConnection(pool), index);\n        }\n    }\n    \n    //触发特性\n    pool.touchFeatures();\n    \n    //完成初始化并唤醒其他阻塞\n    initialFinished = true;\n    try {\n        INITIAL_LOCK.lock();\n        INITIAL_CONDITION.signalAll();\n    }catch(Exception e) {\n    }finally {\n        INITIAL_LOCK.unlock();\n    }\n}\n```\n### 第三步：创建初始连接\n在``init``的方法中，如果``initialPoolSize``大于0，会去创建指定数量的物理连接放入连接池中，创建数量要小于最大连接数``maxPoolSize``：\n```java\npublic HoneycombConnection createNativeConnection(HoneycombConnectionPool pool) throws SQLException {\n    return new HoneycombConnection(super.getConnection(), pool);\n}\n```\n完成初始化后，下一步就是获取连接。\n### 第四步：从空闲池获取\n我们之前将连接池分成了三个，它们分别是**空闲池**、**工作池**和**回收池**。\n\n我们可以通过``HoneycombDataSource``的``getConnection``方法来获取连接，当我们需要获取时，首先考虑的是空闲池是否有空闲连接，这样可以避免创建和激活新的连接：\n```java\n@Override\npublic Connection getConnection() throws SQLException {\n    try {\n    \t//初始化连接池\n        init();\n    } catch (ClassNotFoundException e) {\n        throw new RuntimeException(e);\n    }\n    \n    HoneycombConnection cn = null;\n    Integer index = null;\n    \n    if(pool.assignable()) {\n    \t//空闲池可分配，从空闲池取出\n        cn = pool.getIdleConnection();\n    }else if(pool.actionable()) {\n    \t//回收池可分配，从回收池取出\n        cn = pool.getFreezeConnection();\n    }else if((index =  pool.applyIndex()) != null) {\n    \t//如果连接数未满，创建新的物理连接\n        cn = pool.putOccupiedConnection(createNativeConnection(pool), index);\n    }\n    \n    if(cn == null) {\n    \t//如果无法获取连接，阻塞等待空闲池连接\n        cn = pool.getIdleConnection();\n    }\n    \n    if(cn.isClosedActive()) {\n    \t//如果物理连接关闭，则获取新的连接\n        cn.setConnection(super.getConnection());\n    }\n    return cn;\n}\n```\n### 第五步：从回收池获取\n如果空闲池不可分配，那么说明连接供不应求，也许之前有些空闲连接已经被回收（物理关闭），那么我们在创建新连接之前，可以到回收池看一下是否存在已回收连接，如果存在直接取出：\n```java\nelse if(pool.actionable()) {\n\t//回收池可分配，从回收池取出\n    cn = pool.getFreezeConnection();\n}\n```\n### 第六步：创建新的连接\n如果回收池也不可分配，此时要判断连接池连接数量是否已经达到最大连接，如果没有达到，创建新的物理连接并直接添加到工作池中：\n```java\nelse if((index =  pool.applyIndex()) != null) {\n\t//如果连接数未满，创建新的物理连接，添加到工作池\n    cn = pool.putOccupiedConnection(createNativeConnection(pool), index);\n}\n```\n### 第七步：等待空闲池的连接\n如果上述三种情况都不满足，那么只能从空闲池等待其他连接的释放：\n```java\nif(cn == null) {\n\t//如果无法获取连接，阻塞等待空闲池连接\n    cn = pool.getIdleConnection();\n}\n```\n具体逻辑封装在``HoneycombConnectionPool``的``getIdleConnection``方法中：\n```java\npublic HoneycombConnection getIdleConnection() {\n    try {\n    \t//获取最大等待时间\n        long waitTime = config.getMaxWaitTime();\n        while(waitTime > 0) {\n            long beginPollNanoTime = System.nanoTime();\n            \n            //设置超时时间，阻塞等待其他连接的释放\n            HoneycombConnection nc = idleQueue.poll(waitTime, TimeUnit.MILLISECONDS);\n            if(nc != null) {\n            \t//状态转换\n                if(nc.isClosed() && nc.switchOccupied() && working(nc)) {\n                    return nc;\n                }\n            }\n            long timeConsuming = (System.nanoTime() - beginPollNanoTime) / (1000 * 1000);\n            \n            //也许在超时时间内获取到了连接，但是状态转换失败，此时刷新超时时间\n            waitTime -= timeConsuming;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }finally {\n    }\n    throw new RuntimeException(\"获取连接超时\");\n}\n```\n### 第八步：激活连接\n最后，判断一下连接是否被物理关闭，如果是，我们需要打开新的连接替换已经被回收的连接：\n```java\nif(cn.isClosedActive()) {\n\t//如果物理连接关闭，则获取新的连接\n    cn.setConnection(super.getConnection());\n}\n```\n### 连接的回收\n如果在某段时间内我们的业务量剧增，那么需要同时工作的连接将会很多，之后过了不久，我们的业务量下降，那么之前已经创建的连接明显饱和，这时就需要我们对其进行回收，我们可以通过``AbstractFeature``入口操作连接池。\n\n对于回收这个操作，我们通过``CleanerFeature``来实现：\n```java\npublic class CleanerFeature extends AbstractFeature{\n\n    private Logger logger = LoggerFactory.getLogger(CleanerFeature.class);\n\n    public CleanerFeature(boolean enable, long interval) {\n       //enable表示是否启用\n       //interval表示扫描间隔\n       super(enable, interval);\n    }\n\n    @Override\n    public void doing(HoneycombConnectionPool pool) {\n        LinkedBlockingDeque<HoneycombConnection> idleQueue = pool.getIdleQueue();\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                while(true) {\n                    try {\n                        //回收扫描间隔\n                    \tThread.sleep(interval);\n                        \n                    \t//回收时，空闲池上锁\n                        synchronized (idleQueue) {\n                            logger.debug(\"Cleaner Model To Start {}\", idleQueue.size());\n                            //回收操作\n                            idleQueue.stream().filter(c -> { return c.idleTime() > pool.getConfig().getMaxIdleTime(); }).forEach(c -> {\n                                try {\n                                    if(! c.isClosedActive() && c.idle()) {\n                                        c.closeActive();\n                                        pool.freeze(c);\n                                    }\n                                } catch (SQLException e) {\n                                    e.printStackTrace();\n                                } \n                            });\n                            logger.debug(\"Cleaner Model To Finished {}\", idleQueue.size());\n                        }\n                    }catch(Throwable e) {\n                        logger.error(\"Cleaner happended error\", e);\n                    }\n                }\n            }\n        };\n        t.setDaemon(true);\n        t.start();\n    }\n}\n```\n这里的操作很简单，对空闲池加锁，扫描所有连接，释放空闲时间超过最大空闲时间设置的连接，其实这里只要知道当前连接的空闲时长就一目了然了，我们在连接放入空闲池时候去刷新他的空闲时间点，那么当前的空闲时长就等于当前时间减去空闲开始时间：\n```powershell\nidleTime = nowTime - idleStartTime\n```\n在切换状态为空闲时刷新空闲开始时间：\n```java\n @Override\npublic boolean switchIdle() {\n    return unsafe.compareAndSwapObject(this, statusOffset, status, ConnectionStatus.IDLE) && flushIdleStartTime();\n}\n```\n## 测试一下\n体验成果的最快途径就是投入使用，这里搞一个单元测试体验一下：\n```java\nstatic ThreadPoolExecutor tpe = new ThreadPoolExecutor(1000, 1000, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n    \n@Test\npublic void testConcurrence() throws SQLException, InterruptedException{\n    long start = System.currentTimeMillis();\n    HoneycombDataSource dataSource = new HoneycombDataSource();\n    dataSource.setUrl(\"jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&transformedBitIsBoolean=true&zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=Asia/Shanghai\");\n    dataSource.setUser(\"root\");\n    dataSource.setPassword(\"root\");\n    dataSource.setDriver(\"com.mysql.cj.jdbc.Driver\");\n    dataSource.setMaxPoolSize(50);\n    dataSource.setInitialPoolSize(10);\n    dataSource.setMinPoolSize(10);\n    dataSource.setMaxWaitTime(60 * 1000);\n    dataSource.setMaxIdleTime(10 * 1000);\n    dataSource.addFeature(new CleanerFeature(true, 5 * 1000));\n    \n    test(dataSource, 10000);\n    System.out.println(System.currentTimeMillis() - start + \" ms\");\n}\n\npublic static void test(DataSource dataSource, int count) throws SQLException, InterruptedException {\n    CountDownLatch cdl = new CountDownLatch(count);\n    for(int i = 0; i < count; i ++) {\n        tpe.execute(() -> {\n            try {\n                HoneycombConnection connection = (HoneycombConnection) dataSource.getConnection();\n                Statement s = connection.createStatement();\n                s.executeQuery(\"select * from test limit 1\");\n                connection.close();\n            }catch(Exception e) {\n            }finally {\n                cdl.countDown();\n            }\n        });\n    }\n    cdl.await();\n    tpe.shutdown();\n}\n```\nPC配置：**Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz 2.30 GHz 4核8G 512SSD**\n\n10000次查询，耗时：\n```powershell\n938 ms\n```\n结束语：再次召唤传送门：[https://github.com/ainilili/honeycomb](https://github.com/ainilili/honeycomb)\n\n\n","source":"_posts/如何设计并实现一个db连接池？.md","raw":"title: 如何设计并实现一个db连接池？\nauthor: Nico\ntags:\n  - 连接池\ncategories: []\ndate: 2019-05-26 13:42:00\n---\n## 连接池的使命！\n无论是线程池还是db连接池，他们都有一个共同的特性：**资源复用**，在普通的场景中，我们使用一个连接，它的生命周期可能是这样的：\n![](https://user-gold-cdn.xitu.io/2019/5/24/16ae8d822d4ac11e?w=637&h=168&f=png&s=4758)\n一个连接，从创建完毕到销毁，期间只被使用了一次（这里的一次是指在单个作用域内的使用），当周期结束，另外一个调用者仍然需要这个连接去做事，就要重复去经历这种生命周期。因为创建和销毁都是需要对应的服务消耗时间以及系统资源去处理的，这样不仅浪费了大量的系统资源，而且导致业务响应过程中都要花费部分时间去重复的创建和销毁，得不偿失，而连接池便被赋予了解决这种问题的使命！\n## 连接池需要做什么？\n顾名思义，连接池中的**池**字已经很生动形象的阐明了它的用意，它用将所有连接放入一个``\"池子\"``中统一的去控制连接的创建和销毁，和原始生命周期去对比，连接池多了以下特性：\n - 创建并不是真的创建，而是从池子中选出空闲连接。\n - 销毁并不是真的销毁，而是将使用中的连接放回池中（逻辑关闭）。\n - 真正的创建和销毁由线程池的特性机制来决定。\n\n因此，当使用连接池后，我们使用一个连接的生命周期将会演变成这样：\n![](https://user-gold-cdn.xitu.io/2019/5/24/16ae8fb43b0a3d13?w=588&h=377&f=png&s=13088)\n## 分析计划\n通灵之术 - 传送门：[https://github.com/ainilili/honeycomb](https://github.com/ainilili/honeycomb)，DEMO为Java语言实现！\n\n事前，我们需要点支烟分析一下时间一个连接池需要做哪些事情：\n - 保存连接的容器是必不可少的，另外，该容器也要支持连接的添加和移除功能，并保证线程安全。\n - 我们需要因为要对连接的销毁做逻辑调整，我们需要重写它的``close``以及``isClosed``方法。\n - 我们需要有个入口对连接池做管理，例如回收空闲连接。\n\n连接池不仅仅只是对``Connection``生命周期的控制，还应该加入一些特色，例如初始连接数，最大连接数，最小连接数、最大空闲时长以及获取连接的等待时长，这些我们也简单支持一下。\n\n目标以明确，开始动工。\n### 连接池容器选型\n要保证线程安全，我们可以将目标瞄准在``JUC``包下的神通们，设我们想要的容器为``x``，那么``x``不仅需要满足基本的增删改查功能，而且也要提供获取超时功能，这是为了保证当池内长时间没有空闲连接时不会导致业务阻塞，即刻熔断。另外，``x``需要满足双向操作，这是为了连接池可以识别出饱和的空闲连接，方便回收操作。\n\n综上所述，``LinkedBlockingDeque``是最合适的选择，它使用``InterruptibleReentrantLock``来保证线程安全，使用``Condition``来做获取元素的阻塞，另外支持双向操作。\n\n另外，我们可以将连接池拆分为3个类型：\n - **工作池**：存放正在被使用的连接。\n - **空闲池**：存放空闲连接。\n - **回收池**：已经被回收（物理关闭）的连接。\n\n其中，**工作池**和**回收池**大可不必用双向对列，或许用单向队列或者``Set``都可以代替之：\n```java\nprivate LinkedBlockingQueue<HoneycombConnection> workQueue;\nprivate LinkedBlockingDeque<HoneycombConnection> idleQueue;\nprivate LinkedBlockingQueue<HoneycombConnection> freezeQueue;\n```\n### Connection的装饰\n连接池的输出是``Connection``，它代表着一个db连接，上游服务使用它做完操作后，会直接调用它的``close``方法来释放连接，而我们必须做的是在调用者无感知的情况下改变它的关闭逻辑，当调用``close``的方法时，我们将它放回空闲队列中，保证其的可复用性！\n\n因此，我们需要对原来的``Connection``做装饰，其做法很简单，但是很累，这里新建一个类来实现``Connection``接口，通过重写所有的方法来实现一个**\"可编辑\"**的``Connection``，我们称之为``Connection``的装饰者：\n```java\npublic class HoneycombConnectionDecorator implements Connection{\n\n    protected Connection connection;\n    \n    protected HoneycombConnectionDecorator(Connection connection) {\n        this.connection = connection;\n    }\n    \n    此处省略对方法实现的三百行代码...\n}\n```\n之后，我们需要新建一个自己的``Connection``来继承这个装饰者，并重写相应的方法：\n```java\npublic class HoneycombConnection extends HoneycombConnectionDecorator implements HoneycombConnectionSwitcher{\n    @Override\n    public void close() { do some things }\n\n    @Override\n    public boolean isClosed() throws SQLException { do some things }    \n    \n    省略...\n}\n```\n### DataSource的重写\n``DataSource``是JDK为了更好的统合和管理数据源而定义出的一个规范，获取连接的入口，方便我们在这一层更好的扩展数据源（例如增加特殊属性），使我们的连接池的功能更加丰富，我们需要实现一个自己的``DataSource``能：\n```java\npublic class HoneycombWrapperDatasource implements DataSource{\n    protected HoneycombDatasourceConfig config;\n    省略其它方法的实现...\n    @Override\n    public Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());\n    }\n\n    @Override\n    public Connection getConnection(String username, String password) throws SQLException {\n        return DriverManager.getConnection(config.getUrl(), username, password);\n    }\n    省略其它方法的实现...\n}\n```\n我们完成了对数据源的实现，但是这里获取连接的方式是物理创建，我们需要满足池化的目的，需要重写``HoneycombWrapperDatasource``中的连接获取逻辑，做法是创建一个新的类对父类方法重写：\n```java\npublic class HoneycombDataSource extends HoneycombWrapperDatasource{\n    private HoneycombConnectionPool pool;\n    @Override\n    public Connection getConnection() throws SQLException {\n        这里实现从pool中取出连接的逻辑\n    }\n    省略...\n}\n```\n### 特性扩展\n在当前结构体系下，我们的连接池逐渐浮现出了雏形，但远远不够的是，我们需要在此结构下可以做自由的扩展，使连接池对连接的控制更加灵活，因此我们可以引入**特性**这个概念，它允许我们在其内部访问连接池，并对连接池做一系列的扩展操作：\n```java\npublic abstract class AbstractFeature{\n    public abstract void doing(HoneycombConnectionPool pool);\n}\n```\n``AbstractFeature``抽象父类需要实现``doing``方法，我们可以在方法内部实现对连接池的控制，其中一个典型的例子就是对池中空闲连接左回收：\n```java\npublic class CleanerFeature extends AbstractFeature{\n    @Override\n    public void doing(HoneycombConnectionPool pool) {\n        这里做空闲连接的回收\n    }\n}\n```\n## 落实计划\n经过上述分析，要完成一个连接池，需要这些模块的配合，总体流程如下：\n![](https://user-gold-cdn.xitu.io/2019/5/26/16af28f6f668a3e6?w=754&h=845&f=png&s=66582)\n\n### 第一步：设置数据源属性\n在初始化``DataSource``之前，我们需要将各属性设置进去，这里使用``HoneycombWrapperDatasource``中的``HoneycombDatasourceConfig``来承载各属性：\n```java\npublic class HoneycombDatasourceConfig {\n\n    //db url\n    private String url;\n\n    //db user\n    private String user;\n\n    //db password\n    private String password;\n\n    //driver驱动\n    private String driver;\n\n    //初始化连接数，默认为2\n    private int initialPoolSize = 2;\n\n    //最大连接数，默认为10\n    private int maxPoolSize = 10;\n\n    //最小连接数，默认为2\n    private int minPoolSize = 2;\n    \n    //获取连接时，最大等待时长，默认为60s\n    private long maxWaitTime = 60 * 1000;\n\n    //最大空闲时长，超出要被回收，默认为20s\n    private long maxIdleTime = 20 * 1000;\n    \n    //特性列表\n    private List<AbstractFeature> features;\n    \n    public HoneycombDatasourceConfig() {\n        features = new ArrayList<AbstractFeature>(5);\n    }\n    \n    省略getter、setter....\n```\n### 第二步：初始化连接池\n设置好属性之后，我们需要完成连接池的初始化工作，在``HoneycombDataSource``的``init``方法中实现：\n```java\nprivate void init() throws ClassNotFoundException, SQLException {\n    //阻塞其他线程初始化操作，等待初始化完成\n    if(initialStarted || ! (initialStarted = ! initialStarted)) {\n        if(! initialFinished) {\n            try {\n                INITIAL_LOCK.lock();\n                INITIAL_CONDITION.await();\n            } catch (InterruptedException e) {\n            } finally {\n                INITIAL_LOCK.unlock();\n            }\n        }\n        return;\n    }\n    \n    //config参数校验\n    config.assertSelf();\n    \n    Class.forName(getDriver());\n    \n    //实例化线程池\n    pool = new HoneycombConnectionPool(config);\n    \n    //初始化最小连接\n    Integer index = null;\n    for(int i = 0; i < config.getInitialPoolSize(); i ++) {\n        if((index =  pool.applyIndex()) != null) {\n            pool.putLeisureConnection(createNativeConnection(pool), index);\n        }\n    }\n    \n    //触发特性\n    pool.touchFeatures();\n    \n    //完成初始化并唤醒其他阻塞\n    initialFinished = true;\n    try {\n        INITIAL_LOCK.lock();\n        INITIAL_CONDITION.signalAll();\n    }catch(Exception e) {\n    }finally {\n        INITIAL_LOCK.unlock();\n    }\n}\n```\n### 第三步：创建初始连接\n在``init``的方法中，如果``initialPoolSize``大于0，会去创建指定数量的物理连接放入连接池中，创建数量要小于最大连接数``maxPoolSize``：\n```java\npublic HoneycombConnection createNativeConnection(HoneycombConnectionPool pool) throws SQLException {\n    return new HoneycombConnection(super.getConnection(), pool);\n}\n```\n完成初始化后，下一步就是获取连接。\n### 第四步：从空闲池获取\n我们之前将连接池分成了三个，它们分别是**空闲池**、**工作池**和**回收池**。\n\n我们可以通过``HoneycombDataSource``的``getConnection``方法来获取连接，当我们需要获取时，首先考虑的是空闲池是否有空闲连接，这样可以避免创建和激活新的连接：\n```java\n@Override\npublic Connection getConnection() throws SQLException {\n    try {\n    \t//初始化连接池\n        init();\n    } catch (ClassNotFoundException e) {\n        throw new RuntimeException(e);\n    }\n    \n    HoneycombConnection cn = null;\n    Integer index = null;\n    \n    if(pool.assignable()) {\n    \t//空闲池可分配，从空闲池取出\n        cn = pool.getIdleConnection();\n    }else if(pool.actionable()) {\n    \t//回收池可分配，从回收池取出\n        cn = pool.getFreezeConnection();\n    }else if((index =  pool.applyIndex()) != null) {\n    \t//如果连接数未满，创建新的物理连接\n        cn = pool.putOccupiedConnection(createNativeConnection(pool), index);\n    }\n    \n    if(cn == null) {\n    \t//如果无法获取连接，阻塞等待空闲池连接\n        cn = pool.getIdleConnection();\n    }\n    \n    if(cn.isClosedActive()) {\n    \t//如果物理连接关闭，则获取新的连接\n        cn.setConnection(super.getConnection());\n    }\n    return cn;\n}\n```\n### 第五步：从回收池获取\n如果空闲池不可分配，那么说明连接供不应求，也许之前有些空闲连接已经被回收（物理关闭），那么我们在创建新连接之前，可以到回收池看一下是否存在已回收连接，如果存在直接取出：\n```java\nelse if(pool.actionable()) {\n\t//回收池可分配，从回收池取出\n    cn = pool.getFreezeConnection();\n}\n```\n### 第六步：创建新的连接\n如果回收池也不可分配，此时要判断连接池连接数量是否已经达到最大连接，如果没有达到，创建新的物理连接并直接添加到工作池中：\n```java\nelse if((index =  pool.applyIndex()) != null) {\n\t//如果连接数未满，创建新的物理连接，添加到工作池\n    cn = pool.putOccupiedConnection(createNativeConnection(pool), index);\n}\n```\n### 第七步：等待空闲池的连接\n如果上述三种情况都不满足，那么只能从空闲池等待其他连接的释放：\n```java\nif(cn == null) {\n\t//如果无法获取连接，阻塞等待空闲池连接\n    cn = pool.getIdleConnection();\n}\n```\n具体逻辑封装在``HoneycombConnectionPool``的``getIdleConnection``方法中：\n```java\npublic HoneycombConnection getIdleConnection() {\n    try {\n    \t//获取最大等待时间\n        long waitTime = config.getMaxWaitTime();\n        while(waitTime > 0) {\n            long beginPollNanoTime = System.nanoTime();\n            \n            //设置超时时间，阻塞等待其他连接的释放\n            HoneycombConnection nc = idleQueue.poll(waitTime, TimeUnit.MILLISECONDS);\n            if(nc != null) {\n            \t//状态转换\n                if(nc.isClosed() && nc.switchOccupied() && working(nc)) {\n                    return nc;\n                }\n            }\n            long timeConsuming = (System.nanoTime() - beginPollNanoTime) / (1000 * 1000);\n            \n            //也许在超时时间内获取到了连接，但是状态转换失败，此时刷新超时时间\n            waitTime -= timeConsuming;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }finally {\n    }\n    throw new RuntimeException(\"获取连接超时\");\n}\n```\n### 第八步：激活连接\n最后，判断一下连接是否被物理关闭，如果是，我们需要打开新的连接替换已经被回收的连接：\n```java\nif(cn.isClosedActive()) {\n\t//如果物理连接关闭，则获取新的连接\n    cn.setConnection(super.getConnection());\n}\n```\n### 连接的回收\n如果在某段时间内我们的业务量剧增，那么需要同时工作的连接将会很多，之后过了不久，我们的业务量下降，那么之前已经创建的连接明显饱和，这时就需要我们对其进行回收，我们可以通过``AbstractFeature``入口操作连接池。\n\n对于回收这个操作，我们通过``CleanerFeature``来实现：\n```java\npublic class CleanerFeature extends AbstractFeature{\n\n    private Logger logger = LoggerFactory.getLogger(CleanerFeature.class);\n\n    public CleanerFeature(boolean enable, long interval) {\n       //enable表示是否启用\n       //interval表示扫描间隔\n       super(enable, interval);\n    }\n\n    @Override\n    public void doing(HoneycombConnectionPool pool) {\n        LinkedBlockingDeque<HoneycombConnection> idleQueue = pool.getIdleQueue();\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                while(true) {\n                    try {\n                        //回收扫描间隔\n                    \tThread.sleep(interval);\n                        \n                    \t//回收时，空闲池上锁\n                        synchronized (idleQueue) {\n                            logger.debug(\"Cleaner Model To Start {}\", idleQueue.size());\n                            //回收操作\n                            idleQueue.stream().filter(c -> { return c.idleTime() > pool.getConfig().getMaxIdleTime(); }).forEach(c -> {\n                                try {\n                                    if(! c.isClosedActive() && c.idle()) {\n                                        c.closeActive();\n                                        pool.freeze(c);\n                                    }\n                                } catch (SQLException e) {\n                                    e.printStackTrace();\n                                } \n                            });\n                            logger.debug(\"Cleaner Model To Finished {}\", idleQueue.size());\n                        }\n                    }catch(Throwable e) {\n                        logger.error(\"Cleaner happended error\", e);\n                    }\n                }\n            }\n        };\n        t.setDaemon(true);\n        t.start();\n    }\n}\n```\n这里的操作很简单，对空闲池加锁，扫描所有连接，释放空闲时间超过最大空闲时间设置的连接，其实这里只要知道当前连接的空闲时长就一目了然了，我们在连接放入空闲池时候去刷新他的空闲时间点，那么当前的空闲时长就等于当前时间减去空闲开始时间：\n```powershell\nidleTime = nowTime - idleStartTime\n```\n在切换状态为空闲时刷新空闲开始时间：\n```java\n @Override\npublic boolean switchIdle() {\n    return unsafe.compareAndSwapObject(this, statusOffset, status, ConnectionStatus.IDLE) && flushIdleStartTime();\n}\n```\n## 测试一下\n体验成果的最快途径就是投入使用，这里搞一个单元测试体验一下：\n```java\nstatic ThreadPoolExecutor tpe = new ThreadPoolExecutor(1000, 1000, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n    \n@Test\npublic void testConcurrence() throws SQLException, InterruptedException{\n    long start = System.currentTimeMillis();\n    HoneycombDataSource dataSource = new HoneycombDataSource();\n    dataSource.setUrl(\"jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&transformedBitIsBoolean=true&zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=Asia/Shanghai\");\n    dataSource.setUser(\"root\");\n    dataSource.setPassword(\"root\");\n    dataSource.setDriver(\"com.mysql.cj.jdbc.Driver\");\n    dataSource.setMaxPoolSize(50);\n    dataSource.setInitialPoolSize(10);\n    dataSource.setMinPoolSize(10);\n    dataSource.setMaxWaitTime(60 * 1000);\n    dataSource.setMaxIdleTime(10 * 1000);\n    dataSource.addFeature(new CleanerFeature(true, 5 * 1000));\n    \n    test(dataSource, 10000);\n    System.out.println(System.currentTimeMillis() - start + \" ms\");\n}\n\npublic static void test(DataSource dataSource, int count) throws SQLException, InterruptedException {\n    CountDownLatch cdl = new CountDownLatch(count);\n    for(int i = 0; i < count; i ++) {\n        tpe.execute(() -> {\n            try {\n                HoneycombConnection connection = (HoneycombConnection) dataSource.getConnection();\n                Statement s = connection.createStatement();\n                s.executeQuery(\"select * from test limit 1\");\n                connection.close();\n            }catch(Exception e) {\n            }finally {\n                cdl.countDown();\n            }\n        });\n    }\n    cdl.await();\n    tpe.shutdown();\n}\n```\nPC配置：**Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz 2.30 GHz 4核8G 512SSD**\n\n10000次查询，耗时：\n```powershell\n938 ms\n```\n结束语：再次召唤传送门：[https://github.com/ainilili/honeycomb](https://github.com/ainilili/honeycomb)\n\n\n","slug":"如何设计并实现一个db连接池？","published":1,"updated":"2019-05-26T05:43:55.249Z","_id":"cjw4inqol0000cmtpf445j9lc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"连接池的使命\"><a class=\"header-anchor\" href=\"#连接池的使命\">¶</a>连接池的使命！</h2>\n<p>无论是线程池还是db连接池，他们都有一个共同的特性：<strong>资源复用</strong>，在普通的场景中，我们使用一个连接，它的生命周期可能是这样的：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/24/16ae8d822d4ac11e?w=637&amp;h=168&amp;f=png&amp;s=4758\" alt=\"\"><br>\n一个连接，从创建完毕到销毁，期间只被使用了一次（这里的一次是指在单个作用域内的使用），当周期结束，另外一个调用者仍然需要这个连接去做事，就要重复去经历这种生命周期。因为创建和销毁都是需要对应的服务消耗时间以及系统资源去处理的，这样不仅浪费了大量的系统资源，而且导致业务响应过程中都要花费部分时间去重复的创建和销毁，得不偿失，而连接池便被赋予了解决这种问题的使命！</p>\n<h2 id=\"连接池需要做什么？\"><a class=\"header-anchor\" href=\"#连接池需要做什么？\">¶</a>连接池需要做什么？</h2>\n<p>顾名思义，连接池中的<strong>池</strong>字已经很生动形象的阐明了它的用意，它用将所有连接放入一个<code>&quot;池子&quot;</code>中统一的去控制连接的创建和销毁，和原始生命周期去对比，连接池多了以下特性：</p>\n<ul>\n<li>创建并不是真的创建，而是从池子中选出空闲连接。</li>\n<li>销毁并不是真的销毁，而是将使用中的连接放回池中（逻辑关闭）。</li>\n<li>真正的创建和销毁由线程池的特性机制来决定。</li>\n</ul>\n<p>因此，当使用连接池后，我们使用一个连接的生命周期将会演变成这样：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/24/16ae8fb43b0a3d13?w=588&amp;h=377&amp;f=png&amp;s=13088\" alt=\"\"></p>\n<h2 id=\"分析计划\"><a class=\"header-anchor\" href=\"#分析计划\">¶</a>分析计划</h2>\n<p>通灵之术 - 传送门：<a href=\"https://github.com/ainilili/honeycomb\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/honeycomb</a>，DEMO为Java语言实现！</p>\n<p>事前，我们需要点支烟分析一下时间一个连接池需要做哪些事情：</p>\n<ul>\n<li>保存连接的容器是必不可少的，另外，该容器也要支持连接的添加和移除功能，并保证线程安全。</li>\n<li>我们需要因为要对连接的销毁做逻辑调整，我们需要重写它的<code>close</code>以及<code>isClosed</code>方法。</li>\n<li>我们需要有个入口对连接池做管理，例如回收空闲连接。</li>\n</ul>\n<p>连接池不仅仅只是对<code>Connection</code>生命周期的控制，还应该加入一些特色，例如初始连接数，最大连接数，最小连接数、最大空闲时长以及获取连接的等待时长，这些我们也简单支持一下。</p>\n<p>目标以明确，开始动工。</p>\n<h3 id=\"连接池容器选型\"><a class=\"header-anchor\" href=\"#连接池容器选型\">¶</a>连接池容器选型</h3>\n<p>要保证线程安全，我们可以将目标瞄准在<code>JUC</code>包下的神通们，设我们想要的容器为<code>x</code>，那么<code>x</code>不仅需要满足基本的增删改查功能，而且也要提供获取超时功能，这是为了保证当池内长时间没有空闲连接时不会导致业务阻塞，即刻熔断。另外，<code>x</code>需要满足双向操作，这是为了连接池可以识别出饱和的空闲连接，方便回收操作。</p>\n<p>综上所述，<code>LinkedBlockingDeque</code>是最合适的选择，它使用<code>InterruptibleReentrantLock</code>来保证线程安全，使用<code>Condition</code>来做获取元素的阻塞，另外支持双向操作。</p>\n<p>另外，我们可以将连接池拆分为3个类型：</p>\n<ul>\n<li><strong>工作池</strong>：存放正在被使用的连接。</li>\n<li><strong>空闲池</strong>：存放空闲连接。</li>\n<li><strong>回收池</strong>：已经被回收（物理关闭）的连接。</li>\n</ul>\n<p>其中，<strong>工作池</strong>和<strong>回收池</strong>大可不必用双向对列，或许用单向队列或者<code>Set</code>都可以代替之：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingQueue&lt;HoneycombConnection&gt; workQueue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingDeque&lt;HoneycombConnection&gt; idleQueue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingQueue&lt;HoneycombConnection&gt; freezeQueue;</span><br></pre></td></tr></table></figure>\n<h3 id=\"connection的装饰\"><a class=\"header-anchor\" href=\"#connection的装饰\">¶</a>Connection的装饰</h3>\n<p>连接池的输出是<code>Connection</code>，它代表着一个db连接，上游服务使用它做完操作后，会直接调用它的<code>close</code>方法来释放连接，而我们必须做的是在调用者无感知的情况下改变它的关闭逻辑，当调用<code>close</code>的方法时，我们将它放回空闲队列中，保证其的可复用性！</p>\n<p>因此，我们需要对原来的<code>Connection</code>做装饰，其做法很简单，但是很累，这里新建一个类来实现<code>Connection</code>接口，通过重写所有的方法来实现一个**“可编辑”**的<code>Connection</code>，我们称之为<code>Connection</code>的装饰者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombConnectionDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Connection</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Connection connection;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">HoneycombConnectionDecorator</span><span class=\"params\">(Connection connection)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connection = connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    此处省略对方法实现的三百行代码...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，我们需要新建一个自己的<code>Connection</code>来继承这个装饰者，并重写相应的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">HoneycombConnectionDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">HoneycombConnectionSwitcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">do</span> some things &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isClosed</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123; <span class=\"keyword\">do</span> some things &#125;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    省略...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"datasource的重写\"><a class=\"header-anchor\" href=\"#datasource的重写\">¶</a>DataSource的重写</h3>\n<p><code>DataSource</code>是JDK为了更好的统合和管理数据源而定义出的一个规范，获取连接的入口，方便我们在这一层更好的扩展数据源（例如增加特殊属性），使我们的连接池的功能更加丰富，我们需要实现一个自己的<code>DataSource</code>能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombWrapperDatasource</span> <span class=\"keyword\">implements</span> <span class=\"title\">DataSource</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HoneycombDatasourceConfig config;</span><br><span class=\"line\">    省略其它方法的实现...</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">(String username, String password)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(config.getUrl(), username, password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    省略其它方法的实现...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们完成了对数据源的实现，但是这里获取连接的方式是物理创建，我们需要满足池化的目的，需要重写<code>HoneycombWrapperDatasource</code>中的连接获取逻辑，做法是创建一个新的类对父类方法重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">HoneycombWrapperDatasource</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HoneycombConnectionPool pool;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        这里实现从pool中取出连接的逻辑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    省略...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特性扩展\"><a class=\"header-anchor\" href=\"#特性扩展\">¶</a>特性扩展</h3>\n<p>在当前结构体系下，我们的连接池逐渐浮现出了雏形，但远远不够的是，我们需要在此结构下可以做自由的扩展，使连接池对连接的控制更加灵活，因此我们可以引入<strong>特性</strong>这个概念，它允许我们在其内部访问连接池，并对连接池做一系列的扩展操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>AbstractFeature</code>抽象父类需要实现<code>doing</code>方法，我们可以在方法内部实现对连接池的控制，其中一个典型的例子就是对池中空闲连接左回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanerFeature</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span> </span>&#123;</span><br><span class=\"line\">        这里做空闲连接的回收</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"落实计划\"><a class=\"header-anchor\" href=\"#落实计划\">¶</a>落实计划</h2>\n<p>经过上述分析，要完成一个连接池，需要这些模块的配合，总体流程如下：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/26/16af28f6f668a3e6?w=754&amp;h=845&amp;f=png&amp;s=66582\" alt=\"\"></p>\n<h3 id=\"第一步：设置数据源属性\"><a class=\"header-anchor\" href=\"#第一步：设置数据源属性\">¶</a>第一步：设置数据源属性</h3>\n<p>在初始化<code>DataSource</code>之前，我们需要将各属性设置进去，这里使用<code>HoneycombWrapperDatasource</code>中的<code>HoneycombDatasourceConfig</code>来承载各属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombDatasourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db url</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db user</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db password</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//driver驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化连接数，默认为2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> initialPoolSize = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最大连接数，默认为10</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxPoolSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最小连接数，默认为2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minPoolSize = <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取连接时，最大等待时长，默认为60s</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxWaitTime = <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最大空闲时长，超出要被回收，默认为20s</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxIdleTime = <span class=\"number\">20</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//特性列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;AbstractFeature&gt; features;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HoneycombDatasourceConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        features = <span class=\"keyword\">new</span> ArrayList&lt;AbstractFeature&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    省略getter、setter....</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：初始化连接池\"><a class=\"header-anchor\" href=\"#第二步：初始化连接池\">¶</a>第二步：初始化连接池</h3>\n<p>设置好属性之后，我们需要完成连接池的初始化工作，在<code>HoneycombDataSource</code>的<code>init</code>方法中实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//阻塞其他线程初始化操作，等待初始化完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(initialStarted || ! (initialStarted = ! initialStarted)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(! initialFinished) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                INITIAL_LOCK.lock();</span><br><span class=\"line\">                INITIAL_CONDITION.await();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                INITIAL_LOCK.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//config参数校验</span></span><br><span class=\"line\">    config.assertSelf();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Class.forName(getDriver());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例化线程池</span></span><br><span class=\"line\">    pool = <span class=\"keyword\">new</span> HoneycombConnectionPool(config);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化最小连接</span></span><br><span class=\"line\">    Integer index = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; config.getInitialPoolSize(); i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pool.putLeisureConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//触发特性</span></span><br><span class=\"line\">    pool.touchFeatures();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//完成初始化并唤醒其他阻塞</span></span><br><span class=\"line\">    initialFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        INITIAL_LOCK.lock();</span><br><span class=\"line\">        INITIAL_CONDITION.signalAll();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        INITIAL_LOCK.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：创建初始连接\"><a class=\"header-anchor\" href=\"#第三步：创建初始连接\">¶</a>第三步：创建初始连接</h3>\n<p>在<code>init</code>的方法中，如果<code>initialPoolSize</code>大于0，会去创建指定数量的物理连接放入连接池中，创建数量要小于最大连接数<code>maxPoolSize</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HoneycombConnection <span class=\"title\">createNativeConnection</span><span class=\"params\">(HoneycombConnectionPool pool)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HoneycombConnection(<span class=\"keyword\">super</span>.getConnection(), pool);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成初始化后，下一步就是获取连接。</p>\n<h3 id=\"第四步：从空闲池获取\"><a class=\"header-anchor\" href=\"#第四步：从空闲池获取\">¶</a>第四步：从空闲池获取</h3>\n<p>我们之前将连接池分成了三个，它们分别是<strong>空闲池</strong>、<strong>工作池</strong>和<strong>回收池</strong>。</p>\n<p>我们可以通过<code>HoneycombDataSource</code>的<code>getConnection</code>方法来获取连接，当我们需要获取时，首先考虑的是空闲池是否有空闲连接，这样可以避免创建和激活新的连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//初始化连接池</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    HoneycombConnection cn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Integer index = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pool.assignable()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//空闲池可分配，从空闲池取出</span></span><br><span class=\"line\">        cn = pool.getIdleConnection();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pool.actionable()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//回收池可分配，从回收池取出</span></span><br><span class=\"line\">        cn = pool.getFreezeConnection();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果连接数未满，创建新的物理连接</span></span><br><span class=\"line\">        cn = pool.putOccupiedConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cn == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果无法获取连接，阻塞等待空闲池连接</span></span><br><span class=\"line\">        cn = pool.getIdleConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cn.isClosedActive()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果物理连接关闭，则获取新的连接</span></span><br><span class=\"line\">        cn.setConnection(<span class=\"keyword\">super</span>.getConnection());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步：从回收池获取\"><a class=\"header-anchor\" href=\"#第五步：从回收池获取\">¶</a>第五步：从回收池获取</h3>\n<p>如果空闲池不可分配，那么说明连接供不应求，也许之前有些空闲连接已经被回收（物理关闭），那么我们在创建新连接之前，可以到回收池看一下是否存在已回收连接，如果存在直接取出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pool.actionable()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//回收池可分配，从回收池取出</span></span><br><span class=\"line\">    cn = pool.getFreezeConnection();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第六步：创建新的连接\"><a class=\"header-anchor\" href=\"#第六步：创建新的连接\">¶</a>第六步：创建新的连接</h3>\n<p>如果回收池也不可分配，此时要判断连接池连接数量是否已经达到最大连接，如果没有达到，创建新的物理连接并直接添加到工作池中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果连接数未满，创建新的物理连接，添加到工作池</span></span><br><span class=\"line\">    cn = pool.putOccupiedConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七步：等待空闲池的连接\"><a class=\"header-anchor\" href=\"#第七步：等待空闲池的连接\">¶</a>第七步：等待空闲池的连接</h3>\n<p>如果上述三种情况都不满足，那么只能从空闲池等待其他连接的释放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cn == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果无法获取连接，阻塞等待空闲池连接</span></span><br><span class=\"line\">    cn = pool.getIdleConnection();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体逻辑封装在<code>HoneycombConnectionPool</code>的<code>getIdleConnection</code>方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HoneycombConnection <span class=\"title\">getIdleConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//获取最大等待时间</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> waitTime = config.getMaxWaitTime();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(waitTime &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> beginPollNanoTime = System.nanoTime();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//设置超时时间，阻塞等待其他连接的释放</span></span><br><span class=\"line\">            HoneycombConnection nc = idleQueue.poll(waitTime, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            \t<span class=\"comment\">//状态转换</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nc.isClosed() &amp;&amp; nc.switchOccupied() &amp;&amp; working(nc)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nc;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> timeConsuming = (System.nanoTime() - beginPollNanoTime) / (<span class=\"number\">1000</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//也许在超时时间内获取到了连接，但是状态转换失败，此时刷新超时时间</span></span><br><span class=\"line\">            waitTime -= timeConsuming;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"获取连接超时\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八步：激活连接\"><a class=\"header-anchor\" href=\"#第八步：激活连接\">¶</a>第八步：激活连接</h3>\n<p>最后，判断一下连接是否被物理关闭，如果是，我们需要打开新的连接替换已经被回收的连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cn.isClosedActive()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果物理连接关闭，则获取新的连接</span></span><br><span class=\"line\">    cn.setConnection(<span class=\"keyword\">super</span>.getConnection());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接的回收\"><a class=\"header-anchor\" href=\"#连接的回收\">¶</a>连接的回收</h3>\n<p>如果在某段时间内我们的业务量剧增，那么需要同时工作的连接将会很多，之后过了不久，我们的业务量下降，那么之前已经创建的连接明显饱和，这时就需要我们对其进行回收，我们可以通过<code>AbstractFeature</code>入口操作连接池。</p>\n<p>对于回收这个操作，我们通过<code>CleanerFeature</code>来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanerFeature</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(CleanerFeature.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CleanerFeature</span><span class=\"params\">(<span class=\"keyword\">boolean</span> enable, <span class=\"keyword\">long</span> interval)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//enable表示是否启用</span></span><br><span class=\"line\">       <span class=\"comment\">//interval表示扫描间隔</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(enable, interval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span> </span>&#123;</span><br><span class=\"line\">        LinkedBlockingDeque&lt;HoneycombConnection&gt; idleQueue = pool.getIdleQueue();</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//回收扫描间隔</span></span><br><span class=\"line\">                    \tThread.sleep(interval);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    \t<span class=\"comment\">//回收时，空闲池上锁</span></span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (idleQueue) &#123;</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Cleaner Model To Start &#123;&#125;\"</span>, idleQueue.size());</span><br><span class=\"line\">                            <span class=\"comment\">//回收操作</span></span><br><span class=\"line\">                            idleQueue.stream().filter(c -&gt; &#123; <span class=\"keyword\">return</span> c.idleTime() &gt; pool.getConfig().getMaxIdleTime(); &#125;).forEach(c -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(! c.isClosedActive() &amp;&amp; c.idle()) &#123;</span><br><span class=\"line\">                                        c.closeActive();</span><br><span class=\"line\">                                        pool.freeze(c);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                                    e.printStackTrace();</span><br><span class=\"line\">                                &#125; </span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Cleaner Model To Finished &#123;&#125;\"</span>, idleQueue.size());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span>(Throwable e) &#123;</span><br><span class=\"line\">                        logger.error(<span class=\"string\">\"Cleaner happended error\"</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        t.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的操作很简单，对空闲池加锁，扫描所有连接，释放空闲时间超过最大空闲时间设置的连接，其实这里只要知道当前连接的空闲时长就一目了然了，我们在连接放入空闲池时候去刷新他的空闲时间点，那么当前的空闲时长就等于当前时间减去空闲开始时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idleTime = nowTime - idleStartTime</span><br></pre></td></tr></table></figure>\n<p>在切换状态为空闲时刷新空闲开始时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchIdle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"keyword\">this</span>, statusOffset, status, ConnectionStatus.IDLE) &amp;&amp; flushIdleStartTime();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试一下\"><a class=\"header-anchor\" href=\"#测试一下\">¶</a>测试一下</h2>\n<p>体验成果的最快途径就是投入使用，这里搞一个单元测试体验一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> ThreadPoolExecutor tpe = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">0</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testConcurrence</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException, InterruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    HoneycombDataSource dataSource = <span class=\"keyword\">new</span> HoneycombDataSource();</span><br><span class=\"line\">    dataSource.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;transformedBitIsBoolean=true&amp;zeroDateTimeBehavior=CONVERT_TO_NULL&amp;serverTimezone=Asia/Shanghai\"</span>);</span><br><span class=\"line\">    dataSource.setUser(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    dataSource.setPassword(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    dataSource.setDriver(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">    dataSource.setMaxPoolSize(<span class=\"number\">50</span>);</span><br><span class=\"line\">    dataSource.setInitialPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    dataSource.setMinPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    dataSource.setMaxWaitTime(<span class=\"number\">60</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    dataSource.setMaxIdleTime(<span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    dataSource.addFeature(<span class=\"keyword\">new</span> CleanerFeature(<span class=\"keyword\">true</span>, <span class=\"number\">5</span> * <span class=\"number\">1000</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    test(dataSource, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    System.out.println(System.currentTimeMillis() - start + <span class=\"string\">\" ms\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(DataSource dataSource, <span class=\"keyword\">int</span> count)</span> <span class=\"keyword\">throws</span> SQLException, InterruptedException </span>&#123;</span><br><span class=\"line\">    CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(count);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</span><br><span class=\"line\">        tpe.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                HoneycombConnection connection = (HoneycombConnection) dataSource.getConnection();</span><br><span class=\"line\">                Statement s = connection.createStatement();</span><br><span class=\"line\">                s.executeQuery(<span class=\"string\">\"select * from test limit 1\"</span>);</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                cdl.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cdl.await();</span><br><span class=\"line\">    tpe.shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PC配置：<strong>Intel® Core™ i5-8300H CPU @ 2.30GHz 2.30 GHz 4核8G 512SSD</strong></p>\n<p>10000次查询，耗时：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">938</span> ms</span><br></pre></td></tr></table></figure>\n<p>结束语：再次召唤传送门：<a href=\"https://github.com/ainilili/honeycomb\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/honeycomb</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"连接池的使命\"><a class=\"header-anchor\" href=\"#连接池的使命\">¶</a>连接池的使命！</h2>\n<p>无论是线程池还是db连接池，他们都有一个共同的特性：<strong>资源复用</strong>，在普通的场景中，我们使用一个连接，它的生命周期可能是这样的：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/24/16ae8d822d4ac11e?w=637&amp;h=168&amp;f=png&amp;s=4758\" alt=\"\"><br>\n一个连接，从创建完毕到销毁，期间只被使用了一次（这里的一次是指在单个作用域内的使用），当周期结束，另外一个调用者仍然需要这个连接去做事，就要重复去经历这种生命周期。因为创建和销毁都是需要对应的服务消耗时间以及系统资源去处理的，这样不仅浪费了大量的系统资源，而且导致业务响应过程中都要花费部分时间去重复的创建和销毁，得不偿失，而连接池便被赋予了解决这种问题的使命！</p>\n<h2 id=\"连接池需要做什么？\"><a class=\"header-anchor\" href=\"#连接池需要做什么？\">¶</a>连接池需要做什么？</h2>\n<p>顾名思义，连接池中的<strong>池</strong>字已经很生动形象的阐明了它的用意，它用将所有连接放入一个<code>&quot;池子&quot;</code>中统一的去控制连接的创建和销毁，和原始生命周期去对比，连接池多了以下特性：</p>\n<ul>\n<li>创建并不是真的创建，而是从池子中选出空闲连接。</li>\n<li>销毁并不是真的销毁，而是将使用中的连接放回池中（逻辑关闭）。</li>\n<li>真正的创建和销毁由线程池的特性机制来决定。</li>\n</ul>\n<p>因此，当使用连接池后，我们使用一个连接的生命周期将会演变成这样：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/24/16ae8fb43b0a3d13?w=588&amp;h=377&amp;f=png&amp;s=13088\" alt=\"\"></p>\n<h2 id=\"分析计划\"><a class=\"header-anchor\" href=\"#分析计划\">¶</a>分析计划</h2>\n<p>通灵之术 - 传送门：<a href=\"https://github.com/ainilili/honeycomb\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/honeycomb</a>，DEMO为Java语言实现！</p>\n<p>事前，我们需要点支烟分析一下时间一个连接池需要做哪些事情：</p>\n<ul>\n<li>保存连接的容器是必不可少的，另外，该容器也要支持连接的添加和移除功能，并保证线程安全。</li>\n<li>我们需要因为要对连接的销毁做逻辑调整，我们需要重写它的<code>close</code>以及<code>isClosed</code>方法。</li>\n<li>我们需要有个入口对连接池做管理，例如回收空闲连接。</li>\n</ul>\n<p>连接池不仅仅只是对<code>Connection</code>生命周期的控制，还应该加入一些特色，例如初始连接数，最大连接数，最小连接数、最大空闲时长以及获取连接的等待时长，这些我们也简单支持一下。</p>\n<p>目标以明确，开始动工。</p>\n<h3 id=\"连接池容器选型\"><a class=\"header-anchor\" href=\"#连接池容器选型\">¶</a>连接池容器选型</h3>\n<p>要保证线程安全，我们可以将目标瞄准在<code>JUC</code>包下的神通们，设我们想要的容器为<code>x</code>，那么<code>x</code>不仅需要满足基本的增删改查功能，而且也要提供获取超时功能，这是为了保证当池内长时间没有空闲连接时不会导致业务阻塞，即刻熔断。另外，<code>x</code>需要满足双向操作，这是为了连接池可以识别出饱和的空闲连接，方便回收操作。</p>\n<p>综上所述，<code>LinkedBlockingDeque</code>是最合适的选择，它使用<code>InterruptibleReentrantLock</code>来保证线程安全，使用<code>Condition</code>来做获取元素的阻塞，另外支持双向操作。</p>\n<p>另外，我们可以将连接池拆分为3个类型：</p>\n<ul>\n<li><strong>工作池</strong>：存放正在被使用的连接。</li>\n<li><strong>空闲池</strong>：存放空闲连接。</li>\n<li><strong>回收池</strong>：已经被回收（物理关闭）的连接。</li>\n</ul>\n<p>其中，<strong>工作池</strong>和<strong>回收池</strong>大可不必用双向对列，或许用单向队列或者<code>Set</code>都可以代替之：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingQueue&lt;HoneycombConnection&gt; workQueue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingDeque&lt;HoneycombConnection&gt; idleQueue;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LinkedBlockingQueue&lt;HoneycombConnection&gt; freezeQueue;</span><br></pre></td></tr></table></figure>\n<h3 id=\"connection的装饰\"><a class=\"header-anchor\" href=\"#connection的装饰\">¶</a>Connection的装饰</h3>\n<p>连接池的输出是<code>Connection</code>，它代表着一个db连接，上游服务使用它做完操作后，会直接调用它的<code>close</code>方法来释放连接，而我们必须做的是在调用者无感知的情况下改变它的关闭逻辑，当调用<code>close</code>的方法时，我们将它放回空闲队列中，保证其的可复用性！</p>\n<p>因此，我们需要对原来的<code>Connection</code>做装饰，其做法很简单，但是很累，这里新建一个类来实现<code>Connection</code>接口，通过重写所有的方法来实现一个**“可编辑”**的<code>Connection</code>，我们称之为<code>Connection</code>的装饰者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombConnectionDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Connection</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Connection connection;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">HoneycombConnectionDecorator</span><span class=\"params\">(Connection connection)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connection = connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    此处省略对方法实现的三百行代码...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，我们需要新建一个自己的<code>Connection</code>来继承这个装饰者，并重写相应的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">HoneycombConnectionDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">HoneycombConnectionSwitcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">do</span> some things &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isClosed</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123; <span class=\"keyword\">do</span> some things &#125;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    省略...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"datasource的重写\"><a class=\"header-anchor\" href=\"#datasource的重写\">¶</a>DataSource的重写</h3>\n<p><code>DataSource</code>是JDK为了更好的统合和管理数据源而定义出的一个规范，获取连接的入口，方便我们在这一层更好的扩展数据源（例如增加特殊属性），使我们的连接池的功能更加丰富，我们需要实现一个自己的<code>DataSource</code>能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombWrapperDatasource</span> <span class=\"keyword\">implements</span> <span class=\"title\">DataSource</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HoneycombDatasourceConfig config;</span><br><span class=\"line\">    省略其它方法的实现...</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">(String username, String password)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(config.getUrl(), username, password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    省略其它方法的实现...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们完成了对数据源的实现，但是这里获取连接的方式是物理创建，我们需要满足池化的目的，需要重写<code>HoneycombWrapperDatasource</code>中的连接获取逻辑，做法是创建一个新的类对父类方法重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">HoneycombWrapperDatasource</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HoneycombConnectionPool pool;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        这里实现从pool中取出连接的逻辑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    省略...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"特性扩展\"><a class=\"header-anchor\" href=\"#特性扩展\">¶</a>特性扩展</h3>\n<p>在当前结构体系下，我们的连接池逐渐浮现出了雏形，但远远不够的是，我们需要在此结构下可以做自由的扩展，使连接池对连接的控制更加灵活，因此我们可以引入<strong>特性</strong>这个概念，它允许我们在其内部访问连接池，并对连接池做一系列的扩展操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>AbstractFeature</code>抽象父类需要实现<code>doing</code>方法，我们可以在方法内部实现对连接池的控制，其中一个典型的例子就是对池中空闲连接左回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanerFeature</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span> </span>&#123;</span><br><span class=\"line\">        这里做空闲连接的回收</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"落实计划\"><a class=\"header-anchor\" href=\"#落实计划\">¶</a>落实计划</h2>\n<p>经过上述分析，要完成一个连接池，需要这些模块的配合，总体流程如下：<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/26/16af28f6f668a3e6?w=754&amp;h=845&amp;f=png&amp;s=66582\" alt=\"\"></p>\n<h3 id=\"第一步：设置数据源属性\"><a class=\"header-anchor\" href=\"#第一步：设置数据源属性\">¶</a>第一步：设置数据源属性</h3>\n<p>在初始化<code>DataSource</code>之前，我们需要将各属性设置进去，这里使用<code>HoneycombWrapperDatasource</code>中的<code>HoneycombDatasourceConfig</code>来承载各属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoneycombDatasourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db url</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db user</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//db password</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//driver驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化连接数，默认为2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> initialPoolSize = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最大连接数，默认为10</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxPoolSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最小连接数，默认为2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minPoolSize = <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取连接时，最大等待时长，默认为60s</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxWaitTime = <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最大空闲时长，超出要被回收，默认为20s</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxIdleTime = <span class=\"number\">20</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//特性列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;AbstractFeature&gt; features;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HoneycombDatasourceConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        features = <span class=\"keyword\">new</span> ArrayList&lt;AbstractFeature&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    省略getter、setter....</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：初始化连接池\"><a class=\"header-anchor\" href=\"#第二步：初始化连接池\">¶</a>第二步：初始化连接池</h3>\n<p>设置好属性之后，我们需要完成连接池的初始化工作，在<code>HoneycombDataSource</code>的<code>init</code>方法中实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//阻塞其他线程初始化操作，等待初始化完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(initialStarted || ! (initialStarted = ! initialStarted)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(! initialFinished) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                INITIAL_LOCK.lock();</span><br><span class=\"line\">                INITIAL_CONDITION.await();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                INITIAL_LOCK.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//config参数校验</span></span><br><span class=\"line\">    config.assertSelf();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Class.forName(getDriver());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例化线程池</span></span><br><span class=\"line\">    pool = <span class=\"keyword\">new</span> HoneycombConnectionPool(config);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化最小连接</span></span><br><span class=\"line\">    Integer index = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; config.getInitialPoolSize(); i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pool.putLeisureConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//触发特性</span></span><br><span class=\"line\">    pool.touchFeatures();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//完成初始化并唤醒其他阻塞</span></span><br><span class=\"line\">    initialFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        INITIAL_LOCK.lock();</span><br><span class=\"line\">        INITIAL_CONDITION.signalAll();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        INITIAL_LOCK.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：创建初始连接\"><a class=\"header-anchor\" href=\"#第三步：创建初始连接\">¶</a>第三步：创建初始连接</h3>\n<p>在<code>init</code>的方法中，如果<code>initialPoolSize</code>大于0，会去创建指定数量的物理连接放入连接池中，创建数量要小于最大连接数<code>maxPoolSize</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HoneycombConnection <span class=\"title\">createNativeConnection</span><span class=\"params\">(HoneycombConnectionPool pool)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HoneycombConnection(<span class=\"keyword\">super</span>.getConnection(), pool);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成初始化后，下一步就是获取连接。</p>\n<h3 id=\"第四步：从空闲池获取\"><a class=\"header-anchor\" href=\"#第四步：从空闲池获取\">¶</a>第四步：从空闲池获取</h3>\n<p>我们之前将连接池分成了三个，它们分别是<strong>空闲池</strong>、<strong>工作池</strong>和<strong>回收池</strong>。</p>\n<p>我们可以通过<code>HoneycombDataSource</code>的<code>getConnection</code>方法来获取连接，当我们需要获取时，首先考虑的是空闲池是否有空闲连接，这样可以避免创建和激活新的连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//初始化连接池</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    HoneycombConnection cn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Integer index = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pool.assignable()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//空闲池可分配，从空闲池取出</span></span><br><span class=\"line\">        cn = pool.getIdleConnection();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pool.actionable()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//回收池可分配，从回收池取出</span></span><br><span class=\"line\">        cn = pool.getFreezeConnection();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果连接数未满，创建新的物理连接</span></span><br><span class=\"line\">        cn = pool.putOccupiedConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cn == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果无法获取连接，阻塞等待空闲池连接</span></span><br><span class=\"line\">        cn = pool.getIdleConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cn.isClosedActive()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果物理连接关闭，则获取新的连接</span></span><br><span class=\"line\">        cn.setConnection(<span class=\"keyword\">super</span>.getConnection());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步：从回收池获取\"><a class=\"header-anchor\" href=\"#第五步：从回收池获取\">¶</a>第五步：从回收池获取</h3>\n<p>如果空闲池不可分配，那么说明连接供不应求，也许之前有些空闲连接已经被回收（物理关闭），那么我们在创建新连接之前，可以到回收池看一下是否存在已回收连接，如果存在直接取出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pool.actionable()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//回收池可分配，从回收池取出</span></span><br><span class=\"line\">    cn = pool.getFreezeConnection();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第六步：创建新的连接\"><a class=\"header-anchor\" href=\"#第六步：创建新的连接\">¶</a>第六步：创建新的连接</h3>\n<p>如果回收池也不可分配，此时要判断连接池连接数量是否已经达到最大连接，如果没有达到，创建新的物理连接并直接添加到工作池中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((index =  pool.applyIndex()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果连接数未满，创建新的物理连接，添加到工作池</span></span><br><span class=\"line\">    cn = pool.putOccupiedConnection(createNativeConnection(pool), index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七步：等待空闲池的连接\"><a class=\"header-anchor\" href=\"#第七步：等待空闲池的连接\">¶</a>第七步：等待空闲池的连接</h3>\n<p>如果上述三种情况都不满足，那么只能从空闲池等待其他连接的释放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cn == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果无法获取连接，阻塞等待空闲池连接</span></span><br><span class=\"line\">    cn = pool.getIdleConnection();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体逻辑封装在<code>HoneycombConnectionPool</code>的<code>getIdleConnection</code>方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HoneycombConnection <span class=\"title\">getIdleConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//获取最大等待时间</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> waitTime = config.getMaxWaitTime();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(waitTime &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> beginPollNanoTime = System.nanoTime();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//设置超时时间，阻塞等待其他连接的释放</span></span><br><span class=\"line\">            HoneycombConnection nc = idleQueue.poll(waitTime, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            \t<span class=\"comment\">//状态转换</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nc.isClosed() &amp;&amp; nc.switchOccupied() &amp;&amp; working(nc)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nc;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> timeConsuming = (System.nanoTime() - beginPollNanoTime) / (<span class=\"number\">1000</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//也许在超时时间内获取到了连接，但是状态转换失败，此时刷新超时时间</span></span><br><span class=\"line\">            waitTime -= timeConsuming;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"获取连接超时\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八步：激活连接\"><a class=\"header-anchor\" href=\"#第八步：激活连接\">¶</a>第八步：激活连接</h3>\n<p>最后，判断一下连接是否被物理关闭，如果是，我们需要打开新的连接替换已经被回收的连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cn.isClosedActive()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果物理连接关闭，则获取新的连接</span></span><br><span class=\"line\">    cn.setConnection(<span class=\"keyword\">super</span>.getConnection());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接的回收\"><a class=\"header-anchor\" href=\"#连接的回收\">¶</a>连接的回收</h3>\n<p>如果在某段时间内我们的业务量剧增，那么需要同时工作的连接将会很多，之后过了不久，我们的业务量下降，那么之前已经创建的连接明显饱和，这时就需要我们对其进行回收，我们可以通过<code>AbstractFeature</code>入口操作连接池。</p>\n<p>对于回收这个操作，我们通过<code>CleanerFeature</code>来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanerFeature</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFeature</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(CleanerFeature.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CleanerFeature</span><span class=\"params\">(<span class=\"keyword\">boolean</span> enable, <span class=\"keyword\">long</span> interval)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//enable表示是否启用</span></span><br><span class=\"line\">       <span class=\"comment\">//interval表示扫描间隔</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(enable, interval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doing</span><span class=\"params\">(HoneycombConnectionPool pool)</span> </span>&#123;</span><br><span class=\"line\">        LinkedBlockingDeque&lt;HoneycombConnection&gt; idleQueue = pool.getIdleQueue();</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//回收扫描间隔</span></span><br><span class=\"line\">                    \tThread.sleep(interval);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    \t<span class=\"comment\">//回收时，空闲池上锁</span></span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (idleQueue) &#123;</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Cleaner Model To Start &#123;&#125;\"</span>, idleQueue.size());</span><br><span class=\"line\">                            <span class=\"comment\">//回收操作</span></span><br><span class=\"line\">                            idleQueue.stream().filter(c -&gt; &#123; <span class=\"keyword\">return</span> c.idleTime() &gt; pool.getConfig().getMaxIdleTime(); &#125;).forEach(c -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(! c.isClosedActive() &amp;&amp; c.idle()) &#123;</span><br><span class=\"line\">                                        c.closeActive();</span><br><span class=\"line\">                                        pool.freeze(c);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                                    e.printStackTrace();</span><br><span class=\"line\">                                &#125; </span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Cleaner Model To Finished &#123;&#125;\"</span>, idleQueue.size());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span>(Throwable e) &#123;</span><br><span class=\"line\">                        logger.error(<span class=\"string\">\"Cleaner happended error\"</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        t.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的操作很简单，对空闲池加锁，扫描所有连接，释放空闲时间超过最大空闲时间设置的连接，其实这里只要知道当前连接的空闲时长就一目了然了，我们在连接放入空闲池时候去刷新他的空闲时间点，那么当前的空闲时长就等于当前时间减去空闲开始时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idleTime = nowTime - idleStartTime</span><br></pre></td></tr></table></figure>\n<p>在切换状态为空闲时刷新空闲开始时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchIdle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"keyword\">this</span>, statusOffset, status, ConnectionStatus.IDLE) &amp;&amp; flushIdleStartTime();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试一下\"><a class=\"header-anchor\" href=\"#测试一下\">¶</a>测试一下</h2>\n<p>体验成果的最快途径就是投入使用，这里搞一个单元测试体验一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> ThreadPoolExecutor tpe = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>, <span class=\"number\">0</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testConcurrence</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException, InterruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    HoneycombDataSource dataSource = <span class=\"keyword\">new</span> HoneycombDataSource();</span><br><span class=\"line\">    dataSource.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;transformedBitIsBoolean=true&amp;zeroDateTimeBehavior=CONVERT_TO_NULL&amp;serverTimezone=Asia/Shanghai\"</span>);</span><br><span class=\"line\">    dataSource.setUser(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    dataSource.setPassword(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    dataSource.setDriver(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">    dataSource.setMaxPoolSize(<span class=\"number\">50</span>);</span><br><span class=\"line\">    dataSource.setInitialPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    dataSource.setMinPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    dataSource.setMaxWaitTime(<span class=\"number\">60</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    dataSource.setMaxIdleTime(<span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    dataSource.addFeature(<span class=\"keyword\">new</span> CleanerFeature(<span class=\"keyword\">true</span>, <span class=\"number\">5</span> * <span class=\"number\">1000</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    test(dataSource, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    System.out.println(System.currentTimeMillis() - start + <span class=\"string\">\" ms\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(DataSource dataSource, <span class=\"keyword\">int</span> count)</span> <span class=\"keyword\">throws</span> SQLException, InterruptedException </span>&#123;</span><br><span class=\"line\">    CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(count);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</span><br><span class=\"line\">        tpe.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                HoneycombConnection connection = (HoneycombConnection) dataSource.getConnection();</span><br><span class=\"line\">                Statement s = connection.createStatement();</span><br><span class=\"line\">                s.executeQuery(<span class=\"string\">\"select * from test limit 1\"</span>);</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                cdl.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cdl.await();</span><br><span class=\"line\">    tpe.shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PC配置：<strong>Intel® Core™ i5-8300H CPU @ 2.30GHz 2.30 GHz 4核8G 512SSD</strong></p>\n<p>10000次查询，耗时：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">938</span> ms</span><br></pre></td></tr></table></figure>\n<p>结束语：再次召唤传送门：<a href=\"https://github.com/ainilili/honeycomb\" target=\"_blank\" rel=\"noopener\">https://github.com/ainilili/honeycomb</a></p>\n"},{"_content":"","source":"_drafts/如何设计并实现一个db连接池？.md","raw":"","slug":"如何设计并实现一个db连接池？","published":0,"date":"2019-05-26T05:45:41.165Z","updated":"2019-05-26T05:45:41.165Z","_id":"cjw4iro010003cmtpvfqqnr3h","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cjq1n0kzk00079ctp7f7m4u6f","category_id":"cjq1n0kzm00099ctpu54r2sh5","_id":"cjq1n0kzr000f9ctpol8iwfja"},{"post_id":"cjq37ngv100000gtpwto9nccq","category_id":"cjq37ngvb00010gtphyjfvl1q","_id":"cjq37ngvk00040gtphz4s6jou"},{"post_id":"cjt3yd1pp0000e3tpcacxg3lp","category_id":"cjt3yd1py0001e3tpcosgdt51","_id":"cjt3yd1q60002e3tps3qeygmf"}],"PostTag":[{"post_id":"cjq1n0kyi00009ctpllsam1k0","tag_id":"cjq1n0kz100029ctpd8zrii0x","_id":"cjq1n0kzp000b9ctp9ci3hml9"},{"post_id":"cjq1n0kyi00009ctpllsam1k0","tag_id":"cjq1n0kzj00069ctpkhbrje6t","_id":"cjq1n0kzq000d9ctp93lpb18p"},{"post_id":"cjq1n0kzp000c9ctplsnbe9fe","tag_id":"cjq1n0kzr000e9ctpxg7jzrgi","_id":"cjq1n0kzr000g9ctplutvbhvk"},{"post_id":"cjq1n0kzp000c9ctplsnbe9fe","tag_id":"cjq1n0kzj00069ctpkhbrje6t","_id":"cjq1n0kzr000h9ctpdm3828j8"},{"post_id":"cjq37ngv100000gtpwto9nccq","tag_id":"cjq37ngvi00020gtprjwvi8x5","_id":"cjq37ngvj00030gtp0mlw00xw"},{"post_id":"cjw4inqol0000cmtpf445j9lc","tag_id":"cjw4ipe8g0001cmtpcm6ipqr6","_id":"cjw4ipe8g0002cmtp5doq15jt"}],"Tag":[{"name":"Jenkins","_id":"cjq1n0kz100029ctpd8zrii0x"},{"name":"Maven","_id":"cjq1n0kzj00069ctpkhbrje6t"},{"name":"Java","_id":"cjq1n0kzr000e9ctpxg7jzrgi"},{"name":"设计模式","_id":"cjq37ngvi00020gtprjwvi8x5"},{"name":"连接池","_id":"cjw4ipe8g0001cmtpcm6ipqr6"}]}}